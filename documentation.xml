<haxe>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/EReg.hx">
		<r><c path="flash.utils.RegExp"/></r>
		<result><c path="+Array"/></result>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="54">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="59">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="78">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="85">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="89">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="G1090812" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G1183750" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<GUI public="1" static="1"><c path="com.genome2d.components.renderable.ui.GUI"/></GUI>
		<GUIHorizontalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIHorizontalLayout"/></GUIHorizontalLayout>
		<GUIVerticalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIVerticalLayout"/></GUIVerticalLayout>
		<GUIFontSkin public="1" static="1"><c path="com.genome2d.ui.skin.GUIFontSkin"/></GUIFontSkin>
		<GUITextureSkin public="1" static="1"><c path="com.genome2d.ui.skin.GUITextureSkin"/></GUITextureSkin>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G1213131" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G1885729" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G210207" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G2155486" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<GUI public="1" static="1"><c path="com.genome2d.components.renderable.ui.GUI"/></GUI>
		<GUIHorizontalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIHorizontalLayout"/></GUIHorizontalLayout>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G3518554" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G3673681" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G3727681" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G4116847" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G42424" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G463260" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G4679714" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G5795503" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<GUI public="1" static="1"><c path="com.genome2d.components.renderable.ui.GUI"/></GUI>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G5894754" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G6057614" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G6258124" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G6310384" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G6338765" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G6803570" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G7239799" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G7260591" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G7517855" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G8038699" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<GUI public="1" static="1"><c path="com.genome2d.components.renderable.ui.GUI"/></GUI>
		<GUIHorizontalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIHorizontalLayout"/></GUIHorizontalLayout>
		<GUIVerticalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIVerticalLayout"/></GUIVerticalLayout>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G8201548" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G9132635" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<GText public="1" static="1"><c path="com.genome2d.components.renderable.text.GText"/></GText>
		<GTileMap public="1" static="1"><c path="com.genome2d.components.renderable.tilemap.GTileMap"/></GTileMap>
		<GUI public="1" static="1"><c path="com.genome2d.components.renderable.ui.GUI"/></GUI>
		<GUIHorizontalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIHorizontalLayout"/></GUIHorizontalLayout>
		<GUIVerticalLayout public="1" static="1"><c path="com.genome2d.ui.layout.GUIVerticalLayout"/></GUIVerticalLayout>
		<GUIFontSkin public="1" static="1"><c path="com.genome2d.ui.skin.GUIFontSkin"/></GUIFontSkin>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="G9248678" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" extern="1">
		<GAsset public="1" static="1"><c path="com.genome2d.assets.GAsset"/></GAsset>
		<GXmlAsset public="1" static="1"><c path="com.genome2d.assets.GXmlAsset"/></GXmlAsset>
		<GImageAsset public="1" static="1"><c path="com.genome2d.assets.GImageAsset"/></GImageAsset>
		<GUISkin public="1" static="1"><c path="com.genome2d.ui.skin.GUISkin"/></GUISkin>
		<GUIElement public="1" static="1"><c path="com.genome2d.ui.element.GUIElement"/></GUIElement>
		<GUILayout public="1" static="1"><c path="com.genome2d.ui.layout.GUILayout"/></GUILayout>
		<GComponent public="1" static="1"><c path="com.genome2d.components.GComponent"/></GComponent>
		<GCameraController public="1" static="1"><c path="com.genome2d.components.GCameraController"/></GCameraController>
		<GTexturedQuad public="1" static="1"><c path="com.genome2d.components.renderable.GTexturedQuad"/></GTexturedQuad>
		<GFlashObject public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashObject"/></GFlashObject>
		<GFlashText public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashText"/></GFlashText>
		<GFlashVideo public="1" static="1"><c path="com.genome2d.components.renderable.flash.GFlashVideo"/></GFlashVideo>
		<GMovieClip public="1" static="1"><c path="com.genome2d.components.renderable.GMovieClip"/></GMovieClip>
		<GShape public="1" static="1"><c path="com.genome2d.components.renderable.GShape"/></GShape>
		<GTiledSprite public="1" static="1"><c path="com.genome2d.components.renderable.GTiledSprite"/></GTiledSprite>
		<GSlice3Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice3Sprite"/></GSlice3Sprite>
		<GSlice9Sprite public="1" static="1"><c path="com.genome2d.components.renderable.GSlice9Sprite"/></GSlice9Sprite>
		<GSprite public="1" static="1"><c path="com.genome2d.components.renderable.GSprite"/></GSprite>
		<GParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GParticleSystem"/></GParticleSystem>
		<GSimpleParticleSystem public="1" static="1"><c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/></GSimpleParticleSystem>
		<meta>
			<m n=":native"><e>"com.genome2d.proto.GPrototypeHelper"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="IntIterator" params="" file="C:\HaxeToolkit\haxe\std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" set="method" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through it's special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="C:\HaxeToolkit\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="134" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="159" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="179" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred" v=":null">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="206" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="237" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="250" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="List" params="T" file="C:\HaxeToolkit\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="224">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="243">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="259">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
	</class>
	<abstract path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="70" static="1">
		<f a="this:key:value">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="87" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="102" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="109" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="118" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="127" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="131" static="1">
		<f a="this:k:v">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap get="inline" set="null" line="136" static="1">
		<f a="t">
			<c path="IMap">
				<c path="String"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap get="inline" set="null" line="140" static="1">
		<f a="t">
			<c path="IMap">
				<x path="Int"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K" get="inline" set="null" line="144" static="1">
		<f a="t">
			<c path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K" get="inline" set="null" line="148" static="1">
		<f a="t">
			<c path="IMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="152" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="156" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="160" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="70" static="1">
			<f a="this:key:value">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="87" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="102" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="109" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="118" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="127" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="131" static="1">
			<f a="this:k:v">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap get="inline" set="null" line="136" static="1">
			<f a="t">
				<c path="IMap">
					<c path="String"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap get="inline" set="null" line="140" static="1">
			<f a="t">
				<c path="IMap">
					<x path="Int"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K" get="inline" set="null" line="144" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K" get="inline" set="null" line="148" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="152" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="156" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="160" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<t path="Null"><c path="IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="IMap.K"/>
	<c path="IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<typedef path="_Map.Hashable" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result 
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is 
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of 
		two specified numbers, in radians.
		
		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		This is the mathematical inverse operation of exp, 
		i.e. `log(exp(v)) == v` always holds.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="55" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="86" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="92" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="106" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="114" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="120" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="128" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" get="inline" set="null" line="30" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="34" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="38" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="53" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\HaxeToolkit\haxe\std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="49"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="62">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="72">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="88">
			<f a="s:pos:?len" v="::null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="97">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="36" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="61" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="97" static="1">
			<f a="s:?quotes" v=":null">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="116" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="144" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="165" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="204" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="226" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="248" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="270" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="291" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="313" static="1">
			<f a="n:?digits" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="342" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`.

		This method is faster than String.charCodeAt() on most platforms.
		However, unlike String.charCodeAt(), the result is unspecified if
		`index` is negative or exceeds `s.length`.

		This operation is not guaranteed to work if `s` contains the \0
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="369" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="62" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="85" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="113" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="151" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="164" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="176" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="182" static="1"><f a="t:fact">
	<d/>
	<x path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></describe>
		<getInstanceFields public="1" set="method" line="199" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="203" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="215" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="247" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="264" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="268" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="272" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="276" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="UInt"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The unsigned Int type is only defined for Flash9 and C#. It's currently
	handled the same as a normal Int.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<enum path="XmlType" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Xml.hx" module="Xml"><meta><m n=":flatEnum"/></meta></enum>
	<class path="Xml" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="45" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<compare set="method" line="67" static="1">
			<f a="a:b">
				<c path="Xml"/>
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<createElement public="1" set="method" line="73" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="77" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="82" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="86" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="91" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="95" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="100" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<getNodeType set="method" line="104" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
</f></getNodeType>
		<wrap set="method" line="180" static="1"><f a="node:?type" v=":null">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
	<c path="Xml"/>
</f></wrap>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" get="accessor" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<_node><c path="flash.xml.XML"/></_node>
		<get_nodeName set="method" line="120"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName set="method" line="127"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue set="method" line="140"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue set="method" line="149"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get_parent set="method" line="175"><f a=""><c path="Xml"/></f></get_parent>
		<wraps set="method" line="187"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="Xml"/></c>
</f></wraps>
		<getAttribNS set="method" line="194"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<get public="1" set="method" line="207">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="224">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="245">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="255">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="266">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="288">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="304">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="320">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="345">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="354">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="363">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="372">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="383">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="395">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<new set="method" line="71"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="com.adobe.utils.extended.AGALMiniAssembler" params="" file="Genome2D-ContextFlash/lib/AGAL.swc@com.adobe.utils.extended.AGALMiniAssembler" extern="1">
		<REGEXP_OUTER_SPACES static="1">
			<c path="flash.utils.RegExp"/>
			<meta><m n=":protected"/></meta>
		</REGEXP_OUTER_SPACES>
		<error public="1" set="null"><c path="String"/></error>
		<agalcode public="1" set="null"><c path="flash.utils.ByteArray"/></agalcode>
		<assemble public="1" set="method">
			<f a="p1:p2:?p3:?p4">
				<c path="String"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta>
				<m n=":defParam">
					<e>"p4"</e>
					<e>false</e>
				</m>
				<m n=":defParam">
					<e>"p3"</e>
					<e>1</e>
				</m>
			</meta>
		</assemble>
		<assemble2 public="1" set="method"><f a="p1:p2:p3:p4">
	<c path="flash.display3D.Context3D"/>
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
	<c path="flash.display3D.Program3D"/>
</f></assemble2>
		<verbose public="1"><x path="Bool"/></verbose>
		<new public="1" set="method">
			<f a="?p1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":defParam">
	<e>"p1"</e>
	<e>false</e>
</m></meta>
		</new>
	</class>
	<class path="com.genome2d.Genome2D" params="" file="Genome2D-Core/src/com/genome2d/Genome2D.hx">
		<VERSION public="1" get="inline" set="null" line="34" static="1">
			<c path="String"/>
			<haxe_doc>Genome2D Version</haxe_doc>
		</VERSION>
		<g2d_instance static="1"><c path="com.genome2d.Genome2D"/></g2d_instance>
		<g2d_instantiable line="37" static="1"><x path="Bool"/></g2d_instantiable>
		<getInstance public="1" get="inline" set="null" line="42" static="1">
			<f a=""><c path="com.genome2d.Genome2D"/></f>
			<haxe_doc>Get the singleton instance of Genome2D</haxe_doc>
		</getInstance>
		<autoUpdateAndRender public="1">
			<x path="Bool"/>
			<haxe_doc>Enable/disable auto updating and rendering of Genome2D node graph

        default `true`</haxe_doc>
		</autoUpdateAndRender>
		<g2d_onInitialized><c path="msignal.Signal0"/></g2d_onInitialized>
		<onInitialized public="1" get="accessor" set="null">
			<c path="msignal.Signal0"/>
			<haxe_doc>Signal dispatched when Genome2D initializes successfully</haxe_doc>
		</onInitialized>
		<get_onInitialized get="inline" set="null" line="66"><f a=""><c path="msignal.Signal0"/></f></get_onInitialized>
		<g2d_onFailed><c path="msignal.Signal1"><c path="String"/></c></g2d_onFailed>
		<onFailed public="1" get="accessor" set="null">
			<c path="msignal.Signal1"><c path="String"/></c>
			<haxe_doc>Signal dispatched when Genome2D fails to initialize

        Sends reason message</haxe_doc>
		</onFailed>
		<get_onFailed get="inline" set="null" line="79"><f a=""><c path="msignal.Signal1"><c path="String"/></c></f></get_onFailed>
		<g2d_onInvalidated><c path="msignal.Signal0"/></g2d_onInvalidated>
		<onInvalidated public="1" get="accessor" set="null">
			<c path="msignal.Signal0"/>
			<haxe_doc>Signal dispatched when Genome2D is invalidated</haxe_doc>
		</onInvalidated>
		<get_onInvalidated get="inline" set="null" line="90"><f a=""><c path="msignal.Signal0"/></f></get_onInvalidated>
		<g2d_onUpdate><c path="msignal.Signal1"><x path="Float"/></c></g2d_onUpdate>
		<onUpdate public="1" get="accessor" set="null">
			<c path="msignal.Signal1"><x path="Float"/></c>
			<haxe_doc>Signal dispatched when Genome2D is updated to next frame

        Sends deltaTime `Float` passed between updates</haxe_doc>
		</onUpdate>
		<get_onUpdate get="inline" set="null" line="103"><f a=""><c path="msignal.Signal1"><x path="Float"/></c></f></get_onUpdate>
		<g2d_onPreRender><c path="msignal.Signal0"/></g2d_onPreRender>
		<onPreRender public="1" get="accessor" set="null">
			<c path="msignal.Signal0"/>
			<haxe_doc>Signal dispatched when Genome2D is rendering, before it renders its own node graph</haxe_doc>
		</onPreRender>
		<get_onPreRender get="inline" set="null" line="114"><f a=""><c path="msignal.Signal0"/></f></get_onPreRender>
		<g2d_onPostRender><c path="msignal.Signal0"/></g2d_onPostRender>
		<onPostRender public="1" get="accessor" set="null">
			<c path="msignal.Signal0"/>
			<haxe_doc>Signal dispatched when Genome2D is rendering, after it rendered its own node graph</haxe_doc>
		</onPostRender>
		<get_onPostRender get="inline" set="null" line="125"><f a=""><c path="msignal.Signal0"/></f></get_onPostRender>
		<g2d_onKeySignal><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c></g2d_onKeySignal>
		<onKeySignal public="1" get="accessor" set="null">
			<c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c>
			<haxe_doc>Signal dispatched when Genome2D processes keyboard signals</haxe_doc>
		</onKeySignal>
		<get_onKeySignal get="inline" set="null" line="136"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c></f></get_onKeySignal>
		<g2d_currentFrameId><x path="Int"/></g2d_currentFrameId>
		<getCurrentFrameId public="1" get="inline" set="null" line="144">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return current Genome2D frame Id</haxe_doc>
		</getCurrentFrameId>
		<g2d_runTime><x path="Float"/></g2d_runTime>
		<getRunTime public="1" get="inline" set="null" line="152">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Return current Genome2D time from start</haxe_doc>
		</getRunTime>
		<g2d_currentFrameDeltaTime><x path="Float"/></g2d_currentFrameDeltaTime>
		<getCurrentFrameDeltaTime public="1" get="inline" set="null" line="160">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Return current frame delta time</haxe_doc>
		</getCurrentFrameDeltaTime>
		<g2d_root><c path="com.genome2d.node.GNode"/></g2d_root>
		<root public="1" get="accessor" set="null">
			<c path="com.genome2d.node.GNode"/>
			<haxe_doc>Root `GNode` the parent of the whole node graph</haxe_doc>
		</root>
		<get_root get="inline" set="null" line="171"><f a=""><c path="com.genome2d.node.GNode"/></f></get_root>
		<g2d_context><t path="com.genome2d.context.IContext"/></g2d_context>
		<getContext public="1" get="inline" set="null" line="176"><f a=""><t path="com.genome2d.context.IContext"/></f></getContext>
		<g2d_renderMatrix>
			<t path="com.genome2d.geom.GMatrix"/>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</g2d_renderMatrix>
		<g2d_renderMatrixIndex><x path="Int"/></g2d_renderMatrixIndex>
		<g2d_renderMatrixArray><c path="Array"><t path="com.genome2d.geom.GMatrix"/></c></g2d_renderMatrixArray>
		<g2d_contextConfig><c path="com.genome2d.context.GContextConfig"/></g2d_contextConfig>
		<g2d_cameras><c path="Array"><c path="com.genome2d.components.GCameraController"/></c></g2d_cameras>
		<init public="1" set="method" line="209">
			<f a="p_config">
				<c path="com.genome2d.context.GContextConfig"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initialize Genome2D

        @param p_config `GContextConfig` instance configuring Genome2D context</haxe_doc>
		</init>
		<update public="1" set="method" line="240">
			<f a="p_deltaTime">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update node graph

        This method is called automatically if `autoUpdateAndRender` is true</haxe_doc>
		</update>
		<render public="1" set="method" line="251">
			<f a="?p_camera" v="null">
				<c path="com.genome2d.components.GCameraController"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Render node graph

        This method is called automatically if `autoUpdateAndRender` is true</haxe_doc>
		</render>
		<dispose public="1" set="method" line="288">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Dispose Genome2D framework</haxe_doc>
		</dispose>
		<g2d_contextInitializedHandler set="method" line="304"><f a=""><x path="Void"/></f></g2d_contextInitializedHandler>
		<g2d_contextFailedHandler set="method" line="315"><f a="p_error">
	<c path="String"/>
	<x path="Void"/>
</f></g2d_contextFailedHandler>
		<g2d_contextInvalidatedHandler set="method" line="326"><f a=""><x path="Void"/></f></g2d_contextInvalidatedHandler>
		<g2d_frameHandler set="method" line="330"><f a="p_deltaTime">
	<x path="Float"/>
	<x path="Void"/>
</f></g2d_frameHandler>
		<g2d_addCameraController set="method" line="340">
			<f a="p_camera">
				<c path="com.genome2d.components.GCameraController"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</g2d_addCameraController>
		<g2d_removeCameraController set="method" line="348">
			<f a="p_camera">
				<c path="com.genome2d.components.GCameraController"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</g2d_removeCameraController>
		<g2d_contextMouseSignalHandler set="method" line="355">
			<f a="p_signal">
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</g2d_contextMouseSignalHandler>
		<g2d_contextKeySignalHandler set="method" line="373"><f a="p_signal">
	<c path="com.genome2d.callbacks.GKeyboardSignal"/>
	<x path="Void"/>
</f></g2d_contextKeySignalHandler>
		<new set="method" line="191">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>CONSTRUCTOR</haxe_doc>
		</new>
		<haxe_doc>Genome2D core class</haxe_doc>
	</class>
	<class path="com.genome2d.animation.GAnimation" params="" file="Genome2D-Core/src/com/genome2d/animation/GAnimation.hx">
		<g2d_speed><x path="Float"/></g2d_speed>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<g2d_currentFrame><x path="Int"/></g2d_currentFrame>
		<g2d_lastUpdatedFrameId><x path="Int"/></g2d_lastUpdatedFrameId>
		<g2d_startIndex><x path="Int"/></g2d_startIndex>
		<g2d_endIndex><x path="Int"/></g2d_endIndex>
		<g2d_playing><x path="Bool"/></g2d_playing>
		<g2d_currentFrameTexture><c path="com.genome2d.textures.GTexture"/></g2d_currentFrameTexture>
		<g2d_frameTextures><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></g2d_frameTextures>
		<g2d_frameTexturesCount><x path="Int"/></g2d_frameTexturesCount>
		<g2d_onPlaybackEnd><c path="msignal.Signal0"/></g2d_onPlaybackEnd>
		<onPlaybackEnd public="1" get="accessor" set="null"><c path="msignal.Signal0"/></onPlaybackEnd>
		<get_onPlaybackEnd set="method" line="26"><f a=""><c path="msignal.Signal0"/></f></get_onPlaybackEnd>
		<frameCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Get the current frame count</haxe_doc>
		</frameCount>
		<get_frameCount get="inline" set="null" line="37"><f a=""><x path="Int"/></f></get_frameCount>
		<currentFrame public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Get the current frame index the movieclip is at</haxe_doc>
		</currentFrame>
		<get_currentFrame get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_currentFrame>
		<frameTextureIds public="1" get="null" set="accessor">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Texture ids used for movieclip frames</haxe_doc>
		</frameTextureIds>
		<set_frameTextureIds get="inline" set="null" line="57"><f a="p_value">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
</f></set_frameTextureIds>
		<frameTextures public="1" get="null" set="accessor">
			<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
			<haxe_doc>Textures used for movieclip frames</haxe_doc>
		</frameTextures>
		<set_frameTextures get="inline" set="null" line="81"><f a="p_value">
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
</f></set_frameTextures>
		<repeatable public="1">
			<x path="Bool"/>
			<haxe_doc>Is movieclip repeating after reaching the last frame, default true</haxe_doc>
		</repeatable>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is playback reversed, default false</haxe_doc>
		</reversed>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Framerate the movieclips is playing at, default 30</haxe_doc>
		</frameRate>
		<get_frameRate get="inline" set="null" line="110"><f a=""><x path="Int"/></f></get_frameRate>
		<set_frameRate get="inline" set="null" line="114"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_frameRate>
		<numFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Number of frames in this movieclip</haxe_doc>
		</numFrames>
		<get_numFrames get="inline" set="null" line="125"><f a=""><x path="Int"/></f></get_numFrames>
		<gotoFrame public="1" set="method" line="132">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movie clip</haxe_doc>
		</gotoFrame>
		<gotoAndPlay public="1" set="method" line="142">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movieclip and start playing</haxe_doc>
		</gotoAndPlay>
		<gotoAndStop public="1" set="method" line="150">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movieclip and stop playing</haxe_doc>
		</gotoAndStop>
		<stop public="1" set="method" line="158">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop playback of this movie clip</haxe_doc>
		</stop>
		<play public="1" set="method" line="165">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start the playback of this movie clip</haxe_doc>
		</play>
		<getCurrentFrameTexture public="1" set="method" line="169"><f a=""><c path="com.genome2d.textures.GTexture"/></f></getCurrentFrameTexture>
		<dispose public="1" set="method" line="208"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="com.genome2d.proto.IGPrototypable" params="" file="Genome2D-Core/src/com/genome2d/proto/IGPrototypable.hx" interface="1">
		<getPrototype public="1" set="method"><f a="?p_xml">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method"><f a="p_xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<haxe_doc>Prototypable interface</haxe_doc>
		<meta>
			<m n="textureSkin"><e>"com.genome2d.ui.skin.GUITextureSkin"</e></m>
			<m n="fontSkin"><e>"com.genome2d.ui.skin.GUIFontSkin"</e></m>
			<m n="vertical"><e>"com.genome2d.ui.layout.GUIVerticalLayout"</e></m>
			<m n="horizontal"><e>"com.genome2d.ui.layout.GUIHorizontalLayout"</e></m>
			<m n="GUI"><e>"com.genome2d.components.renderable.ui.GUI"</e></m>
			<m n="GTileMap"><e>"com.genome2d.components.renderable.tilemap.GTileMap"</e></m>
			<m n="GText"><e>"com.genome2d.components.renderable.text.GText"</e></m>
			<m n="GSimpleParticleSystem"><e>"com.genome2d.components.renderable.particles.GSimpleParticleSystem"</e></m>
			<m n="GParticleSystem"><e>"com.genome2d.components.renderable.particles.GParticleSystem"</e></m>
			<m n="GSprite"><e>"com.genome2d.components.renderable.GSprite"</e></m>
			<m n="GSlice9Sprite"><e>"com.genome2d.components.renderable.GSlice9Sprite"</e></m>
			<m n="GSlice3Sprite"><e>"com.genome2d.components.renderable.GSlice3Sprite"</e></m>
			<m n="GTiledSprite"><e>"com.genome2d.components.renderable.GTiledSprite"</e></m>
			<m n="GShape"><e>"com.genome2d.components.renderable.GShape"</e></m>
			<m n="GMovieClip"><e>"com.genome2d.components.renderable.GMovieClip"</e></m>
			<m n="GFlashVideo"><e>"com.genome2d.components.renderable.flash.GFlashVideo"</e></m>
			<m n="GFlashText"><e>"com.genome2d.components.renderable.flash.GFlashText"</e></m>
			<m n="GFlashObject"><e>"com.genome2d.components.renderable.flash.GFlashObject"</e></m>
			<m n="GTexturedQuad"><e>"com.genome2d.components.renderable.GTexturedQuad"</e></m>
			<m n="GCameraController"><e>"com.genome2d.components.GCameraController"</e></m>
			<m n="GComponent"><e>"com.genome2d.components.GComponent"</e></m>
			<m n="layout"><e>"com.genome2d.ui.layout.GUILayout"</e></m>
			<m n="element"><e>"com.genome2d.ui.element.GUIElement"</e></m>
			<m n="GUISkin"><e>"com.genome2d.ui.skin.GUISkin"</e></m>
			<m n="GXmlAsset"><e>"com.genome2d.assets.GXmlAsset"</e></m>
			<m n="GImageAsset"><e>"com.genome2d.assets.GImageAsset"</e></m>
			<m n="asset"><e>"com.genome2d.assets.GAsset"</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.assets.GAsset" params="" file="Genome2D-ContextFlash/src/com/genome2d/assets/GAsset.hx">
		<implements path="com.genome2d.proto.IGPrototypable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<onLoaded public="1"><c path="msignal.Signal1"><c path="com.genome2d.assets.GAsset"/></c></onLoaded>
		<onFailed public="1"><c path="msignal.Signal1"><c path="com.genome2d.assets.GAsset"/></c></onFailed>
		<g2d_id><c path="String"/></g2d_id>
		<id public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
			<haxe_doc>Asset id</haxe_doc>
		</id>
		<get_id get="inline" set="null" line="40"><f a=""><c path="String"/></f></get_id>
		<set_id get="inline" set="null" line="44"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<g2d_url><c path="String"/></g2d_url>
		<url public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
			<haxe_doc>Asset url path</haxe_doc>
		</url>
		<get_url get="inline" set="null" line="62"><f a=""><c path="String"/></f></get_url>
		<set_url get="inline" set="null" line="66"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_url>
		<g2d_loading><x path="Bool"/></g2d_loading>
		<isLoading public="1" set="method" line="80">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if asset is currently loading</haxe_doc>
		</isLoading>
		<g2d_loaded><x path="Bool"/></g2d_loaded>
		<isLoaded public="1" set="method" line="88">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if asset is already loaded</haxe_doc>
		</isLoaded>
		<load public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Load the asset</haxe_doc>
		</load>
		<g2d_completeHandler set="method" line="116"><f a="p_event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_completeHandler>
		<g2d_ioErrorHandler set="method" line="119"><f a="event">
	<c path="flash.events.IOErrorEvent"/>
	<x path="Void"/>
</f></g2d_ioErrorHandler>
		<getPrototype public="1" set="method" line="242"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="92"><f a="?p_url:?p_id" v="'':''">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="prototypeName"><e>"asset"</e></m>
			<m n=":access"><e>'???'</e></m>
		</meta>
	</class>
	<class path="flash.utils.RegExp" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="com.genome2d.assets.GAssetManager" params="" file="Genome2D-Core/src/com/genome2d/assets/GAssetManager.hx">
		<PATH_REGEX public="1" line="16" static="1"><c path="EReg"/></PATH_REGEX>
		<ignoreFailed public="1" line="18" static="1"><x path="Bool"/></ignoreFailed>
		<g2d_references static="1"><x path="Map">
	<c path="String"/>
	<c path="com.genome2d.assets.GAsset"/>
</x></g2d_references>
		<getAssets public="1" set="method" line="21" static="1"><f a=""><x path="Map">
	<c path="String"/>
	<c path="com.genome2d.assets.GAsset"/>
</x></f></getAssets>
		<g2d_loadQueue static="1"><c path="Array"><c path="com.genome2d.assets.GAsset"/></c></g2d_loadQueue>
		<g2d_loading static="1"><x path="Bool"/></g2d_loading>
		<isLoading public="1" set="method" line="28" static="1"><f a=""><x path="Bool"/></f></isLoading>
		<g2d_onQueueLoaded static="1"><c path="msignal.Signal0"/></g2d_onQueueLoaded>
		<onQueueLoaded public="1" get="accessor" set="null" static="1"><c path="msignal.Signal0"/></onQueueLoaded>
		<get_onQueueLoaded get="inline" set="null" line="36" static="1"><f a=""><c path="msignal.Signal0"/></f></get_onQueueLoaded>
		<g2d_onQueueFailed static="1"><c path="msignal.Signal1"><c path="com.genome2d.assets.GAsset"/></c></g2d_onQueueFailed>
		<onQueueFailed public="1" get="accessor" set="null" static="1"><c path="msignal.Signal1"><c path="com.genome2d.assets.GAsset"/></c></onQueueFailed>
		<get_onQueueFailed get="inline" set="null" line="44" static="1"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.assets.GAsset"/></c></f></get_onQueueFailed>
		<init public="1" set="method" line="48" static="1"><f a=""><x path="Void"/></f></init>
		<getAssetById public="1" set="method" line="56" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.assets.GAsset"/>
</f></getAssetById>
		<getXmlAssetById public="1" set="method" line="60" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.assets.GXmlAsset"/>
</f></getXmlAssetById>
		<getImageAssetById public="1" set="method" line="64" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.assets.GImageAsset"/>
</f></getImageAssetById>
		<addFromUrl public="1" set="method" line="68" static="1"><f a="p_url:?p_id" v=":''">
	<c path="String"/>
	<c path="String"/>
	<c path="com.genome2d.assets.GAsset"/>
</f></addFromUrl>
		<loadQueue public="1" set="method" line="79" static="1"><f a=""><x path="Void"/></f></loadQueue>
		<g2d_loadQueueNext set="method" line="86" static="1"><f a=""><x path="Void"/></f></g2d_loadQueueNext>
		<getFileName get="inline" set="null" line="100" static="1"><f a="p_path">
	<c path="String"/>
	<c path="String"/>
</f></getFileName>
		<getFileExtension get="inline" set="null" line="105" static="1"><f a="p_path">
	<c path="String"/>
	<c path="String"/>
</f></getFileExtension>
		<g2d_assetLoadedHandler set="method" line="110" static="1"><f a="p_asset">
	<c path="com.genome2d.assets.GAsset"/>
	<x path="Void"/>
</f></g2d_assetLoadedHandler>
		<g2d_assetFailedHandler set="method" line="114" static="1"><f a="p_asset">
	<c path="com.genome2d.assets.GAsset"/>
	<x path="Void"/>
</f></g2d_assetFailedHandler>
		<generateTextures public="1" set="method" line="119" static="1"><f a="?p_scaleFactor" v="1">
	<x path="Float"/>
	<x path="Void"/>
</f></generateTextures>
	</class>
	<class path="com.genome2d.assets.GImageAsset" params="" file="Genome2D-ContextFlash/src/com/genome2d/assets/GImageAsset.hx">
		<extends path="com.genome2d.assets.GAsset"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_bytes><c path="flash.utils.ByteArray"/></g2d_bytes>
		<bytes public="1" get="accessor" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<get_bytes get="inline" set="null" line="28"><f a=""><c path="flash.utils.ByteArray"/></f></get_bytes>
		<g2d_bitmapData><c path="flash.display.BitmapData"/></g2d_bitmapData>
		<bitmapData public="1" get="accessor" set="null"><c path="flash.display.BitmapData"/></bitmapData>
		<get_bitmapData get="inline" set="null" line="36"><f a=""><c path="flash.display.BitmapData"/></f></get_bitmapData>
		<g2d_type><x path="Int"/></g2d_type>
		<type public="1" get="accessor" set="null"><x path="Int"/></type>
		<get_type get="inline" set="null" line="44"><f a=""><x path="Int"/></f></get_type>
		<initBitmapData public="1" set="method" line="48"><f a="p_id:p_image">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></initBitmapData>
		<g2d_completeHandler set="method" line="55" override="1"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_completeHandler>
		<g2d_bytesComplete set="method" line="78"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_bytesComplete>
		<new public="1" set="method" line="23"><f a="?p_url:?p_id">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.assets.GImageAssetType" params="" file="Genome2D-ContextFlash/src/com/genome2d/assets/GImageAssetType.hx">
		<BITMAPDATA public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></BITMAPDATA>
		<ATF public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></ATF>
	</class>
	<class path="com.genome2d.assets.GXmlAsset" params="" file="Genome2D-ContextFlash/src/com/genome2d/assets/GXmlAsset.hx">
		<extends path="com.genome2d.assets.GAsset"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_xml><c path="Xml"/></g2d_xml>
		<xml public="1" get="accessor" set="null"><c path="Xml"/></xml>
		<get_xml get="inline" set="null" line="22"><f a=""><c path="Xml"/></f></get_xml>
		<g2d_completeHandler set="method" line="26" override="1"><f a="p_event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_completeHandler>
		<new public="1" set="method" line="17"><f a="?p_url:?p_id">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Peter "sHTiF" Stefcek</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.GComponent" params="" file="Genome2D-Core/src/com/genome2d/components/GComponent.hx">
		<implements path="com.genome2d.proto.IGPrototypable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_active><x path="Bool"/></g2d_active>
		<g2d_lookupClass><x path="Class"><c path="com.genome2d.components.GComponent"/></x></g2d_lookupClass>
		<g2d_previous><c path="com.genome2d.components.GComponent"/></g2d_previous>
		<g2d_next><c path="com.genome2d.components.GComponent"/></g2d_next>
		<isActive public="1" set="method" line="26"><f a=""><x path="Bool"/></f></isActive>
		<setActive public="1" set="method" line="29"><f a="p_value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setActive>
		<g2d_node><c path="com.genome2d.node.GNode"/></g2d_node>
		<node public="1" get="accessor" set="null">
			<c path="com.genome2d.node.GNode"/>
			<haxe_doc>Component's node reference</haxe_doc>
		</node>
		<get_node get="inline" set="null" line="40"><f a=""><c path="com.genome2d.node.GNode"/></f></get_node>
		<getPrototype public="1" set="method" line="50">
			<f a="?p_xml" v="null">
				<c path="Xml"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>**************************************************************************************************
	 * 	PROTOTYPE CODE
	 **************************************************************************************************</haxe_doc>
		</getPrototype>
		<g2d_addPrototypeProperty set="method" line="73"><f a="p_name:p_type:?p_parentXml" v="::null">
	<c path="String"/>
	<c path="String"/>
	<c path="Xml"/>
	<x path="Void"/>
</f></g2d_addPrototypeProperty>
		<init public="1" set="method" line="93">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Abstract method called after components is initialized on the node</haxe_doc>
		</init>
		<dispose public="1" set="method" line="96"><f a=""><x path="Void"/></f></dispose>
		<initPrototype public="1" set="method" line="103">
			<f a="p_prototypeXml">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</initPrototype>
		<g2d_initPrototypeProperty set="method" line="114"><f a="p_propertyXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></g2d_initPrototypeProperty>
		<g2d_dispose set="method" line="146">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Base dispose method, if there is a disposing you need to do in your extending components you should override it and always call super.dispose() its used when a node using this components is being disposed</haxe_doc>
		</g2d_dispose>
		<getPrototypeDefault public="1" set="method" line="242"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototypeDefault>
		<initPrototypeDefault public="1" set="method" line="251"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototypeDefault>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component super class all components need to extend it</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":allow"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.GCameraController" params="" file="Genome2D-Core/src/com/genome2d/components/GCameraController.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_viewRectangle><t path="com.genome2d.geom.GRectangle"/></g2d_viewRectangle>
		<g2d_capturedThisFrame><x path="Bool"/></g2d_capturedThisFrame>
		<g2d_renderedNodesCount><x path="Int"/></g2d_renderedNodesCount>
		<backgroundRed public="1">
			<x path="Float"/>
			<haxe_doc>Red components of viewport background color</haxe_doc>
		</backgroundRed>
		<backgroundGreen public="1">
			<x path="Float"/>
			<haxe_doc>Green components of viewport background color</haxe_doc>
		</backgroundGreen>
		<backgroundBlue public="1">
			<x path="Float"/>
			<haxe_doc>Blue components of viewport background color</haxe_doc>
		</backgroundBlue>
		<backgroundAlpha public="1"><x path="Float"/></backgroundAlpha>
		<renderTarget public="1">
			<c path="com.genome2d.textures.GTexture"/>
			<haxe_doc>Render textures used as a target for rendering this camera

        Default `null`</haxe_doc>
		</renderTarget>
		<viewport public="1"><c path="com.genome2d.context.GViewport"/></viewport>
		<getBackgroundColor public="1" set="method" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get a viewport color</haxe_doc>
		</getBackgroundColor>
		<g2d_contextCamera><c path="com.genome2d.context.GCamera"/></g2d_contextCamera>
		<contextCamera public="1" get="accessor" set="null"><c path="com.genome2d.context.GCamera"/></contextCamera>
		<get_contextCamera get="inline" set="null" line="70"><f a=""><c path="com.genome2d.context.GCamera"/></f></get_contextCamera>
		<setView public="1" set="method" line="74"><f a="p_normalizedX:p_normalizedY:p_normalizedWidth:p_normalizedHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setView>
		<zoom public="1" get="accessor" set="accessor"><x path="Float"/></zoom>
		<get_zoom get="inline" set="null" line="85"><f a=""><x path="Float"/></f></get_zoom>
		<set_zoom get="inline" set="null" line="89"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zoom>
		<init public="1" set="method" line="93" override="1"><f a=""><x path="Void"/></f></init>
		<render public="1" set="method" line="103"><f a=""><x path="Void"/></f></render>
		<captureMouseEvent public="1" set="method" line="116"><f a="p_context:p_captured:p_signal">
	<t path="com.genome2d.context.IContext"/>
	<x path="Bool"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></captureMouseEvent>
		<dispose public="1" set="method" line="143" override="1"><f a=""><x path="Void"/></f></dispose>
		<g2d_onAddedToStage set="method" line="152"><f a=""><x path="Void"/></f></g2d_onAddedToStage>
		<g2d_onRemovedFromStage set="method" line="156"><f a=""><x path="Void"/></f></g2d_onRemovedFromStage>
		<setViewport public="1" set="method" line="160"><f a="p_width:p_height:?p_resize" v="::true">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setViewport>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for adding and handling custom camera</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.IRenderable" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/IRenderable.hx" interface="1">
		<render public="1" set="method">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*  Render the components</haxe_doc>
		</render>
		<getBounds public="1" set="method">
			<f a="?p_target">
				<t path="com.genome2d.geom.GRectangle"/>
				<t path="com.genome2d.geom.GRectangle"/>
			</f>
			<haxe_doc>*  Get local bounds of the renderable components</haxe_doc>
		</getBounds>
		<processContextMouseSignal public="1" set="method">
			<f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>*</haxe_doc>
		</processContextMouseSignal>
		<haxe_doc>Interfaces implemented by all renderable components

    Every `GNode` can have a single `IRenderable` components at any given time</haxe_doc>
	</class>
	<class path="com.genome2d.components.renderable.GTexturedQuad" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GTexturedQuad.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<blendMode public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
			<haxe_doc>Blend mode used for rendering</haxe_doc>
		</blendMode>
		<mousePixelEnabled public="1">
			<x path="Bool"/>
			<haxe_doc>Enable/disable pixel perfect mouse detection, not supported by all contexts.
        Default false</haxe_doc>
		</mousePixelEnabled>
		<mousePixelTreshold public="1">
			<x path="Int"/>
			<haxe_doc>Specify alpha treshold for pixel perfect mouse detection, works with mousePixelEnabled true</haxe_doc>
		</mousePixelTreshold>
		<texture public="1">
			<c path="com.genome2d.textures.GTexture"/>
			<haxe_doc>Texture used for rendering</haxe_doc>
		</texture>
		<filter public="1">
			<c path="com.genome2d.context.filters.GFilter"/>
			<haxe_doc>Filter used for rendering</haxe_doc>
		</filter>
		<ignoreMatrix public="1"><x path="Bool"/></ignoreMatrix>
		<render public="1" set="method" line="55">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</render>
		<hitTestPoint public="1" set="method" line="69">
			<f a="p_x:p_y:?p_pixelEnabled:?p_w:?p_h" v="::false:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if a point is inside this quad</haxe_doc>
		</hitTestPoint>
		<processContextMouseSignal public="1" set="method" line="102">
			<f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</processContextMouseSignal>
		<getBounds public="1" set="method" line="155">
			<f a="?p_bounds" v="null">
				<t path="com.genome2d.geom.GRectangle"/>
				<t path="com.genome2d.geom.GRectangle"/>
			</f>
			<haxe_doc>Get local bounds</haxe_doc>
		</getBounds>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for rendering textured quads used as a super class for `GSprite` and `GMovieClip`</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GMovieClip" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GMovieClip.hx">
		<extends path="com.genome2d.components.renderable.GTexturedQuad"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_speed><x path="Float"/></g2d_speed>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<g2d_currentFrame><x path="Int"/></g2d_currentFrame>
		<g2d_lastUpdatedFrameId><x path="Int"/></g2d_lastUpdatedFrameId>
		<g2d_startIndex><x path="Int"/></g2d_startIndex>
		<g2d_endIndex><x path="Int"/></g2d_endIndex>
		<g2d_playing><x path="Bool"/></g2d_playing>
		<g2d_frameTextures><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></g2d_frameTextures>
		<g2d_frameTexturesCount><x path="Int"/></g2d_frameTexturesCount>
		<g2d_onPlaybackEnd><c path="msignal.Signal1"><c path="com.genome2d.components.renderable.GMovieClip"/></c></g2d_onPlaybackEnd>
		<onPlaybackEnd public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.components.renderable.GMovieClip"/></c></onPlaybackEnd>
		<get_onPlaybackEnd set="method" line="37"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.components.renderable.GMovieClip"/></c></f></get_onPlaybackEnd>
		<frameCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Get the current frame count</haxe_doc>
		</frameCount>
		<get_frameCount get="inline" set="null" line="48"><f a=""><x path="Int"/></f></get_frameCount>
		<currentFrame public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Get the current frame index the movieclip is at</haxe_doc>
		</currentFrame>
		<get_currentFrame get="inline" set="null" line="58"><f a=""><x path="Int"/></f></get_currentFrame>
		<frameTextureIds public="1" get="null" set="accessor">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Texture ids used for movieclip frames</haxe_doc>
		</frameTextureIds>
		<set_frameTextureIds get="inline" set="null" line="68"><f a="p_value">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
</f></set_frameTextureIds>
		<frameTextures public="1" get="null" set="accessor">
			<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
			<haxe_doc>Textures used for movieclip frames</haxe_doc>
		</frameTextures>
		<set_frameTextures get="inline" set="null" line="92"><f a="p_value">
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
</f></set_frameTextures>
		<repeatable public="1">
			<x path="Bool"/>
			<haxe_doc>Is movieclip repeating after reaching the last frame, default true</haxe_doc>
		</repeatable>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is playback reversed, default false</haxe_doc>
		</reversed>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Framerate the movieclips is playing at, default 30</haxe_doc>
		</frameRate>
		<get_frameRate get="inline" set="null" line="121"><f a=""><x path="Int"/></f></get_frameRate>
		<set_frameRate get="inline" set="null" line="125"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_frameRate>
		<numFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Number of frames in this movieclip</haxe_doc>
		</numFrames>
		<get_numFrames get="inline" set="null" line="136"><f a=""><x path="Int"/></f></get_numFrames>
		<gotoFrame public="1" set="method" line="143">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movie clip</haxe_doc>
		</gotoFrame>
		<gotoAndPlay public="1" set="method" line="153">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movieclip and start playing</haxe_doc>
		</gotoAndPlay>
		<gotoAndStop public="1" set="method" line="161">
			<f a="p_frame">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Go to a specified frame of this movieclip and stop playing</haxe_doc>
		</gotoAndStop>
		<stop public="1" set="method" line="169">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop playback of this movie clip</haxe_doc>
		</stop>
		<play public="1" set="method" line="176">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start the playback of this movie clip</haxe_doc>
		</play>
		<render public="1" set="method" line="181" override="1">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":doc"><e>hide</e></m></meta>
		</render>
		<dispose public="1" set="method" line="218" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for rendering animations defined by set of textures</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GShape" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GShape.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<blendMode public="1"><x path="Int"/></blendMode>
		<g2d_vertices><c path="Array"><x path="Float"/></c></g2d_vertices>
		<g2d_uvs><c path="Array"><x path="Float"/></c></g2d_uvs>
		<g2d_shapeRenderer><d/></g2d_shapeRenderer>
		<render public="1" set="method" line="32"><f a="p_camera:p_useMatrix">
	<c path="com.genome2d.context.GCamera"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></render>
		<setup public="1" set="method" line="42"><f a="p_vertices:p_uvs">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setup>
		<cache public="1" set="method" line="50"><f a=""><x path="Void"/></f></cache>
		<getBounds public="1" set="method" line="54"><f a="?p_target" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<processContextMouseSignal public="1" set="method" line="58"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processContextMouseSignal>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for shape rendering</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GTiledSprite" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GTiledSprite.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<blendMode public="1">
			<x path="Int"/>
			<haxe_doc>Blend mode used for rendering</haxe_doc>
		</blendMode>
		<mousePixelTreshold public="1">
			<x path="Int"/>
			<haxe_doc>Specify alpha treshold for pixel perfect mouse detection, works with mousePixelEnabled true</haxe_doc>
		</mousePixelTreshold>
		<texture public="1">
			<c path="com.genome2d.textures.GTexture"/>
			<haxe_doc>Texture used for rendering</haxe_doc>
		</texture>
		<filter public="1">
			<c path="com.genome2d.context.filters.GFilter"/>
			<haxe_doc>Filter used for rendering</haxe_doc>
		</filter>
		<ignoreMatrix public="1"><x path="Bool"/></ignoreMatrix>
		<g2d_width><x path="Float"/></g2d_width>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</width>
		<get_width get="inline" set="null" line="37"><f a=""><x path="Float"/></f></get_width>
		<set_width get="inline" set="null" line="41"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<g2d_height><x path="Float"/></g2d_height>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</height>
		<get_height get="inline" set="null" line="48"><f a=""><x path="Float"/></f></get_height>
		<set_height get="inline" set="null" line="52"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<render public="1" set="method" line="57">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</render>
		<processContextMouseSignal public="1" set="method" line="96">
			<f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</processContextMouseSignal>
		<getBounds public="1" set="method" line="139">
			<f a="?p_bounds" v="null">
				<t path="com.genome2d.geom.GRectangle"/>
				<t path="com.genome2d.geom.GRectangle"/>
			</f>
			<haxe_doc>Get local bounds</haxe_doc>
		</getBounds>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GSlice3Sprite" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GSlice3Sprite.hx">
		<extends path="com.genome2d.components.renderable.GTiledSprite"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<texture1 public="1"><c path="com.genome2d.textures.GTexture"/></texture1>
		<texture2 public="1"><c path="com.genome2d.textures.GTexture"/></texture2>
		<texture3 public="1"><c path="com.genome2d.textures.GTexture"/></texture3>
		<render public="1" set="method" line="16" override="1">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</render>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GSlice9Sprite" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GSlice9Sprite.hx">
		<extends path="com.genome2d.components.renderable.GTiledSprite"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<texture1 public="1"><c path="com.genome2d.textures.GTexture"/></texture1>
		<texture2 public="1"><c path="com.genome2d.textures.GTexture"/></texture2>
		<texture3 public="1"><c path="com.genome2d.textures.GTexture"/></texture3>
		<texture4 public="1"><c path="com.genome2d.textures.GTexture"/></texture4>
		<texture5 public="1"><c path="com.genome2d.textures.GTexture"/></texture5>
		<texture6 public="1"><c path="com.genome2d.textures.GTexture"/></texture6>
		<texture7 public="1"><c path="com.genome2d.textures.GTexture"/></texture7>
		<texture8 public="1"><c path="com.genome2d.textures.GTexture"/></texture8>
		<texture9 public="1"><c path="com.genome2d.textures.GTexture"/></texture9>
		<render public="1" set="method" line="22" override="1">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</render>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.GSprite" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/GSprite.hx">
		<extends path="com.genome2d.components.renderable.GTexturedQuad"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<textureId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
			<haxe_doc>Texture id used by this sprite</haxe_doc>
		</textureId>
		<get_textureId get="inline" set="null" line="26"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="30"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for rendering single textures</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.flash.GFlashObject" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/flash/GFlashObject.hx">
		<extends path="com.genome2d.components.renderable.GTexturedQuad"/>
		<defaultUpdateFrameRate public="1" line="17" static="1"><x path="Int"/></defaultUpdateFrameRate>
		<g2d_count line="93" static="1"><x path="Int"/></g2d_count>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<nativeObject public="1"><c path="flash.display.DisplayObject"/></nativeObject>
		<g2d_forceMod2><x path="Bool"/></g2d_forceMod2>
		<forceMod2 public="1" get="accessor" set="accessor"><x path="Bool"/></forceMod2>
		<get_forceMod2 get="inline" set="null" line="25"><f a=""><x path="Bool"/></f></get_forceMod2>
		<set_forceMod2 get="inline" set="null" line="29"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_forceMod2>
		<g2d_vAlign><x path="Int"/></g2d_vAlign>
		<vAlign public="1" get="accessor" set="accessor"><x path="Int"/></vAlign>
		<get_vAlign get="inline" set="null" line="39"><f a=""><x path="Int"/></f></get_vAlign>
		<set_vAlign get="inline" set="null" line="43"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_vAlign>
		<g2d_hAlign><x path="Int"/></g2d_hAlign>
		<hAlign public="1" get="accessor" set="accessor"><x path="Int"/></hAlign>
		<get_hAlign get="inline" set="null" line="53"><f a=""><x path="Int"/></f></get_hAlign>
		<set_hAlign get="inline" set="null" line="57"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_hAlign>
		<g2d_nativeMatrix><t path="com.genome2d.geom.GMatrix"/></g2d_nativeMatrix>
		<g2d_textureId><c path="String"/></g2d_textureId>
		<g2d_invalidate><x path="Bool"/></g2d_invalidate>
		<invalidate public="1" set="method" line="68"><f a="?p_force" v="false">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<g2d_lastNativeWidth><x path="Int"/></g2d_lastNativeWidth>
		<g2d_lastNativeHeight><x path="Int"/></g2d_lastNativeHeight>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<updateFrameRate public="1"><x path="Int"/></updateFrameRate>
		<g2d_transparent><x path="Bool"/></g2d_transparent>
		<transparent public="1" get="accessor" set="accessor"><x path="Bool"/></transparent>
		<get_transparent public="1" set="method" line="83"><f a=""><x path="Bool"/></f></get_transparent>
		<set_transparent public="1" set="method" line="87"><f a="p_transparent">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_transparent>
		<init public="1" set="method" line="95" override="1"><f a=""><x path="Void"/></f></init>
		<g2d_updateHandler set="method" line="103"><f a="p_deltaTime">
	<x path="Float"/>
	<x path="Void"/>
</f></g2d_updateHandler>
		<invalidateTexture public="1" set="method" line="124"><f a="p_force">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidateTexture>
		<g2d_invalidateAlign set="method" line="151"><f a=""><x path="Void"/></f></g2d_invalidateAlign>
		<dispose public="1" set="method" line="170" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.flash.GFlashText" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/flash/GFlashText.hx">
		<extends path="com.genome2d.components.renderable.flash.GFlashObject"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_textFormat><c path="flash.text.TextFormat"/></g2d_textFormat>
		<g2d_textField><c path="flash.text.TextField"/></g2d_textField>
		<textField public="1" get="accessor" set="null"><c path="flash.text.TextField"/></textField>
		<get_textField public="1" set="method" line="13"><f a=""><c path="flash.text.TextField"/></f></get_textField>
		<init public="1" set="method" line="17" override="1"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.flash.GFlashVideo" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/flash/GFlashVideo.hx">
		<extends path="com.genome2d.components.renderable.flash.GFlashObject"/>
		<g2d_count line="27" static="1"><x path="Int"/></g2d_count>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_connection><c path="flash.net.NetConnection"/></g2d_connection>
		<g2d_stream><c path="flash.net.NetStream"/></g2d_stream>
		<getNetStream public="1" set="method" line="16"><f a=""><c path="flash.net.NetStream"/></f></getNetStream>
		<g2d_nativeVideo><c path="flash.media.Video"/></g2d_nativeVideo>
		<getNativeVideo public="1" set="method" line="21"><f a=""><c path="flash.media.Video"/></f></getNativeVideo>
		<g2d_playing><x path="Bool"/></g2d_playing>
		<init public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></init>
		<onMetaData public="1" set="method" line="47"><f a="p_data">
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></onMetaData>
		<onPlayStatus public="1" set="method" line="54"><f a="p_data">
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></onPlayStatus>
		<playVideo public="1" set="method" line="58"><f a="p_url">
	<c path="String"/>
	<x path="Void"/>
</f></playVideo>
		<onIOError set="method" line="62"><f a="event">
	<c path="flash.events.IOErrorEvent"/>
	<x path="Void"/>
</f></onIOError>
		<onNetStatus set="method" line="65"><f a="event">
	<c path="flash.events.NetStatusEvent"/>
	<x path="Void"/>
</f></onNetStatus>
		<dispose public="1" set="method" line="72" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.particles.GParticleSystem" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/particles/GParticleSystem.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<blendMode public="1"><x path="Int"/></blendMode>
		<emit public="1"><x path="Bool"/></emit>
		<g2d_initializers><c path="Array"><c path="com.genome2d.particles.IGInitializer"/></c></g2d_initializers>
		<g2d_initializersCount><x path="Int"/></g2d_initializersCount>
		<addInitializer public="1" set="method" line="36"><f a="p_initializer">
	<c path="com.genome2d.particles.IGInitializer"/>
	<x path="Void"/>
</f></addInitializer>
		<g2d_affectors><c path="Array"><c path="com.genome2d.particles.IGAffector"/></c></g2d_affectors>
		<g2d_affectorsCount><x path="Int"/></g2d_affectorsCount>
		<addAffector public="1" set="method" line="43"><f a="p_affector">
	<c path="com.genome2d.particles.IGAffector"/>
	<x path="Void"/>
</f></addAffector>
		<duration public="1">
			<x path="Float"/>
			<haxe_doc>*  Duration of the particles system in seconds</haxe_doc>
		</duration>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>*  Loop particles emission</haxe_doc>
		</loop>
		<emission public="1"><c path="com.genome2d.geom.GCurve"/></emission>
		<emissionPerDuration public="1"><x path="Bool"/></emissionPerDuration>
		<particlePool public="1"><c path="com.genome2d.particles.GParticlePool"/></particlePool>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<g2d_accumulatedSecond><x path="Float"/></g2d_accumulatedSecond>
		<g2d_accumulatedEmission><x path="Float"/></g2d_accumulatedEmission>
		<g2d_firstParticle><c path="com.genome2d.particles.GParticle"/></g2d_firstParticle>
		<g2d_lastParticle><c path="com.genome2d.particles.GParticle"/></g2d_lastParticle>
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<textureId public="1" get="accessor" set="accessor"><c path="String"/></textureId>
		<get_textureId get="inline" set="null" line="74"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="78"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<init public="1" set="method" line="83" override="1"><f a=""><x path="Void"/></f></init>
		<reset public="1" set="method" line="92"><f a=""><x path="Void"/></f></reset>
		<burst public="1" set="method" line="98"><f a="p_emission">
	<x path="Int"/>
	<x path="Void"/>
</f></burst>
		<update public="1" set="method" line="104"><f a="p_deltaTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<render public="1" set="method" line="137"><f a="p_camera:p_useMatrix">
	<c path="com.genome2d.context.GCamera"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></render>
		<activateParticle set="method" line="174"><f a=""><x path="Void"/></f></activateParticle>
		<deactivateParticle public="1" set="method" line="192"><f a="p_particle">
	<c path="com.genome2d.particles.GParticle"/>
	<x path="Void"/>
</f></deactivateParticle>
		<getBounds public="1" set="method" line="198"><f a="?p_target" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<dispose public="1" set="method" line="202" override="1"><f a=""><x path="Void"/></f></dispose>
		<processContextMouseSignal public="1" set="method" line="209"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processContextMouseSignal>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component handling advanced particles systems with unlimited extendibility using custom particles instances and user defined affectors and initializers</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.particles.GSimpleParticleSystem" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/particles/GSimpleParticleSystem.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<blendMode public="1"><x path="Int"/></blendMode>
		<emit public="1"><x path="Bool"/></emit>
		<useWorldSpace public="1"><x path="Bool"/></useWorldSpace>
		<initialScale public="1"><x path="Float"/></initialScale>
		<initialScaleVariance public="1"><x path="Float"/></initialScaleVariance>
		<endScale public="1"><x path="Float"/></endScale>
		<endScaleVariance public="1"><x path="Float"/></endScaleVariance>
		<energy public="1"><x path="Float"/></energy>
		<energyVariance public="1"><x path="Float"/></energyVariance>
		<emission public="1"><x path="Int"/></emission>
		<emissionVariance public="1"><x path="Int"/></emissionVariance>
		<emissionTime public="1"><x path="Float"/></emissionTime>
		<emissionDelay public="1"><x path="Float"/></emissionDelay>
		<initialVelocity public="1"><x path="Float"/></initialVelocity>
		<initialVelocityVariance public="1"><x path="Float"/></initialVelocityVariance>
		<initialAcceleration public="1"><x path="Float"/></initialAcceleration>
		<initialAccelerationVariance public="1"><x path="Float"/></initialAccelerationVariance>
		<initialAngularVelocity public="1"><x path="Float"/></initialAngularVelocity>
		<initialAngularVelocityVariance public="1"><x path="Float"/></initialAngularVelocityVariance>
		<initialRed public="1"><x path="Float"/></initialRed>
		<initialRedVariance public="1"><x path="Float"/></initialRedVariance>
		<initialGreen public="1"><x path="Float"/></initialGreen>
		<initialGreenVariance public="1"><x path="Float"/></initialGreenVariance>
		<initialBlue public="1"><x path="Float"/></initialBlue>
		<initialBlueVariance public="1"><x path="Float"/></initialBlueVariance>
		<initialAlpha public="1"><x path="Float"/></initialAlpha>
		<initialAlphaVariance public="1"><x path="Float"/></initialAlphaVariance>
		<initialColor public="1" get="accessor" set="accessor"><x path="Int"/></initialColor>
		<get_initialColor get="inline" set="null" line="66"><f a=""><x path="Int"/></f></get_initialColor>
		<set_initialColor get="inline" set="null" line="73"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_initialColor>
		<endRed public="1"><x path="Float"/></endRed>
		<endRedVariance public="1"><x path="Float"/></endRedVariance>
		<endGreen public="1"><x path="Float"/></endGreen>
		<endGreenVariance public="1"><x path="Float"/></endGreenVariance>
		<endBlue public="1"><x path="Float"/></endBlue>
		<endBlueVariance public="1"><x path="Float"/></endBlueVariance>
		<endAlpha public="1"><x path="Float"/></endAlpha>
		<endAlphaVariance public="1"><x path="Float"/></endAlphaVariance>
		<endColor public="1" get="accessor" set="accessor"><x path="Int"/></endColor>
		<get_endColor get="inline" set="null" line="92"><f a=""><x path="Int"/></f></get_endColor>
		<set_endColor get="inline" set="null" line="99"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_endColor>
		<dispersionXVariance public="1"><x path="Float"/></dispersionXVariance>
		<dispersionYVariance public="1"><x path="Float"/></dispersionYVariance>
		<dispersionAngle public="1"><x path="Float"/></dispersionAngle>
		<dispersionAngleVariance public="1"><x path="Float"/></dispersionAngleVariance>
		<initialAngle public="1"><x path="Float"/></initialAngle>
		<initialAngleVariance public="1"><x path="Float"/></initialAngleVariance>
		<burst public="1"><x path="Bool"/></burst>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<g2d_accumulatedEmission><x path="Float"/></g2d_accumulatedEmission>
		<g2d_firstParticle><c path="com.genome2d.particles.GSimpleParticle"/></g2d_firstParticle>
		<g2d_lastParticle><c path="com.genome2d.particles.GSimpleParticle"/></g2d_lastParticle>
		<g2d_activeParticles><x path="Int"/></g2d_activeParticles>
		<g2d_lastUpdateTime><x path="Float"/></g2d_lastUpdateTime>
		<settings public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</settings>
		<get_settings get="inline" set="null" line="129"><f a=""><c path="String"/></f></get_settings>
		<set_settings get="inline" set="null" line="136"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_settings>
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<textureId public="1" get="accessor" set="accessor"><c path="String"/></textureId>
		<get_textureId get="inline" set="null" line="196"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="200"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<setInitialParticlePosition set="method" line="206"><f a="p_particle">
	<c path="com.genome2d.particles.GSimpleParticle"/>
	<x path="Void"/>
</f></setInitialParticlePosition>
		<init public="1" set="method" line="221" override="1"><f a=""><x path="Void"/></f></init>
		<setup public="1" set="method" line="225"><f a="?p_maxCount:?p_precacheCount:?p_disposeImmediately" v="0:0:true">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setup>
		<g2d_createParticle set="method" line="230"><f a=""><c path="com.genome2d.particles.GSimpleParticle"/></f></g2d_createParticle>
		<forceBurst public="1" set="method" line="244"><f a=""><x path="Void"/></f></forceBurst>
		<update public="1" set="method" line="253"><f a="p_deltaTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<render public="1" set="method" line="285"><f a="p_camera:p_useMatrix">
	<c path="com.genome2d.context.GCamera"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></render>
		<g2d_activateParticle set="method" line="310"><f a=""><x path="Void"/></f></g2d_activateParticle>
		<deactivateParticle public="1" set="method" line="317"><f a="p_particle">
	<c path="com.genome2d.particles.GSimpleParticle"/>
	<x path="Void"/>
</f></deactivateParticle>
		<dispose public="1" set="method" line="323" override="1"><f a=""><x path="Void"/></f></dispose>
		<clear public="1" set="method" line="330"><f a="?p_disposeCachedParticles" v="false">
	<x path="Bool"/>
	<x path="Void"/>
</f></clear>
		<getBounds public="1" set="method" line="334"><f a="?p_target" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<processContextMouseSignal public="1" set="method" line="339"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processContextMouseSignal>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component handling simple particles systems used for best performance</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.text.GText" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/text/GText.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<renderer public="1"><c path="com.genome2d.text.GTextRenderer"/></renderer>
		<tracking public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</tracking>
		<get_tracking get="inline" set="null" line="32"><f a=""><x path="Float"/></f></get_tracking>
		<set_tracking get="inline" set="null" line="36"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tracking>
		<lineSpace public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</lineSpace>
		<get_lineSpace get="inline" set="null" line="48"><f a=""><x path="Float"/></f></get_lineSpace>
		<set_lineSpace get="inline" set="null" line="52"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_lineSpace>
		<vAlign public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</vAlign>
		<get_vAlign get="inline" set="null" line="60"><f a=""><x path="Int"/></f></get_vAlign>
		<set_vAlign get="inline" set="null" line="64"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_vAlign>
		<hAlign public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</hAlign>
		<get_hAlign get="inline" set="null" line="72"><f a=""><x path="Int"/></f></get_hAlign>
		<set_hAlign get="inline" set="null" line="76"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_hAlign>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</text>
		<get_text get="inline" set="null" line="87"><f a=""><c path="String"/></f></get_text>
		<set_text get="inline" set="null" line="91"><f a="p_text">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<autoSize public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</autoSize>
		<get_autoSize get="inline" set="null" line="102"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize get="inline" set="null" line="106"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</width>
		<get_width get="inline" set="null" line="117"><f a=""><x path="Float"/></f></get_width>
		<set_width get="inline" set="null" line="123"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</height>
		<get_height get="inline" set="null" line="134"><f a=""><x path="Float"/></f></get_height>
		<set_height get="inline" set="null" line="140"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<render public="1" set="method" line="146">
			<f a="p_camera:p_useMatrix">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</render>
		<processContextMouseSignal public="1" set="method" line="153">
			<f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</processContextMouseSignal>
		<getBounds public="1" set="method" line="196"><f a="?p_bounds" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Component used for rendering textures based text</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.tilemap.GTileMap" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<blendMode public="1"><x path="Int"/></blendMode>
		<g2d_width><x path="Int"/></g2d_width>
		<g2d_height><x path="Int"/></g2d_height>
		<g2d_tiles><c path="Array"><c path="com.genome2d.tilemap.GTile"/></c></g2d_tiles>
		<getTiles public="1" set="method" line="20"><f a=""><c path="Array"><c path="com.genome2d.tilemap.GTile"/></c></f></getTiles>
		<mustRenderTiles><c path="Array"><c path="com.genome2d.tilemap.GTile"/></c></mustRenderTiles>
		<g2d_tileWidth><x path="Int"/></g2d_tileWidth>
		<g2d_tileHeight><x path="Int"/></g2d_tileHeight>
		<g2d_iso><x path="Bool"/></g2d_iso>
		<horizontalMargin public="1"><x path="Float"/></horizontalMargin>
		<verticalMargin public="1"><x path="Float"/></verticalMargin>
		<setTiles public="1" set="method" line="33"><f a="p_mapWidth:p_mapHeight:p_tileWidth:p_tileHeight:?p_tiles:?p_iso" v="::::null:false">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="com.genome2d.tilemap.GTile"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></setTiles>
		<setTile public="1" set="method" line="49"><f a="p_tileIndex:p_tile">
	<x path="Int"/>
	<c path="com.genome2d.tilemap.GTile"/>
	<x path="Void"/>
</f></setTile>
		<removeTile public="1" set="method" line="65"><f a="p_tileIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></removeTile>
		<render public="1" set="method" line="81"><f a="p_camera:p_useMatrix">
	<c path="com.genome2d.context.GCamera"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></render>
		<getTileAt public="1" set="method" line="138"><f a="p_x:p_y:?p_camera" v="::null">
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.tilemap.GTile"/>
</f></getTileAt>
		<processContextMouseSignal public="1" set="method" line="165"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processContextMouseSignal>
		<getBounds public="1" set="method" line="207"><f a="?p_bounds" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.components.renderable.ui.GUI" params="" file="Genome2D-Core/src/com/genome2d/components/renderable/ui/GUI.hx">
		<extends path="com.genome2d.components.GComponent"/>
		<implements path="com.genome2d.components.renderable.IRenderable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<root public="1"><c path="com.genome2d.ui.element.GUIElement"/></root>
		<init public="1" set="method" line="16" override="1"><f a=""><x path="Void"/></f></init>
		<invalidate public="1" set="method" line="28"><f a=""><x path="Void"/></f></invalidate>
		<render public="1" set="method" line="35"><f a="p_camera:p_useMatrix">
	<c path="com.genome2d.context.GCamera"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></render>
		<getBounds public="1" set="method" line="42"><f a="?p_target" v="null">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<processContextMouseSignal public="1" set="method" line="46"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processContextMouseSignal>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
		</meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="com.genome2d.context.GBlendMode" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/GBlendMode.hx">
		<blendFactors line="16" static="1"><c path="Array"><c path="Array"><c path="Array"><e path="flash.display3D.Context3DBlendFactor"/></c></c></c></blendFactors>
		<NONE public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></NONE>
		<NORMAL public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></NORMAL>
		<ADD public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></ADD>
		<MULTIPLY public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></MULTIPLY>
		<SCREEN public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></SCREEN>
		<ERASE public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></ERASE>
		<addBlendMode public="1" set="method" line="42" static="1"><f a="p_normalFactors:p_premultipliedFactors">
	<c path="Array"><e path="flash.display3D.Context3DBlendFactor"/></c>
	<c path="Array"><e path="flash.display3D.Context3DBlendFactor"/></c>
	<x path="Int"/>
</f></addBlendMode>
		<setBlendMode public="1" set="method" line="49" static="1"><f a="p_context:p_mode:p_premultiplied">
	<c path="flash.display3D.Context3D"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBlendMode>
	</class>
	<class path="com.genome2d.context.GCamera" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/GCamera.hx">
		<rotation public="1"><x path="Float"/></rotation>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<mask public="1">
			<x path="Int"/>
			<haxe_doc>* 	Camera mask used against node camera group a node is rendered through this camera if camera.mask and nodecameraGroup != 0</haxe_doc>
		</mask>
		<normalizedViewX public="1">
			<x path="Float"/>
			<haxe_doc>* 	Viewport x offset, this value should be always within 0 and 1 its based on context main viewport</haxe_doc>
		</normalizedViewX>
		<normalizedViewY public="1">
			<x path="Float"/>
			<haxe_doc>* 	Viewport y offset, this value should be always within 0 and 1 it based on context main viewport</haxe_doc>
		</normalizedViewY>
		<normalizedViewWidth public="1">
			<x path="Float"/>
			<haxe_doc>* 	Viewport width, this value should be always within 0 and 1 its based on context main viewport</haxe_doc>
		</normalizedViewWidth>
		<normalizedViewHeight public="1">
			<x path="Float"/>
			<haxe_doc>* 	Viewport height, this value should be always within 0 and 1 its  based on context main viewport</haxe_doc>
		</normalizedViewHeight>
		<matrix public="1"><c path="com.genome2d.context.stage3d.GProjectionMatrix"/></matrix>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.context.GContextConfig" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/GContextConfig.hx">
		<useSeparateAlphaPipeline public="1"><x path="Bool"/></useSeparateAlphaPipeline>
		<useFastMem public="1"><x path="Bool"/></useFastMem>
		<enableDepthAndStencil public="1"><x path="Bool"/></enableDepthAndStencil>
		<antiAliasing public="1"><x path="Int"/></antiAliasing>
		<renderMode public="1"><c path="String"/></renderMode>
		<profile public="1"><t path="flash.utils.Object"/></profile>
		<viewRect public="1"><t path="com.genome2d.geom.GRectangle"/></viewRect>
		<nativeStage public="1"><c path="flash.display.Stage"/></nativeStage>
		<contextClass public="1"><x path="Class"><t path="com.genome2d.context.IContext"/></x></contextClass>
		<statsClass public="1"><x path="Class"><c path="com.genome2d.context.stats.IStats"/></x></statsClass>
		<fallbackContextClass public="1"><x path="Class"><t path="com.genome2d.context.IContext"/></x></fallbackContextClass>
		<externalStage3D public="1"><c path="flash.display.Stage3D"/></externalStage3D>
		<new public="1" set="method" line="41"><f a="?p_stage:?p_viewRect" v="null:null">
	<c path="flash.display.Stage"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.GContextFeature" params="" file="Genome2D-ContextCommon/src/com/genome2d/context/GContextFeature.hx">
		<STENCIL_MASKING public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></STENCIL_MASKING>
		<RECTANGLE_TEXTURES public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></RECTANGLE_TEXTURES>
		<haxe_doc>Context features</haxe_doc>
	</class>
	<class path="com.genome2d.context.GViewport" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/GViewport.hx">
		<g2d_vAlign><x path="Int"/></g2d_vAlign>
		<vAlign public="1" get="accessor" set="accessor"><x path="Int"/></vAlign>
		<get_vAlign get="inline" set="null" line="14"><f a=""><x path="Int"/></f></get_vAlign>
		<set_vAlign get="inline" set="null" line="18"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_vAlign>
		<g2d_hAlign><x path="Int"/></g2d_hAlign>
		<hAlign public="1" get="accessor" set="accessor"><x path="Int"/></hAlign>
		<get_hAlign get="inline" set="null" line="26"><f a=""><x path="Int"/></f></get_hAlign>
		<set_hAlign get="inline" set="null" line="30"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_hAlign>
		<viewLeft public="1"><x path="Float"/></viewLeft>
		<viewTop public="1"><x path="Float"/></viewTop>
		<viewRight public="1"><x path="Float"/></viewRight>
		<viewBottom public="1"><x path="Float"/></viewBottom>
		<screenLeft public="1"><x path="Float"/></screenLeft>
		<screenTop public="1"><x path="Float"/></screenTop>
		<screenRight public="1"><x path="Float"/></screenRight>
		<screenBottom public="1"><x path="Float"/></screenBottom>
		<zoom public="1"><x path="Float"/></zoom>
		<aspectRatio public="1"><x path="Float"/></aspectRatio>
		<g2d_cameraController><c path="com.genome2d.components.GCameraController"/></g2d_cameraController>
		<g2d_previousZoom><x path="Int"/></g2d_previousZoom>
		<resizeHandler set="method" line="67"><f a="p_width:p_height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></resizeHandler>
		<new public="1" set="method" line="49"><f a="p_cameraController:p_viewWidth:p_viewHeight:?p_autoResize" v=":::true">
	<c path="com.genome2d.components.GCameraController"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="com.genome2d.context.IContext" params="" file="Genome2D-ContextCommon/src/com/genome2d/context/IContext.hx"><c path="com.genome2d.context.stage3d.GStage3DContext"/></typedef>
	<class path="com.genome2d.context.filters.GFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GFilter.hx">
		<g2d_count line="26" static="1"><x path="Int"/></g2d_count>
		<shaderVersionRequired public="1"><x path="Int"/></shaderVersionRequired>
		<id public="1"><c path="String"/></id>
		<overrideFragmentShader public="1"><x path="Bool"/></overrideFragmentShader>
		<fragmentCode public="1"><c path="String"/></fragmentCode>
		<fragmentConstants public="1"><c path="flash.Vector"><x path="Float"/></c></fragmentConstants>
		<bind public="1" set="method" line="38">
			<f a="p_context:p_defaultTexture">
				<t path="com.genome2d.context.IContext"/>
				<c path="com.genome2d.textures.GContextTexture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when filter is being bound to the render pipeline</haxe_doc>
		</bind>
		<clear public="1" set="method" line="45">
			<f a="p_context">
				<t path="com.genome2d.context.IContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when filter is finished rendering</haxe_doc>
		</clear>
		<new set="method" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</new>
		<haxe_doc>Filter superclass all fitlers need to extend this class</haxe_doc>
	</class>
	<class path="com.genome2d.context.filters.GBloomPassFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GBloomPassFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<texture public="1"><c path="com.genome2d.textures.GContextTexture"/></texture>
		<bind public="1" set="method" line="47" override="1"><f a="p_context:p_texture">
	<t path="com.genome2d.context.IContext"/>
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></bind>
		<clear public="1" set="method" line="53" override="1"><f a="p_context">
	<t path="com.genome2d.context.IContext"/>
	<x path="Void"/>
</f></clear>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.context.filters.GBlurPassFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GBlurPassFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<VERTICAL public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></VERTICAL>
		<HORIZONTAL public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></HORIZONTAL>
		<blur public="1"><x path="Float"/></blur>
		<direction public="1"><x path="Int"/></direction>
		<colorize public="1"><x path="Bool"/></colorize>
		<red public="1"><x path="Float"/></red>
		<green public="1"><x path="Float"/></green>
		<blue public="1"><x path="Float"/></blue>
		<alpha public="1"><x path="Float"/></alpha>
		<bind public="1" set="method" line="71" override="1"><f a="p_context:p_texture">
	<t path="com.genome2d.context.IContext"/>
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></bind>
		<new public="1" set="method" line="29"><f a="p_blur:p_direction">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.filters.GBrightPassFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GBrightPassFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<g2d_treshold><x path="Float"/></g2d_treshold>
		<treshold public="1" get="accessor" set="accessor"><x path="Float"/></treshold>
		<get_treshold public="1" set="method" line="20"><f a=""><x path="Float"/></f></get_treshold>
		<set_treshold public="1" set="method" line="23"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_treshold>
		<new public="1" set="method" line="30"><f a="p_treshold">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.filters.GColorMatrixFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GColorMatrixFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<g2d_identityMatrix><c path="flash.Vector"><x path="Float"/></c></g2d_identityMatrix>
		<setMatrix public="1" set="method" line="17"><f a="p_matrix">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></setMatrix>
		<new public="1" set="method" line="45"><f a="?p_matrix" v="null">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.filters.GDesaturateFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GDesaturateFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.context.filters.GHDRPassFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GHDRPassFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<texture public="1"><c path="com.genome2d.textures.GContextTexture"/></texture>
		<g2d_saturation><x path="Float"/></g2d_saturation>
		<saturation public="1" get="accessor" set="accessor"><x path="Float"/></saturation>
		<get_saturation public="1" set="method" line="25"><f a=""><x path="Float"/></f></get_saturation>
		<set_saturation public="1" set="method" line="28"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_saturation>
		<bind public="1" set="method" line="59" override="1"><f a="p_context:p_texture">
	<t path="com.genome2d.context.IContext"/>
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></bind>
		<clear public="1" set="method" line="65" override="1"><f a="p_context">
	<t path="com.genome2d.context.IContext"/>
	<x path="Void"/>
</f></clear>
		<new public="1" set="method" line="34"><f a="?p_saturation" v="1.3f">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.filters.GPixelateFilter" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/filters/GPixelateFilter.hx">
		<extends path="com.genome2d.context.filters.GFilter"/>
		<pixelSize public="1"><x path="Int"/></pixelSize>
		<bind public="1" set="method" line="36" override="1"><f a="p_context:p_texture">
	<t path="com.genome2d.context.IContext"/>
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></bind>
		<new public="1" set="method" line="18"><f a="p_pixelSize">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.GProjectionMatrix" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/GProjectionMatrix.hx">
		<extends path="flash.geom.Matrix3D"/>
		<NEAR line="16" static="1"><x path="Int"/></NEAR>
		<FAR line="17" static="1"><x path="Int"/></FAR>
		<g2d_instance static="1"><c path="com.genome2d.context.stage3d.GProjectionMatrix"/></g2d_instance>
		<getOrtho public="1" set="method" line="31" static="1"><f a="p_width:p_height:?p_transform" v="::null">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="com.genome2d.context.stage3d.GProjectionMatrix"/>
</f></getOrtho>
		<g2d_vector><c path="flash.Vector"><x path="Float"/></c></g2d_vector>
		<ortho public="1" set="method" line="36"><f a="p_width:p_height:?p_transform" v="::null">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="com.genome2d.context.stage3d.GProjectionMatrix"/>
</f></ortho>
		<perspective public="1" set="method" line="46"><f a="p_width:p_height:zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.context.stage3d.GProjectionMatrix"/>
</f></perspective>
		<new public="1" set="method" line="22"><f a="?v" v="null">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.context.stage3d.GStage3DContext" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/GStage3DContext.hx">
		<hasFeature public="1" set="method" line="66"><f a="p_feature">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasFeature>
		<NORMALIZED_VECTOR><c path="flash.geom.Vector3D"/></NORMALIZED_VECTOR>
		<g2d_nativeStage><c path="flash.display.Stage"/></g2d_nativeStage>
		<getNativeStage public="1" set="method" line="80"><f a=""><c path="flash.display.Stage"/></f></getNativeStage>
		<g2d_activeCamera><c path="com.genome2d.context.GCamera"/></g2d_activeCamera>
		<getActiveCamera public="1" set="method" line="85"><f a=""><c path="com.genome2d.context.GCamera"/></f></getActiveCamera>
		<g2d_activeViewRect><t path="com.genome2d.geom.GRectangle"/></g2d_activeViewRect>
		<g2d_activeMaskRect><t path="com.genome2d.geom.GRectangle"/></g2d_activeMaskRect>
		<g2d_initialized><x path="Bool"/></g2d_initialized>
		<g2d_reinitialize><x path="Bool"/></g2d_reinitialize>
		<g2d_stageViewRect><t path="com.genome2d.geom.GRectangle"/></g2d_stageViewRect>
		<getStageViewRect public="1" get="inline" set="null" line="96"><f a=""><t path="com.genome2d.geom.GRectangle"/></f></getStageViewRect>
		<g2d_defaultCamera><c path="com.genome2d.context.GCamera"/></g2d_defaultCamera>
		<getDefaultCamera public="1" get="inline" set="null" line="100"><f a=""><c path="com.genome2d.context.GCamera"/></f></getDefaultCamera>
		<g2d_stats><c path="com.genome2d.context.stats.IStats"/></g2d_stats>
		<g2d_currentTime><x path="Float"/></g2d_currentTime>
		<g2d_currentDeltaTime><x path="Float"/></g2d_currentDeltaTime>
		<g2d_onInitialized><c path="msignal.Signal0"/></g2d_onInitialized>
		<onInitialized public="1" get="accessor" set="null"><c path="msignal.Signal0"/></onInitialized>
		<get_onInitialized get="inline" set="null" line="116"><f a=""><c path="msignal.Signal0"/></f></get_onInitialized>
		<g2d_onFailed><c path="msignal.Signal1"><c path="String"/></c></g2d_onFailed>
		<onFailed public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="String"/></c></onFailed>
		<get_onFailed get="inline" set="null" line="124"><f a=""><c path="msignal.Signal1"><c path="String"/></c></f></get_onFailed>
		<g2d_onFrame><c path="msignal.Signal1"><x path="Float"/></c></g2d_onFrame>
		<onFrame public="1" get="accessor" set="null"><c path="msignal.Signal1"><x path="Float"/></c></onFrame>
		<get_onFrame get="inline" set="null" line="132"><f a=""><c path="msignal.Signal1"><x path="Float"/></c></f></get_onFrame>
		<g2d_onKeyboardSignal><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c></g2d_onKeyboardSignal>
		<onKeyboardSignal public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c></onKeyboardSignal>
		<get_onKeyboardSignal get="inline" set="null" line="140"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GKeyboardSignal"/></c></f></get_onKeyboardSignal>
		<g2d_onResize><c path="msignal.Signal2">
	<x path="Int"/>
	<x path="Int"/>
</c></g2d_onResize>
		<onResize public="1" get="accessor" set="null"><c path="msignal.Signal2">
	<x path="Int"/>
	<x path="Int"/>
</c></onResize>
		<get_onResize get="inline" set="null" line="148"><f a=""><c path="msignal.Signal2">
	<x path="Int"/>
	<x path="Int"/>
</c></f></get_onResize>
		<g2d_onMouseSignal><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GMouseSignal"/></c></g2d_onMouseSignal>
		<onMouseSignal public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GMouseSignal"/></c></onMouseSignal>
		<get_onMouseSignal get="inline" set="null" line="156"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GMouseSignal"/></c></f></get_onMouseSignal>
		<g2d_onInvalidated><c path="msignal.Signal0"/></g2d_onInvalidated>
		<onInvalidated public="1" get="accessor" set="null"><c path="msignal.Signal0"/></onInvalidated>
		<get_onInvalidated get="inline" set="null" line="164"><f a=""><c path="msignal.Signal0"/></f></get_onInvalidated>
		<g2d_nativeStage3D><c path="flash.display.Stage3D"/></g2d_nativeStage3D>
		<g2d_nativeContext><c path="flash.display3D.Context3D"/></g2d_nativeContext>
		<getNativeContext public="1" get="inline" set="null" line="171"><f a=""><c path="flash.display3D.Context3D"/></f></getNativeContext>
		<g2d_activeRenderer><c path="com.genome2d.context.stage3d.renderers.IGRenderer"/></g2d_activeRenderer>
		<g2d_activeBlendMode><x path="Int"/></g2d_activeBlendMode>
		<g2d_activePremultiply><x path="Bool"/></g2d_activePremultiply>
		<g2d_antiAliasing><x path="Int"/></g2d_antiAliasing>
		<g2d_enableDepthAndStencil><x path="Bool"/></g2d_enableDepthAndStencil>
		<g2d_renderMode><c path="String"/></g2d_renderMode>
		<g2d_profile><t path="flash.utils.Object"/></g2d_profile>
		<g2d_usingExternalContext><x path="Bool"/></g2d_usingExternalContext>
		<g2d_backgroundRed><x path="Float"/></g2d_backgroundRed>
		<g2d_backgroundGreen><x path="Float"/></g2d_backgroundGreen>
		<g2d_backgroundBlue><x path="Float"/></g2d_backgroundBlue>
		<g2d_backgroundAlpha><x path="Float"/></g2d_backgroundAlpha>
		<setBackgroundColor public="1" set="method" line="189"><f a="p_color:?p_alpha" v=":1">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setBackgroundColor>
		<enableNativeContentMouseCapture public="1"><x path="Bool"/></enableNativeContentMouseCapture>
		<g2d_useSeparateAlphaPipeline public="1"><x path="Bool"/></g2d_useSeparateAlphaPipeline>
		<g2d_useFastMem public="1"><x path="Bool"/></g2d_useFastMem>
		<g2d_fastMemArray><c path="flash.utils.ByteArray"/></g2d_fastMemArray>
		<g2d_quadTextureShaderRenderer><c path="com.genome2d.context.stage3d.renderers.GQuadTextureShaderRenderer"/></g2d_quadTextureShaderRenderer>
		<g2d_quadTextureBufferGPURenderer><c path="com.genome2d.context.stage3d.renderers.GQuadTextureBufferGPURenderer"/></g2d_quadTextureBufferGPURenderer>
		<g2d_matrixQuadTextureShaderRenderer><c path="com.genome2d.context.stage3d.renderers.GMatrixQuadTextureShaderRenderer"/></g2d_matrixQuadTextureShaderRenderer>
		<g2d_triangleTextureBufferCPURenderer><c path="com.genome2d.context.stage3d.renderers.GTriangleTextureBufferCPURenderer"/></g2d_triangleTextureBufferCPURenderer>
		<init public="1" set="method" line="243">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* 	Initialize the context</haxe_doc>
		</init>
		<g2d_contextInitializedHandler set="method" line="262"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_contextInitializedHandler>
		<g2d_invalidate set="method" line="292"><f a=""><x path="Void"/></f></g2d_invalidate>
		<g2d_initComplete set="method" line="328"><f a=""><x path="Void"/></f></g2d_initComplete>
		<dispose public="1" set="method" line="350"><f a=""><x path="Void"/></f></dispose>
		<resize public="1" set="method" line="365"><f a="p_rect">
	<t path="com.genome2d.geom.GRectangle"/>
	<x path="Void"/>
</f></resize>
		<g2d_contextErrorHandler set="method" line="371"><f a="event">
	<c path="flash.events.ErrorEvent"/>
	<x path="Void"/>
</f></g2d_contextErrorHandler>
		<getMaskRect public="1" get="inline" set="null" line="381">
			<f a=""><t path="com.genome2d.geom.GRectangle"/></f>
			<haxe_doc>**************************************************************************************************
     *  Scissor masking methods
     **************************************************************************************************</haxe_doc>
		</getMaskRect>
		<setMaskRect public="1" get="inline" set="null" line="390">
			<f a="p_maskRect">
				<t path="com.genome2d.geom.GRectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set masking rectangle for all subsequent draws

	  	@param p_maskRect AABB rectangle that defines masking</haxe_doc>
		</setMaskRect>
		<setActiveCamera public="1" set="method" line="407">
			<f a="p_camera">
				<c path="com.genome2d.context.GCamera"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set camera that should be used for all subsequent draws</haxe_doc>
		</setActiveCamera>
		<setDepthTest public="1" set="method" line="430"><f a="p_depthMask:p_compareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<begin public="1" set="method" line="439">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Start the drawing</haxe_doc>
		</begin>
		<end public="1" set="method" line="463">
			<f a=""><x path="Void"/></f>
			<haxe_doc>End the drawing</haxe_doc>
		</end>
		<draw2 public="1" get="inline" set="null" line="479">
			<f a="p_texture:p_x:p_y:?p_scaleX:?p_scaleY:?p_rotation:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter:?p_id" v=":::1:1:0:1:1:1:1:1:null:0">
				<c path="com.genome2d.textures.GTexture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</draw2>
		<draw public="1" get="inline" set="null" line="493">
			<f a="p_texture:p_x:p_y:?p_scaleX:?p_scaleY:?p_rotation:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter" v=":::1:1:0:1:1:1:1:1:null">
				<c path="com.genome2d.textures.GTexture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw quad

       @param p_texture textures instance used to drawing</haxe_doc>
		</draw>
		<drawSource public="1" get="inline" set="null" line="507">
			<f a="p_texture:p_sourceX:p_sourceY:p_sourceWidth:p_sourceHeight:p_sourcePivotX:p_sourcePivotY:p_x:p_y:?p_scaleX:?p_scaleY:?p_rotation:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter" v=":::::::::1:1:0:1:1:1:1:1:null">
				<c path="com.genome2d.textures.GTexture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw quad using source rectangle

       @param p_texture textures to be drawn</haxe_doc>
		</drawSource>
		<drawMatrix public="1" get="inline" set="null" line="521">
			<f a="p_texture:p_a:p_b:p_c:p_d:p_tx:p_ty:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter" v=":::::::1:1:1:1:1:null">
				<c path="com.genome2d.textures.GTexture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw quad using 2D matrix raw data

       @param p_texture textures to be drawn</haxe_doc>
		</drawMatrix>
		<drawMatrixSource public="1" get="inline" set="null" line="534">
			<f a="p_texture:p_sourceX:p_sourceY:p_sourceWidth:p_sourceHeight:p_a:p_b:p_c:p_d:p_tx:p_ty:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter" v=":::::::::::1:1:1:1:1:null">
				<c path="com.genome2d.textures.GTexture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw quad using 2D matrix raw data

       @param p_texture textures to be drawn</haxe_doc>
		</drawMatrixSource>
		<drawPoly public="1" get="inline" set="null" line="555">
			<f a="p_texture:p_vertices:p_uvs:p_x:p_y:?p_scaleX:?p_scaleY:?p_rotation:?p_red:?p_green:?p_blue:?p_alpha:?p_blendMode:?p_filter" v=":::::1:1:0:1:1:1:1:1:null">
				<c path="com.genome2d.textures.GTexture"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="com.genome2d.context.filters.GFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw polygon

        @param p_texture textures to be used for fill
        @param p_vertices triangulated vertices that define the polygon
        @param p_uvs uvs that correspond to the vertices defined
        @param p_x x translation
        @param p_y y translation
        @param p_scaleX x scale
        @param p_scaleY y scale
        @param p_rotation rotation</haxe_doc>
		</drawPoly>
		<setBlendMode public="1" get="inline" set="null" line="564"><f a="p_blendMode:p_premultiplied">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBlendMode>
		<bindRenderer public="1" get="inline" set="null" line="576"><f a="p_renderer">
	<c path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
	<x path="Void"/>
</f></bindRenderer>
		<g2d_activeStencilLayer>
			<x path="Int"/>
			<haxe_doc>**************************************************************************************************
     *  Stencil methods
     **************************************************************************************************</haxe_doc>
		</g2d_activeStencilLayer>
		<clearStencil public="1" set="method" line="597">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the stencil buffer</haxe_doc>
		</clearStencil>
		<renderToStencil public="1" set="method" line="607">
			<f a="p_stencilLayer">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the render target to stencil buffer

        @param p_stencilLayer active masking stencil layer</haxe_doc>
		</renderToStencil>
		<renderToColor public="1" set="method" line="620">
			<f a="p_stencilLayer">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Switch rendering to color buffer

        @param p_stencilLayer stencil layer to be used for masking</haxe_doc>
		</renderToColor>
		<g2d_renderTargetMatrix>
			<c path="flash.geom.Matrix3D"/>
			<haxe_doc>**************************************************************************************************
     *  Render target methods
     **************************************************************************************************</haxe_doc>
		</g2d_renderTargetMatrix>
		<g2d_usedRenderTargets><x path="Int"/></g2d_usedRenderTargets>
		<g2d_renderTargetStack><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></g2d_renderTargetStack>
		<g2d_renderTarget><c path="com.genome2d.textures.GContextTexture"/></g2d_renderTarget>
		<g2d_renderTargetTransform public="1"><t path="com.genome2d.geom.GMatrix3D"/></g2d_renderTargetTransform>
		<getRenderTarget public="1" set="method" line="640">
			<f a=""><c path="com.genome2d.textures.GContextTexture"/></f>
			<haxe_doc>Gets the current render target, if null the target is backbuffer</haxe_doc>
		</getRenderTarget>
		<setRenderTarget public="1" set="method" line="650">
			<f a="?p_texture:?p_transform:?p_clear" v="null:null:true">
				<c path="com.genome2d.textures.GContextTexture"/>
				<t path="com.genome2d.geom.GMatrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the render target for all subsequent draw calls

        @param p_texture textures target, if null it will target backbuffer
        @param p_transform additional transformation that should be applied, not applicable to backbuffer target</haxe_doc>
		</setRenderTarget>
		<setRenderTargets public="1" set="method" line="677"><f a="p_textures:?p_transform:?p_clear" v=":null:true">
	<c path="Array"><c path="com.genome2d.textures.GContextTexture"/></c>
	<t path="com.genome2d.geom.GMatrix3D"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setRenderTargets>
		<g2d_enterFrameHandler set="method" line="691"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></g2d_enterFrameHandler>
		<g2d_mouseEventHandler set="method" line="698"><f a="event">
	<c path="flash.events.MouseEvent"/>
	<x path="Void"/>
</f></g2d_mouseEventHandler>
		<g2d_keyboardEventHandler set="method" line="712"><f a="event">
	<c path="flash.events.KeyboardEvent"/>
	<x path="Void"/>
</f></g2d_keyboardEventHandler>
		<new public="1" set="method" line="212">
			<f a="p_config">
				<c path="com.genome2d.context.GContextConfig"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*  CONSTRUCTOR</haxe_doc>
		</new>
		<meta><m n=":native"><e>"com.genome2d.context.IContext"</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.IGRenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/IGRenderer.hx" interface="1">
		<bind public="1" set="method"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<push public="1" set="method"><f a=""><x path="Void"/></f></push>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GCustomRenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GCustomRenderer.hx">
		<implements path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
		<DATA_PER_VERTEX get="inline" set="null" line="35" static="1"><x path="Int"/></DATA_PER_VERTEX>
		<VERTEX_SHADER_CODE get="inline" set="null" line="39" static="1"><c path="String"/></VERTEX_SHADER_CODE>
		<g2d_initializedThisFrame><x path="Bool"/></g2d_initializedThisFrame>
		<g2d_vertexShaderCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderCode>
		<g2d_fragmentShaderCode><c path="flash.utils.ByteArray"/></g2d_fragmentShaderCode>
		<g2d_context><c path="com.genome2d.context.stage3d.GStage3DContext"/></g2d_context>
		<g2d_vertexBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_vertexBuffer>
		<g2d_indexBuffer><c path="flash.display3D.IndexBuffer3D"/></g2d_indexBuffer>
		<g2d_triangleCount><x path="Int"/></g2d_triangleCount>
		<g2d_program><c path="flash.display3D.Program3D"/></g2d_program>
		<g2d_generatePerspectiveMatrix><x path="Bool"/></g2d_generatePerspectiveMatrix>
		<g2d_vertices><c path="Array"><x path="Float"/></c></g2d_vertices>
		<g2d_uvs><c path="Array"><x path="Float"/></c></g2d_uvs>
		<g2d_indices><c path="Array"><x path="UInt"/></c></g2d_indices>
		<transformMatrix public="1"><t path="com.genome2d.geom.GMatrix3D"/></transformMatrix>
		<projectionMatrix public="1"><c path="com.genome2d.context.stage3d.GProjectionMatrix"/></projectionMatrix>
		<initialize public="1" set="method" line="83"><f a="p_context">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Void"/>
</f></initialize>
		<bind public="1" set="method" line="138"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<draw public="1" set="method" line="146"><f a="p_texture:?p_cull" v=":0">
	<c path="com.genome2d.textures.GTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></draw>
		<push public="1" get="inline" set="null" line="170"><f a=""><x path="Void"/></f></push>
		<clear public="1" set="method" line="173"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="70"><f a="p_vertices:p_uvs:?p_indices:?p_generatePerspectiveMatrix" v="::null:false">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="UInt"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GMatrixQuadTextureShaderRenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GMatrixQuadTextureShaderRenderer.hx">
		<implements path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
		<CONSTANTS_OFFSET get="inline" set="null" line="33" static="1"><x path="Int"/></CONSTANTS_OFFSET>
		<BATCH_CONSTANTS get="inline" set="null" line="34" static="1"><x path="Int"/></BATCH_CONSTANTS>
		<TRANSFORM_PER_VERTEX get="inline" set="null" line="36" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX>
		<BATCH_SIZE get="inline" set="null" line="37" static="1"><x path="Int"/></BATCH_SIZE>
		<TRANSFORM_PER_VERTEX_ALPHA get="inline" set="null" line="39" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX_ALPHA>
		<BATCH_SIZE_ALPHA get="inline" set="null" line="40" static="1"><x path="Int"/></BATCH_SIZE_ALPHA>
		<VERTEX_SHADER_CODE get="inline" set="null" line="43" static="1"><c path="String"/></VERTEX_SHADER_CODE>
		<VERTEX_SHADER_CODE_ALPHA get="inline" set="null" line="66" static="1"><c path="String"/></VERTEX_SHADER_CODE_ALPHA>
		<g2d_useFastMem public="1"><x path="Bool"/></g2d_useFastMem>
		<g2d_fastMemArray public="1"><c path="flash.utils.ByteArray"/></g2d_fastMemArray>
		<g2d_geometryBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_geometryBuffer>
		<g2d_uvBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_uvBuffer>
		<g2d_constantIndexBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_constantIndexBuffer>
		<g2d_constantIndexBufferAlpha><c path="flash.display3D.VertexBuffer3D"/></g2d_constantIndexBufferAlpha>
		<g2d_indexBuffer><c path="flash.display3D.IndexBuffer3D"/></g2d_indexBuffer>
		<g2d_initializedThisFrame><x path="Bool"/></g2d_initializedThisFrame>
		<g2d_quadCount><x path="Int"/></g2d_quadCount>
		<g2d_activeNativeTexture><c path="flash.display3D.textures.TextureBase"/></g2d_activeNativeTexture>
		<g2d_activeFiltering><x path="Int"/></g2d_activeFiltering>
		<g2d_activeAlpha><x path="Bool"/></g2d_activeAlpha>
		<g2d_activeAtf><c path="String"/></g2d_activeAtf>
		<g2d_activeFilter><c path="com.genome2d.context.filters.GFilter"/></g2d_activeFilter>
		<g2d_activeRepeat><x path="Bool"/></g2d_activeRepeat>
		<g2d_useSeparatedAlphaPipeline><x path="Bool"/></g2d_useSeparatedAlphaPipeline>
		<g2d_cachedPrograms><c path="flash.utils.Dictionary"/></g2d_cachedPrograms>
		<g2d_cachedProgramIds><c path="flash.utils.Dictionary"/></g2d_cachedProgramIds>
		<g2d_vertexConstants><c path="flash.Vector"><x path="Float"/></c></g2d_vertexConstants>
		<g2d_vertexShaderCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderCode>
		<g2d_vertexShaderAlphaCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderAlphaCode>
		<g2d_constantOffset><x path="Int"/></g2d_constantOffset>
		<g2d_context><c path="com.genome2d.context.stage3d.GStage3DContext"/></g2d_context>
		<g2d_nativeContext><c path="flash.display3D.Context3D"/></g2d_nativeContext>
		<getCachedProgram get="inline" set="null" line="107"><f a="p_alpha:p_repeat:p_filtering:p_atf:p_filter">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<c path="flash.display3D.Program3D"/>
</f></getCachedProgram>
		<initialize public="1" set="method" line="136"><f a="p_context">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Void"/>
</f></initialize>
		<bind public="1" get="inline" set="null" line="190"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<draw public="1" get="inline" set="null" line="208"><f a="p_a:p_b:p_c:p_d:p_tx:p_ty:p_red:p_green:p_blue:p_alpha:p_texture:p_filter:p_overrideSource:p_sourceX:p_sourceY:p_sourceWidth:p_sourceHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></draw>
		<push public="1" get="inline" set="null" line="339"><f a=""><x path="Void"/></f></push>
		<clear public="1" get="inline" set="null" line="353"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="102"><f a="p_useFastMem:p_fastMemArray">
	<x path="Bool"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GQuadTextureBufferGPURenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GQuadTextureBufferGPURenderer.hx">
		<implements path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
		<BATCH_SIZE get="inline" set="null" line="35" static="1"><x path="Int"/></BATCH_SIZE>
		<DATA_PER_VERTEX get="inline" set="null" line="36" static="1"><x path="Int"/></DATA_PER_VERTEX>
		<TRANSFORM_PER_VERTEX_ALPHA get="inline" set="null" line="37" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX_ALPHA>
		<TRANSFORM_PER_VERTEX get="inline" set="null" line="38" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX>
		<VERTEX_SHADER_CODE get="inline" set="null" line="41" static="1"><c path="String"/></VERTEX_SHADER_CODE>
		<VERTEX_SHADER_CODE_ALPHA get="inline" set="null" line="67" static="1"><c path="String"/></VERTEX_SHADER_CODE_ALPHA>
		<g2d_useFastMem><x path="Bool"/></g2d_useFastMem>
		<g2d_fastMemArray><c path="flash.utils.ByteArray"/></g2d_fastMemArray>
		<g2d_geometryBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_geometryBuffer>
		<g2d_transformBufferAlpha><c path="flash.display3D.VertexBuffer3D"/></g2d_transformBufferAlpha>
		<g2d_transformBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_transformBuffer>
		<g2d_transformVector><c path="flash.Vector"><x path="Float"/></c></g2d_transformVector>
		<g2d_indexBuffer><c path="flash.display3D.IndexBuffer3D"/></g2d_indexBuffer>
		<g2d_quadCount><x path="Int"/></g2d_quadCount>
		<g2d_initializedThisFrame><x path="Bool"/></g2d_initializedThisFrame>
		<g2d_activeTexture><c path="flash.display3D.textures.TextureBase"/></g2d_activeTexture>
		<g2d_activeAlpha><x path="Bool"/></g2d_activeAlpha>
		<g2d_activeAtf><c path="String"/></g2d_activeAtf>
		<g2d_activeFilter><c path="com.genome2d.context.filters.GFilter"/></g2d_activeFilter>
		<g2d_activeFiltering><x path="Int"/></g2d_activeFiltering>
		<g2d_activeRepeat><x path="Bool"/></g2d_activeRepeat>
		<g2d_context><c path="com.genome2d.context.stage3d.GStage3DContext"/></g2d_context>
		<g2d_nativeContext><c path="flash.display3D.Context3D"/></g2d_nativeContext>
		<g2d_cachedPrograms><c path="flash.utils.Dictionary"/></g2d_cachedPrograms>
		<g2d_cachedProgramIds><c path="flash.utils.Dictionary"/></g2d_cachedProgramIds>
		<g2d_vertexShaderCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderCode>
		<g2d_vertexShaderAlphaCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderAlphaCode>
		<g2d_useSeparatedAlphaPipeline><x path="Bool"/></g2d_useSeparatedAlphaPipeline>
		<getCachedProgram get="inline" set="null" line="105"><f a="p_alpha:p_repeat:p_filtering:p_atf:p_filter">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<c path="flash.display3D.Program3D"/>
</f></getCachedProgram>
		<initialize public="1" set="method" line="134"><f a="p_context">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Void"/>
</f></initialize>
		<bind public="1" get="inline" set="null" line="186"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<draw public="1" get="inline" set="null" line="198"><f a="p_x:p_y:p_scaleX:p_scaleY:p_rotation:p_red:p_green:p_blue:p_alpha:p_texture:p_filter">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<x path="Void"/>
</f></draw>
		<push public="1" get="inline" set="null" line="403"><f a=""><x path="Void"/></f></push>
		<clear public="1" get="inline" set="null" line="429"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="100"><f a="p_useFastMem:p_fastMemArray">
	<x path="Bool"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GQuadTextureShaderRenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GQuadTextureShaderRenderer.hx">
		<implements path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
		<CONSTANTS_OFFSET get="inline" set="null" line="33" static="1"><x path="Int"/></CONSTANTS_OFFSET>
		<TRANSFORM_PER_VERTEX get="inline" set="null" line="36" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX>
		<TRANSFORM_PER_VERTEX_ALPHA get="inline" set="null" line="39" static="1"><x path="Int"/></TRANSFORM_PER_VERTEX_ALPHA>
		<VERTEX_SHADER_CODE get="inline" set="null" line="43" static="1"><c path="String"/></VERTEX_SHADER_CODE>
		<VERTEX_SHADER_CODE_ALPHA get="inline" set="null" line="77" static="1"><c path="String"/></VERTEX_SHADER_CODE_ALPHA>
		<TRUE get="inline" set="null" line="117" static="1"><c path="String"/></TRUE>
		<FALSE get="inline" set="null" line="118" static="1"><c path="String"/></FALSE>
		<MAX_CONSTANTS><x path="Int"/></MAX_CONSTANTS>
		<BATCH_SIZE><x path="Int"/></BATCH_SIZE>
		<BATCH_SIZE_ALPHA><x path="Int"/></BATCH_SIZE_ALPHA>
		<g2d_useFastMem public="1"><x path="Bool"/></g2d_useFastMem>
		<g2d_fastMemArray public="1"><c path="flash.utils.ByteArray"/></g2d_fastMemArray>
		<g2d_geometryBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_geometryBuffer>
		<g2d_uvBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_uvBuffer>
		<g2d_constantIndexBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_constantIndexBuffer>
		<g2d_constantIndexAlphaBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_constantIndexAlphaBuffer>
		<g2d_indexBuffer><c path="flash.display3D.IndexBuffer3D"/></g2d_indexBuffer>
		<g2d_initializedThisFrame><x path="Bool"/></g2d_initializedThisFrame>
		<g2d_quadCount><x path="Int"/></g2d_quadCount>
		<g2d_activeNativeTexture><c path="flash.display3D.textures.TextureBase"/></g2d_activeNativeTexture>
		<g2d_activeFiltering><x path="Int"/></g2d_activeFiltering>
		<g2d_activeRepeat><x path="Bool"/></g2d_activeRepeat>
		<g2d_activeAlpha><x path="Bool"/></g2d_activeAlpha>
		<g2d_activeAtf><c path="String"/></g2d_activeAtf>
		<g2d_activeFilter><c path="com.genome2d.context.filters.GFilter"/></g2d_activeFilter>
		<g2d_activeTextureId><x path="Int"/></g2d_activeTextureId>
		<g2d_activeTextureWidth><x path="Float"/></g2d_activeTextureWidth>
		<g2d_activeTextureHeight><x path="Float"/></g2d_activeTextureHeight>
		<g2d_textureIndex><x path="Int"/></g2d_textureIndex>
		<g2d_useSeparatedAlphaPipeline><x path="Bool"/></g2d_useSeparatedAlphaPipeline>
		<g2d_cachedPrograms><c path="flash.utils.Dictionary"/></g2d_cachedPrograms>
		<g2d_cachedProgramIds><c path="flash.utils.Dictionary"/></g2d_cachedProgramIds>
		<g2d_vertexConstants><c path="flash.Vector"><x path="Float"/></c></g2d_vertexConstants>
		<g2d_vertexShaderCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderCode>
		<g2d_vertexShaderAlphaCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderAlphaCode>
		<g2d_constantOffset><x path="Int"/></g2d_constantOffset>
		<g2d_context><c path="com.genome2d.context.stage3d.GStage3DContext"/></g2d_context>
		<g2d_nativeContext><c path="flash.display3D.Context3D"/></g2d_nativeContext>
		<getCachedProgram get="inline" set="null" line="129"><f a="p_alpha:p_repeat:p_filtering:p_atf:p_filter">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<c path="flash.display3D.Program3D"/>
</f></getCachedProgram>
		<initialize public="1" set="method" line="158"><f a="p_context">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Void"/>
</f></initialize>
		<bind public="1" get="inline" set="null" line="213"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<draw public="1" get="inline" set="null" line="237"><f a="p_x:p_y:p_scaleX:p_scaleY:p_rotation:p_red:p_green:p_blue:p_alpha:p_texture:p_filter:p_overrideSource:p_sourceX:p_sourceY:p_sourceWidth:p_sourceHeight:p_sourcePivotX:p_sourcePivotY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></draw>
		<push public="1" get="inline" set="null" line="384"><f a=""><x path="Void"/></f></push>
		<clear public="1" get="inline" set="null" line="399"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="120"><f a="p_useFastMem:p_fastMemArray">
	<x path="Bool"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GRenderersCommon" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GRenderersCommon.hx">
		<COLOR_FRAGMENT_CODE get="inline" set="null" line="18" static="1"><c path="String"/></COLOR_FRAGMENT_CODE>
		<getSamplerFragmentCode set="method" line="20" static="1"><f a="p_repeat:p_filtering:p_atf">
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></getSamplerFragmentCode>
		<ALPHA_FRAGMENT_CONSTANT_CODE get="inline" set="null" line="24" static="1"><c path="String"/></ALPHA_FRAGMENT_CONSTANT_CODE>
		<ALPHA_FRAGMENT_VARYING_CODE get="inline" set="null" line="26" static="1"><c path="String"/></ALPHA_FRAGMENT_VARYING_CODE>
		<FINAL_FRAGMENT_CODE get="inline" set="null" line="28" static="1"><c path="String"/></FINAL_FRAGMENT_CODE>
		<getColorShaderCode public="1" set="method" line="30" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></getColorShaderCode>
		<getTexturedShaderCode public="1" set="method" line="37" static="1"><f a="p_repeat:p_filtering:p_alpha:?p_atf:?p_filter" v=":::'':null">
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<c path="flash.utils.ByteArray"/>
</f></getTexturedShaderCode>
		<AGAL_VERSION public="1" line="56" static="1"><x path="Int"/></AGAL_VERSION>
		<DEFAULT_CONSTANTS public="1" static="1"><c path="flash.Vector"><x path="Float"/></c></DEFAULT_CONSTANTS>
		<NORMALIZED_VERTICES public="1" static="1"><c path="flash.Vector"><x path="Float"/></c></NORMALIZED_VERTICES>
		<NORMALIZED_UVS public="1" static="1"><c path="flash.Vector"><x path="Float"/></c></NORMALIZED_UVS>
		<init public="1" set="method" line="64" static="1"><f a="p_agalVersion">
	<x path="Int"/>
	<x path="Void"/>
</f></init>
	</class>
	<class path="com.genome2d.context.stage3d.renderers.GTriangleTextureBufferCPURenderer" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stage3d/renderers/GTriangleTextureBufferCPURenderer.hx">
		<implements path="com.genome2d.context.stage3d.renderers.IGRenderer"/>
		<BATCH_SIZE get="inline" set="null" line="32" static="1"><x path="Int"/></BATCH_SIZE>
		<DATA_PER_VERTEX get="inline" set="null" line="33" static="1"><x path="Int"/></DATA_PER_VERTEX>
		<DATA_PER_VERTEX_ALPHA get="inline" set="null" line="34" static="1"><x path="Int"/></DATA_PER_VERTEX_ALPHA>
		<VERTEX_SHADER_CODE get="inline" set="null" line="37" static="1"><c path="String"/></VERTEX_SHADER_CODE>
		<VERTEX_SHADER_CODE_ALPHA get="inline" set="null" line="41" static="1"><c path="String"/></VERTEX_SHADER_CODE_ALPHA>
		<g2d_vertexBuffer><c path="flash.display3D.VertexBuffer3D"/></g2d_vertexBuffer>
		<g2d_vertexBufferAlpha><c path="flash.display3D.VertexBuffer3D"/></g2d_vertexBufferAlpha>
		<g2d_vertexVector><c path="flash.Vector"><x path="Float"/></c></g2d_vertexVector>
		<g2d_triangleIndexBuffer><c path="flash.display3D.IndexBuffer3D"/></g2d_triangleIndexBuffer>
		<g2d_triangleCount><x path="Int"/></g2d_triangleCount>
		<g2d_initializedThisFrame><x path="Bool"/></g2d_initializedThisFrame>
		<g2d_activeAlpha><x path="Bool"/></g2d_activeAlpha>
		<g2d_activeAtf><c path="String"/></g2d_activeAtf>
		<g2d_activeFilter><c path="com.genome2d.context.filters.GFilter"/></g2d_activeFilter>
		<g2d_activeFiltering><x path="Int"/></g2d_activeFiltering>
		<g2d_activeTexture><c path="flash.display3D.textures.TextureBase"/></g2d_activeTexture>
		<g2d_activeRepeat><x path="Bool"/></g2d_activeRepeat>
		<g2d_useSeparatedAlphaPipeline><x path="Bool"/></g2d_useSeparatedAlphaPipeline>
		<g2d_cachedPrograms><c path="flash.utils.Dictionary"/></g2d_cachedPrograms>
		<g2d_cachedProgramIds><c path="flash.utils.Dictionary"/></g2d_cachedProgramIds>
		<g2d_vertexShaderCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderCode>
		<g2d_vertexShaderAlphaCode><c path="flash.utils.ByteArray"/></g2d_vertexShaderAlphaCode>
		<g2d_context><c path="com.genome2d.context.stage3d.GStage3DContext"/></g2d_context>
		<g2d_nativeContext><c path="flash.display3D.Context3D"/></g2d_nativeContext>
		<getCachedProgram get="inline" set="null" line="68"><f a="p_alpha:p_repeat:p_filtering:p_atf:p_filter">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<c path="flash.display3D.Program3D"/>
</f></getCachedProgram>
		<initialize public="1" set="method" line="100"><f a="p_context">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Void"/>
</f></initialize>
		<bind public="1" set="method" line="128"><f a="p_context:p_reinitialize">
	<c path="com.genome2d.context.stage3d.GStage3DContext"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bind>
		<draw public="1" set="method" line="142"><f a="p_vertices:p_uvs:p_x:p_y:p_scaleX:p_scaleY:p_rotation:p_red:p_green:p_blue:p_alpha:p_texture:p_filter">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.context.filters.GFilter"/>
	<x path="Void"/>
</f></draw>
		<push public="1" get="inline" set="null" line="220"><f a=""><x path="Void"/></f></push>
		<clear public="1" set="method" line="240"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="97"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.context.stats.IStats" params="" file="Genome2D-ContextCommon/src/com/genome2d/context/stats/IStats.hx" interface="1">
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear stats at the beginning of the rendering</haxe_doc>
		</clear>
		<render public="1" set="method">
			<f a="p_context">
				<t path="com.genome2d.context.IContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Render stats</haxe_doc>
		</render>
		<haxe_doc>Interface for implementing custom stats class</haxe_doc>
	</class>
	<class path="com.genome2d.context.stats.GStats" params="" file="Genome2D-ContextFlash/src/com/genome2d/context/stats/GStats.hx">
		<implements path="com.genome2d.context.stats.IStats"/>
		<fps public="1" line="29" static="1"><x path="Int"/></fps>
		<drawCalls public="1" line="30" static="1"><x path="Int"/></drawCalls>
		<nodeCount public="1" line="31" static="1"><x path="Int"/></nodeCount>
		<customStats public="1" static="1"><c path="Array"><c path="String"/></c></customStats>
		<x public="1" line="34" static="1"><x path="Int"/></x>
		<y public="1" line="35" static="1"><x path="Int"/></y>
		<scaleX public="1" line="36" static="1"><x path="Float"/></scaleX>
		<scaleY public="1" line="37" static="1"><x path="Float"/></scaleY>
		<visible public="1" line="38" static="1"><x path="Bool"/></visible>
		<g2d_statsField><c path="flash.text.TextField"/></g2d_statsField>
		<g2d_initialized><x path="Bool"/></g2d_initialized>
		<g2d_previousTime><x path="Int"/></g2d_previousTime>
		<g2d_fpsString><c path="String"/></g2d_fpsString>
		<g2d_fpsCounter><x path="Int"/></g2d_fpsCounter>
		<g2d_memString><c path="String"/></g2d_memString>
		<g2d_memSimpleString><c path="String"/></g2d_memSimpleString>
		<g2d_mem><x path="Int"/></g2d_mem>
		<g2d_memMax><x path="Int"/></g2d_memMax>
		<g2d_bitmapData><c path="flash.display.BitmapData"/></g2d_bitmapData>
		<g2d_texture><c path="com.genome2d.textures.GTexture"/></g2d_texture>
		<render public="1" set="method" line="71"><f a="p_context">
	<t path="com.genome2d.context.IContext"/>
	<x path="Void"/>
</f></render>
		<clear public="1" set="method" line="123"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.debug.GDebug" params="" file="Genome2D-Core/src/com/genome2d/debug/GDebug.hx">
		<console line="6" static="1"><c path="String"/></console>
		<onDebug public="1" static="1"><c path="msignal.Signal1"><c path="String"/></c></onDebug>
		<init public="1" set="method" line="10" static="1"><f a=""><x path="Void"/></f></init>
		<trace public="1" set="method" line="14" static="1"><f a="p_msg">
	<c path="String"/>
	<x path="Void"/>
</f></trace>
		<info public="1" set="method" line="19" static="1"><f a="p_msg">
	<c path="String"/>
	<x path="Void"/>
</f></info>
		<warning public="1" set="method" line="24" static="1"><f a="p_msg">
	<c path="String"/>
	<x path="Void"/>
</f></warning>
		<error public="1" set="method" line="29" static="1"><f a="p_msg">
	<c path="String"/>
	<x path="Void"/>
</f></error>
	</class>
	<class path="com.genome2d.error.GError" params="" file="Genome2D-ContextFlash/src/com/genome2d/error/GError.hx"><new public="1" set="method" line="12"><f a="?p_message" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></new></class>
	<class path="com.genome2d.geom.GCurve" params="" file="Genome2D-Core/src/com/genome2d/geom/GCurve.hx">
		<createLine public="1" set="method" line="71" static="1"><f a="p_end:?p_strength" v=":1">
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.geom.GCurve"/>
</f></createLine>
		<start public="1"><x path="Float"/></start>
		<g2d_segments><c path="Array"><c path="com.genome2d.geom.Segment"/></c></g2d_segments>
		<g2d_pathLength><x path="Int"/></g2d_pathLength>
		<g2d_totalStrength><x path="Float"/></g2d_totalStrength>
		<addSegment set="method" line="26"><f a="p_segment">
	<c path="com.genome2d.geom.Segment"/>
	<x path="Void"/>
</f></addSegment>
		<clear public="1" set="method" line="32"><f a=""><x path="Void"/></f></clear>
		<line public="1" set="method" line="38"><f a="p_end:?p_strength" v=":1">
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.geom.GCurve"/>
</f></line>
		<getEnd public="1" set="method" line="44"><f a=""><x path="Float"/></f></getEnd>
		<calculate public="1" set="method" line="48"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<quadraticBezier public="1" set="method" line="75"><f a="p_end:p_control:?p_strength" v="::1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.geom.GCurve"/>
</f></quadraticBezier>
		<cubicBezier public="1" set="method" line="80"><f a="p_end:p_control1:p_control2:?p_strength" v=":::1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.geom.GCurve"/>
</f></cubicBezier>
		<new public="1" set="method" line="19"><f a="?p_start" v="0">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.geom.Segment" params="" file="Genome2D-Core/src/com/genome2d/geom/GCurve.hx" module="com.genome2d.geom.GCurve">
		<end public="1"><x path="Float"/></end>
		<strength public="1"><x path="Float"/></strength>
		<calculate public="1" set="method" line="95"><f a="p_start:p_d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="90"><f a="p_end:p_strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.geom.LinearSegment" params="" file="Genome2D-Core/src/com/genome2d/geom/GCurve.hx" module="com.genome2d.geom.GCurve">
		<extends path="com.genome2d.geom.Segment"/>
		<calculate public="1" set="method" line="105" override="1"><f a="p_start:p_d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="101"><f a="p_end:p_strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.geom.QuadraticBezierSegment" params="" file="Genome2D-Core/src/com/genome2d/geom/GCurve.hx" module="com.genome2d.geom.GCurve">
		<extends path="com.genome2d.geom.Segment"/>
		<control public="1"><x path="Float"/></control>
		<calculate public="1" set="method" line="120" override="1"><f a="p_start:p_d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="113"><f a="p_end:p_strength:p_control">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.geom.CubicBezierSegment" params="" file="Genome2D-Core/src/com/genome2d/geom/GCurve.hx" module="com.genome2d.geom.GCurve">
		<extends path="com.genome2d.geom.Segment"/>
		<control1 public="1"><x path="Float"/></control1>
		<control2 public="1"><x path="Float"/></control2>
		<calculate public="1" set="method" line="139" override="1"><f a="p_start:p_d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="131"><f a="p_end:p_strength:p_control1:p_control2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.geom.GLine" params="" file="Genome2D-Core/src/com/genome2d/geom/GLine.hx">
		<start public="1"><c path="com.genome2d.geom.GVector2"/></start>
		<end public="1"><c path="com.genome2d.geom.GVector2"/></end>
		<normal public="1"><c path="com.genome2d.geom.GVector2"/></normal>
		<vec public="1"><c path="com.genome2d.geom.GVector2"/></vec>
		<aabb public="1"><t path="com.genome2d.geom.GRectangle"/></aabb>
		<side public="1" set="method" line="30"><f a="p_px:p_py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></side>
		<intersect public="1" set="method" line="42"><f a="p_line:?p_v1seg:?p_v2seg" v=":true:true">
	<c path="com.genome2d.geom.GLine"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="com.genome2d.geom.GVector2"/>
</f></intersect>
		<toString public="1" set="method" line="75"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="21"><f a="p_start:p_end">
	<c path="com.genome2d.geom.GVector2"/>
	<c path="com.genome2d.geom.GVector2"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="com.genome2d.geom.GMatrix" params="" file="Genome2D-ContextFlash/src/com/genome2d/geom/GMatrix.hx"><c path="flash.geom.Matrix"/></typedef>
	<typedef path="com.genome2d.geom.GMatrix3D" params="" file="Genome2D-ContextFlash/src/com/genome2d/geom/GMatrix3D.hx"><c path="flash.geom.Matrix3D"/></typedef>
	<class path="com.genome2d.geom.GMatrixUtils" params="" file="Genome2D-Core/src/com/genome2d/geom/GMatrixUtils.hx"><prependMatrix public="1" get="inline" set="null" line="12" static="1"><f a="p_matrix:p_by">
	<t path="com.genome2d.geom.GMatrix"/>
	<t path="com.genome2d.geom.GMatrix"/>
	<x path="Void"/>
</f></prependMatrix></class>
	<typedef path="com.genome2d.geom.GPoint" params="" file="Genome2D-ContextFlash/src/com/genome2d/geom/GPoint.hx"><c path="flash.geom.Point"/></typedef>
	<class path="com.genome2d.geom.GPoly" params="" file="Genome2D-Core/src/com/genome2d/geom/GPoly.hx"/>
	<typedef path="com.genome2d.geom.GRectangle" params="" file="Genome2D-ContextFlash/src/com/genome2d/geom/GRectangle.hx"><c path="flash.geom.Rectangle"/></typedef>
	<class path="com.genome2d.geom.GVector2" params="" file="Genome2D-Core/src/com/genome2d/geom/GVector2.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<get_length get="inline" set="null" line="23"><f a=""><x path="Float"/></f></get_length>
		<GVector2 public="1" set="method" line="27"><f a="?p_x:?p_y" v="0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></GVector2>
		<addEq public="1" set="method" line="32"><f a="p_vector">
	<c path="com.genome2d.geom.GVector2"/>
	<x path="Void"/>
</f></addEq>
		<subEq public="1" set="method" line="37"><f a="p_vector">
	<c path="com.genome2d.geom.GVector2"/>
	<x path="Void"/>
</f></subEq>
		<mulEq public="1" set="method" line="42"><f a="p_s">
	<x path="Float"/>
	<x path="Void"/>
</f></mulEq>
		<dot public="1" set="method" line="47"><f a="p_vector">
	<c path="com.genome2d.geom.GVector2"/>
	<x path="Float"/>
</f></dot>
		<normalize public="1" set="method" line="51"><f a=""><c path="com.genome2d.geom.GVector2"/></f></normalize>
		<toString public="1" set="method" line="60"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="15"><f a="?p_x:?p_y" v="0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.macros.MGPrototypeProcessor" params="" file="Genome2D-Core/src/com/genome2d/macros/MGPrototypeProcessor.hx"><haxe_doc>Genome2D components build macro to enumerate prototypable properties

    Not used by user</haxe_doc></class>
	<class path="com.genome2d.node.GNode" params="" file="Genome2D-Core/src/com/genome2d/node/GNode.hx">
		<create public="1" set="method" line="45" static="1">
			<f a="?p_name" v="''">
				<c path="String"/>
				<c path="com.genome2d.node.GNode"/>
			</f>
			<haxe_doc>FACTORY METHODS</haxe_doc>
		</create>
		<createWithComponent public="1" set="method" line="51" static="1"><f a="p_componentClass:?p_name:?p_lookupClass" v=":'':null">
	<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
	<c path="String"/>
	<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
	<c path="com.genome2d.components.GComponent"/>
</f></createWithComponent>
		<createFromPrototype public="1" set="method" line="58" static="1"><f a="p_prototypeXml">
	<c path="Xml"/>
	<c path="com.genome2d.node.GNode"/>
</f></createFromPrototype>
		<g2d_cachedArray static="1"><c path="Array"><c path="com.genome2d.node.GNode"/></c></g2d_cachedArray>
		<g2d_cachedMatrix static="1"><t path="com.genome2d.geom.GMatrix"/></g2d_cachedMatrix>
		<g2d_activeMasks static="1"><c path="Array"><c path="com.genome2d.node.GNode"/></c></g2d_activeMasks>
		<g2d_core static="1"><c path="com.genome2d.Genome2D"/></g2d_core>
		<g2d_nodeCount line="212" static="1"><x path="Int"/></g2d_nodeCount>
		<g2d_cachedTransformMatrix static="1">
			<t path="com.genome2d.geom.GMatrix"/>
			<haxe_doc>**************************************************************************************************
	 * 	TRANSFORM
	 **************************************************************************************************</haxe_doc>
		</g2d_cachedTransformMatrix>
		<core public="1" get="accessor" set="null"><c path="com.genome2d.Genome2D"/></core>
		<get_core get="inline" set="null" line="105"><f a=""><c path="com.genome2d.Genome2D"/></f></get_core>
		<cameraGroup public="1">
			<x path="Int"/>
			<haxe_doc><![CDATA[Camera group this node belongs to, a node is rendered through this camera if camera.mask&node.cameraGroup != 0]]></haxe_doc>
		</cameraGroup>
		<g2d_pool><c path="com.genome2d.node.GNodePool"/></g2d_pool>
		<g2d_poolNext><c path="com.genome2d.node.GNode"/></g2d_poolNext>
		<g2d_poolPrevious><c path="com.genome2d.node.GNode"/></g2d_poolPrevious>
		<maskRect public="1"><t path="com.genome2d.geom.GRectangle"/></maskRect>
		<g2d_usedAsMask><x path="Int"/></g2d_usedAsMask>
		<g2d_mask><c path="com.genome2d.node.GNode"/></g2d_mask>
		<mask public="1" get="accessor" set="accessor"><c path="com.genome2d.node.GNode"/></mask>
		<get_mask get="inline" set="null" line="126"><f a=""><c path="com.genome2d.node.GNode"/></f></get_mask>
		<set_mask get="inline" set="null" line="130"><f a="p_value">
	<c path="com.genome2d.node.GNode"/>
	<c path="com.genome2d.node.GNode"/>
</f></set_mask>
		<g2d_userData>
			<x path="Map">
				<c path="String"/>
				<d/>
			</x>
			<haxe_doc>Abstract reference to user defined data, if you want keep some custom data binded to G2DNode instance use it.</haxe_doc>
		</g2d_userData>
		<userData public="1" get="accessor" set="null"><x path="Map">
	<c path="String"/>
	<d/>
</x></userData>
		<get_userData get="inline" set="null" line="145"><f a=""><x path="Map">
	<c path="String"/>
	<d/>
</x></f></get_userData>
		<g2d_active><x path="Bool"/></g2d_active>
		<isActive public="1" get="inline" set="null" line="152"><f a=""><x path="Bool"/></f></isActive>
		<setActive public="1" set="method" line="156"><f a="p_value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setActive>
		<g2d_id><x path="Int"/></g2d_id>
		<id public="1" get="accessor" set="null"><x path="Int"/></id>
		<get_id get="inline" set="null" line="188"><f a=""><x path="Int"/></f></get_id>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Node name</haxe_doc>
		</name>
		<postProcess public="1"><c path="com.genome2d.postprocess.GPostProcess"/></postProcess>
		<g2d_parent><c path="com.genome2d.node.GNode"/></g2d_parent>
		<parent public="1" get="accessor" set="null"><c path="com.genome2d.node.GNode"/></parent>
		<get_parent get="inline" set="null" line="203"><f a=""><c path="com.genome2d.node.GNode"/></f></get_parent>
		<g2d_disposed><x path="Bool"/></g2d_disposed>
		<isDisposed get="inline" set="null" line="208"><f a=""><x path="Bool"/></f></isDisposed>
		<dispose public="1" set="method" line="229">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* 	This method disposes this node, this will also dispose all of its children, components and signals</haxe_doc>
		</dispose>
		<getPrototype public="1" set="method" line="307">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>**************************************************************************************************
	 * 	PROTOTYPE CODE
	 **************************************************************************************************</haxe_doc>
		</getPrototype>
		<mouseChildren public="1">
			<x path="Bool"/>
			<haxe_doc>**************************************************************************************************
	 * 	MOUSE CODE
	 **************************************************************************************************</haxe_doc>
		</mouseChildren>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<mousePixelEnabled public="1"><x path="Bool"/></mousePixelEnabled>
		<mousePixelTreshold public="1"><x path="Int"/></mousePixelTreshold>
		<filter public="1"><c path="com.genome2d.context.filters.GFilter"/></filter>
		<g2d_onMouseDown><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseDown>
		<onMouseDown public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseDown>
		<get_onMouseDown set="method" line="351"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseDown>
		<g2d_onMouseMove><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseMove>
		<onMouseMove public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseMove>
		<get_onMouseMove set="method" line="359"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseMove>
		<g2d_onMouseClick><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseClick>
		<onMouseClick public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseClick>
		<get_onMouseClick set="method" line="367"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseClick>
		<g2d_onMouseUp><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseUp>
		<onMouseUp public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseUp>
		<get_onMouseUp set="method" line="375"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseUp>
		<g2d_onMouseOver><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseOver>
		<onMouseOver public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseOver>
		<get_onMouseOver set="method" line="383"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseOver>
		<g2d_onMouseOut><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onMouseOut>
		<onMouseOut public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onMouseOut>
		<get_onMouseOut set="method" line="391"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></f></get_onMouseOut>
		<g2d_onRightMouseDown><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onRightMouseDown>
		<onRightMouseDown public="1"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onRightMouseDown>
		<g2d_onRightMouseUp><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onRightMouseUp>
		<onRightMouseUp public="1"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onRightMouseUp>
		<g2d_onRightMouseClick><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></g2d_onRightMouseClick>
		<onRightMouseClick public="1"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GNodeMouseSignal"/></c></onRightMouseClick>
		<g2d_mouseDownNode public="1"><c path="com.genome2d.node.GNode"/></g2d_mouseDownNode>
		<g2d_mouseOverNode public="1"><c path="com.genome2d.node.GNode"/></g2d_mouseOverNode>
		<g2d_rightMouseDownNode public="1"><c path="com.genome2d.node.GNode"/></g2d_rightMouseDownNode>
		<processContextMouseSignal public="1" set="method" line="410">
			<f a="p_captured:p_cameraX:p_cameraY:p_signal:p_camera">
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>*  Process context mouse signals</haxe_doc>
		</processContextMouseSignal>
		<dispatchNodeMouseSignal public="1" set="method" line="453">
			<f a="p_type:p_object:p_localX:p_localY:p_contextSignal">
				<c path="String"/>
				<c path="com.genome2d.node.GNode"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="com.genome2d.callbacks.GMouseSignal"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*  Dispatch node mouse signals</haxe_doc>
		</dispatchNodeMouseSignal>
		<g2d_renderable>
			<c path="com.genome2d.components.renderable.IRenderable"/>
			<haxe_doc>**************************************************************************************************
	 * 	COMPONENT CODE
	 **************************************************************************************************</haxe_doc>
		</g2d_renderable>
		<g2d_components><c path="Array"><c path="com.genome2d.components.GComponent"/></c></g2d_components>
		<g2d_numComponents><x path="Int"/></g2d_numComponents>
		<getComponent public="1" set="method" line="494">
			<f a="p_componentLookupClass">
				<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
				<c path="com.genome2d.components.GComponent"/>
			</f>
			<haxe_doc>* 	Get a components of specified type attached to this node
	 * 
	 * 	@param p_componentClass Component type that should be retrieved</haxe_doc>
		</getComponent>
		<getComponents public="1" set="method" line="504"><f a=""><c path="Array"><c path="com.genome2d.components.GComponent"/></c></f></getComponents>
		<hasComponent public="1" set="method" line="511">
			<f a="p_componentLookupClass">
				<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>*  Has components</haxe_doc>
		</hasComponent>
		<addComponent public="1" set="method" line="521">
			<f a="p_componentClass:?p_componentLookupClass" v=":null">
				<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
				<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
				<c path="com.genome2d.components.GComponent"/>
			</f>
			<haxe_doc>* 	Add a components of specified type to this node, node can always have only a single components of a specific class to avoid redundancy
	 * 
	 *	@param p_componentClass Component type that should be instanced and attached to this node</haxe_doc>
		</addComponent>
		<addComponentPrototype public="1" set="method" line="546"><f a="p_prototype">
	<c path="Xml"/>
	<c path="com.genome2d.components.GComponent"/>
</f></addComponentPrototype>
		<removeComponent public="1" set="method" line="570">
			<f a="p_componentLookupClass">
				<x path="Class"><c path="com.genome2d.components.GComponent"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* 	Remove components of specified type from this node
	 * 
	 * 	@param p_componentClass Component type that should be removed</haxe_doc>
		</removeComponent>
		<g2d_firstChild>
			<c path="com.genome2d.node.GNode"/>
			<haxe_doc>**************************************************************************************************
	 * 	CONTAINER CODE
	 **************************************************************************************************</haxe_doc>
		</g2d_firstChild>
		<firstChild public="1" get="accessor" set="null"><c path="com.genome2d.node.GNode"/></firstChild>
		<get_firstChild get="inline" set="null" line="593"><f a=""><c path="com.genome2d.node.GNode"/></f></get_firstChild>
		<g2d_lastChild><c path="com.genome2d.node.GNode"/></g2d_lastChild>
		<g2d_nextNode><c path="com.genome2d.node.GNode"/></g2d_nextNode>
		<nextNode public="1" get="accessor" set="null"><c path="com.genome2d.node.GNode"/></nextNode>
		<get_nextNode get="inline" set="null" line="603"><f a=""><c path="com.genome2d.node.GNode"/></f></get_nextNode>
		<g2d_previousNode><c path="com.genome2d.node.GNode"/></g2d_previousNode>
		<g2d_numChildren><x path="Int"/></g2d_numChildren>
		<numChildren public="1" get="accessor" set="null"><x path="Int"/></numChildren>
		<get_numChildren get="inline" set="null" line="612"><f a=""><x path="Int"/></f></get_numChildren>
		<g2d_onAddedToStage><c path="msignal.Signal0"/></g2d_onAddedToStage>
		<onAddedToStage public="1" get="accessor" set="null"><c path="msignal.Signal0"/></onAddedToStage>
		<get_onAddedToStage get="inline" set="null" line="620"><f a=""><c path="msignal.Signal0"/></f></get_onAddedToStage>
		<g2d_onRemovedFromStage><c path="msignal.Signal0"/></g2d_onRemovedFromStage>
		<onRemovedFromStage public="1" get="accessor" set="null"><c path="msignal.Signal0"/></onRemovedFromStage>
		<get_onRemovedFromStage get="inline" set="null" line="629"><f a=""><c path="msignal.Signal0"/></f></get_onRemovedFromStage>
		<addChild public="1" set="method" line="639">
			<f a="p_child:?p_before" v=":null">
				<c path="com.genome2d.node.GNode"/>
				<c path="com.genome2d.node.GNode"/>
				<c path="com.genome2d.node.GNode"/>
			</f>
			<haxe_doc>* 	Add a child node to this node
	 * 
	 * 	@param p_child node that should be added</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" line="671"><f a="p_child:p_index">
	<c path="com.genome2d.node.GNode"/>
	<x path="Int"/>
	<c path="com.genome2d.node.GNode"/>
</f></addChildAt>
		<getChildAt public="1" set="method" line="685"><f a="p_index">
	<x path="Int"/>
	<c path="com.genome2d.node.GNode"/>
</f></getChildAt>
		<getChildIndex public="1" set="method" line="694"><f a="p_child">
	<c path="com.genome2d.node.GNode"/>
	<x path="Int"/>
</f></getChildIndex>
		<setChildIndex public="1" set="method" line="704"><f a="p_child:p_index">
	<c path="com.genome2d.node.GNode"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<swapChildrenAt public="1" set="method" line="738"><f a="p_index1:p_index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<swapChildren public="1" set="method" line="742"><f a="p_child1:p_child2">
	<c path="com.genome2d.node.GNode"/>
	<c path="com.genome2d.node.GNode"/>
	<x path="Void"/>
</f></swapChildren>
		<putChildToFront public="1" set="method" line="779"><f a="p_child">
	<c path="com.genome2d.node.GNode"/>
	<x path="Void"/>
</f></putChildToFront>
		<putChildToBack public="1" set="method" line="792"><f a="p_child">
	<c path="com.genome2d.node.GNode"/>
	<x path="Void"/>
</f></putChildToBack>
		<removeChild public="1" set="method" line="810">
			<f a="p_child">
				<c path="com.genome2d.node.GNode"/>
				<c path="com.genome2d.node.GNode"/>
			</f>
			<haxe_doc>* 	Remove a child node from this node
	 * 
	 * 	@param p_child node that should be removed</haxe_doc>
		</removeChild>
		<removeChildAt public="1" set="method" line="834"><f a="p_index">
	<x path="Int"/>
	<c path="com.genome2d.node.GNode"/>
</f></removeChildAt>
		<disposeChildren public="1" set="method" line="849">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* 	This method will call dispose on all children of this node which will remove them</haxe_doc>
		</disposeChildren>
		<g2d_addedToStage get="inline" set="null" line="855"><f a=""><x path="Void"/></f></g2d_addedToStage>
		<g2d_removedFromStage get="inline" set="null" line="867"><f a=""><x path="Void"/></f></g2d_removedFromStage>
		<isOnStage public="1" set="method" line="882">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* 	Returns true if this node is attached to Genome2D render tree false otherwise</haxe_doc>
		</isOnStage>
		<getBounds public="1" set="method" line="892"><f a="?p_targetSpace:?p_bounds" v="null:null">
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></getBounds>
		<getCommonParent public="1" get="inline" set="null" line="950"><f a="p_node">
	<c path="com.genome2d.node.GNode"/>
	<c path="com.genome2d.node.GNode"/>
</f></getCommonParent>
		<sortChildrenOnUserData public="1" set="method" line="969"><f a="p_property:?p_ascending" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sortChildrenOnUserData>
		<sortChildrenOnY public="1" set="method" line="1052"><f a="?p_ascending" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></sortChildrenOnY>
		<toString public="1" set="method" line="1135"><f a=""><c path="String"/></f></toString>
		<g2d_matrixDirty><x path="Bool"/></g2d_matrixDirty>
		<g2d_transformDirty><x path="Bool"/></g2d_transformDirty>
		<g2d_colorDirty><x path="Bool"/></g2d_colorDirty>
		<useWorldSpace public="1">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</useWorldSpace>
		<useWorldColor public="1">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</useWorldColor>
		<visible public="1"><x path="Bool"/></visible>
		<g2d_worldX public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldX>
		<g2d_localX><x path="Float"/></g2d_localX>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</x>
		<get_x get="inline" set="null" line="1160"><f a=""><x path="Float"/></f></get_x>
		<set_x get="inline" set="null" line="1164"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<g2d_worldY public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldY>
		<g2d_localY><x path="Float"/></g2d_localY>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</y>
		<get_y get="inline" set="null" line="1175"><f a=""><x path="Float"/></f></get_y>
		<set_y get="inline" set="null" line="1179"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<hasUniformRotation public="1" get="inline" set="null" line="1184"><f a=""><x path="Bool"/></f></hasUniformRotation>
		<g2d_localUseMatrix><x path="Int"/></g2d_localUseMatrix>
		<g2d_useMatrix public="1" get="accessor" set="accessor"><x path="Int"/></g2d_useMatrix>
		<get_g2d_useMatrix get="inline" set="null" line="1190"><f a=""><x path="Int"/></f></get_g2d_useMatrix>
		<set_g2d_useMatrix get="inline" set="null" line="1193"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_g2d_useMatrix>
		<g2d_worldScaleX public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldScaleX>
		<g2d_localScaleX><x path="Float"/></g2d_localScaleX>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</scaleX>
		<get_scaleX get="inline" set="null" line="1205"><f a=""><x path="Float"/></f></get_scaleX>
		<set_scaleX get="inline" set="null" line="1209"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<g2d_worldScaleY public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldScaleY>
		<g2d_localScaleY><x path="Float"/></g2d_localScaleY>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</scaleY>
		<get_scaleY get="inline" set="null" line="1223"><f a=""><x path="Float"/></f></get_scaleY>
		<set_scaleY get="inline" set="null" line="1227"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<g2d_worldRotation public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldRotation>
		<g2d_localRotation><x path="Float"/></g2d_localRotation>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</rotation>
		<get_rotation get="inline" set="null" line="1241"><f a=""><x path="Float"/></f></get_rotation>
		<set_rotation get="inline" set="null" line="1245"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<g2d_worldRed public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldRed>
		<g2d_localRed><x path="Float"/></g2d_localRed>
		<red public="1" get="accessor" set="accessor"><x path="Float"/></red>
		<get_red get="inline" set="null" line="1259"><f a=""><x path="Float"/></f></get_red>
		<set_red get="inline" set="null" line="1263"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_red>
		<g2d_worldGreen public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldGreen>
		<g2d_localGreen><x path="Float"/></g2d_localGreen>
		<green public="1" get="accessor" set="accessor"><x path="Float"/></green>
		<get_green get="inline" set="null" line="1274"><f a=""><x path="Float"/></f></get_green>
		<set_green get="inline" set="null" line="1278"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_green>
		<g2d_worldBlue public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldBlue>
		<g2d_localBlue><x path="Float"/></g2d_localBlue>
		<blue public="1" get="accessor" set="accessor"><x path="Float"/></blue>
		<get_blue get="inline" set="null" line="1289"><f a=""><x path="Float"/></f></get_blue>
		<set_blue get="inline" set="null" line="1293"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blue>
		<g2d_worldAlpha public="1">
			<x path="Float"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</g2d_worldAlpha>
		<g2d_localAlpha><x path="Float"/></g2d_localAlpha>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="1304"><f a=""><x path="Float"/></f></get_alpha>
		<set_alpha get="inline" set="null" line="1308"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<color public="1" get="null" set="accessor"><x path="Int"/></color>
		<set_color get="inline" set="null" line="1316"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_color>
		<g2d_matrix><t path="com.genome2d.geom.GMatrix"/></g2d_matrix>
		<matrix public="1" get="accessor" set="null"><t path="com.genome2d.geom.GMatrix"/></matrix>
		<get_matrix get="inline" set="null" line="1327"><f a=""><t path="com.genome2d.geom.GMatrix"/></f></get_matrix>
		<getTransformationMatrix public="1" set="method" line="1351"><f a="p_targetSpace:?p_resultMatrix" v=":null">
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GMatrix"/>
	<t path="com.genome2d.geom.GMatrix"/>
</f></getTransformationMatrix>
		<localToGlobal public="1" set="method" line="1384"><f a="p_local:?p_result" v=":null">
	<t path="com.genome2d.geom.GPoint"/>
	<t path="com.genome2d.geom.GPoint"/>
	<t path="com.genome2d.geom.GPoint"/>
</f></localToGlobal>
		<globalToLocal public="1" set="method" line="1392"><f a="p_global:?p_result" v=":null">
	<t path="com.genome2d.geom.GPoint"/>
	<t path="com.genome2d.geom.GPoint"/>
	<t path="com.genome2d.geom.GPoint"/>
</f></globalToLocal>
		<setPosition public="1" set="method" line="1401"><f a="p_x:p_y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPosition>
		<setScale public="1" set="method" line="1407"><f a="p_scaleX:p_scaleY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setScale>
		<invalidate get="inline" set="null" line="1413"><f a="p_invalidateParentTransform:p_invalidateParentColor">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<texture public="1">
			<c path="com.genome2d.textures.GTexture"/>
			<haxe_doc>**************************************************************************************************
	 * 	RENDER
	 **************************************************************************************************</haxe_doc>
		</texture>
		<textureId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
			<haxe_doc>Texture id used by this sprite</haxe_doc>
		</textureId>
		<get_textureId get="inline" set="null" line="1455"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="1459"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<ignoreMatrix public="1"><x path="Bool"/></ignoreMatrix>
		<blendMode public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</blendMode>
		<render public="1" set="method" line="1476">
			<f a="p_parentTransformUpdate:p_parentColorUpdate:p_camera:p_renderAsMask:p_useMatrix">
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="com.genome2d.context.GCamera"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*</haxe_doc>
		</render>
		<hitTestPoint public="1" get="inline" set="null" line="1565">
			<f a="p_x:p_y:?p_pixelEnabled:?p_includeChildren" v="::false:true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>*   Check if a point is inside this node</haxe_doc>
		</hitTestPoint>
		<new public="1" set="method" line="215">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</new>
		<haxe_doc>Node class</haxe_doc>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.node.GNodePool" params="" file="Genome2D-Core/src/com/genome2d/node/GNodePool.hx">
		<g2d_first><c path="com.genome2d.node.GNode"/></g2d_first>
		<g2d_last><c path="com.genome2d.node.GNode"/></g2d_last>
		<g2d_prototype><c path="Xml"/></g2d_prototype>
		<g2d_maxCount><x path="Int"/></g2d_maxCount>
		<g2d_cachedCount><x path="Int"/></g2d_cachedCount>
		<getCachedCount public="1" set="method" line="26"><f a=""><x path="Int"/></f></getCachedCount>
		<getNext public="1" set="method" line="39"><f a=""><c path="com.genome2d.node.GNode"/></f></getNext>
		<g2d_putToFront set="method" line="51"><f a="p_node">
	<c path="com.genome2d.node.GNode"/>
	<x path="Void"/>
</f></g2d_putToFront>
		<g2d_putToBack set="method" line="64"><f a="p_node">
	<c path="com.genome2d.node.GNode"/>
	<x path="Void"/>
</f></g2d_putToBack>
		<g2d_createNew set="method" line="77"><f a="?p_precache" v="false">
	<x path="Bool"/>
	<c path="com.genome2d.node.GNode"/>
</f></g2d_createNew>
		<dispose public="1" set="method" line="98"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="30"><f a="p_prototype:?p_maxCount:?p_precacheCount" v=":0:0">
	<c path="Xml"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Node pool based on proto</haxe_doc>
		<meta>
			<m n=":allow"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.particles.GParticle" params="" file="Genome2D-Core/src/com/genome2d/particles/GParticle.hx">
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<overrideRender public="1"><x path="Bool"/></overrideRender>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<rotation public="1"><x path="Float"/></rotation>
		<red public="1"><x path="Float"/></red>
		<green public="1"><x path="Float"/></green>
		<blue public="1"><x path="Float"/></blue>
		<alpha public="1"><x path="Float"/></alpha>
		<velocityX public="1"><x path="Float"/></velocityX>
		<velocityY public="1"><x path="Float"/></velocityY>
		<totalEnergy public="1"><x path="Float"/></totalEnergy>
		<accumulatedEnergy public="1"><x path="Float"/></accumulatedEnergy>
		<accumulatedTime public="1"><x path="Float"/></accumulatedTime>
		<currentFrame public="1"><x path="Float"/></currentFrame>
		<overrideUvs public="1"><x path="Bool"/></overrideUvs>
		<uvX public="1"><x path="Float"/></uvX>
		<uvY public="1"><x path="Float"/></uvY>
		<uvScaleX public="1"><x path="Float"/></uvScaleX>
		<uvScaleY public="1"><x path="Float"/></uvScaleY>
		<die public="1"><x path="Bool"/></die>
		<g2d_next><c path="com.genome2d.particles.GParticle"/></g2d_next>
		<g2d_previous><c path="com.genome2d.particles.GParticle"/></g2d_previous>
		<g2d_nextAvailableInstance><c path="com.genome2d.particles.GParticle"/></g2d_nextAvailableInstance>
		<g2d_id><x path="Int"/></g2d_id>
		<g2d_pool><c path="com.genome2d.particles.GParticlePool"/></g2d_pool>
		<init public="1" set="method" line="68">
			<f a="p_particleSystem">
				<c path="com.genome2d.components.renderable.particles.GParticleSystem"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</init>
		<dispose public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</dispose>
		<render public="1" set="method" line="98"><f a="p_camera:p_particleSystem">
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.components.renderable.particles.GParticleSystem"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="63">
			<f a="p_pool">
				<c path="com.genome2d.particles.GParticlePool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</new>
		<haxe_doc>Particle element class used by `GParticlePool` and `GParticleSystem`</haxe_doc>
		<meta>
			<m n=":allow"><e>'???'</e></m>
			<m n=":allow"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.particles.GParticlePool" params="" file="Genome2D-Core/src/com/genome2d/particles/GParticlePool.hx">
		<g2d_defaultPool public="1" line="18" static="1"><c path="com.genome2d.particles.GParticlePool"/></g2d_defaultPool>
		<g2d_availableInstance public="1"><c path="com.genome2d.particles.GParticle"/></g2d_availableInstance>
		<g2d_count><x path="Int"/></g2d_count>
		<g2d_particleClass><x path="Class"><c path="com.genome2d.particles.GParticle"/></x></g2d_particleClass>
		<precache public="1" set="method" line="36">
			<f a="p_precacheCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Precache particles instances</haxe_doc>
		</precache>
		<g2d_get set="method" line="53"><f a=""><c path="com.genome2d.particles.GParticle"/></f></g2d_get>
		<new public="1" set="method" line="29">
			<f a="?p_particleClass" v="null">
				<x path="Class"><c path="com.genome2d.particles.GParticle"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Create new particles pool, only if you want to implement pooling of custom particles otherwise let Genome2D
        use the default precreated pool shared by all `GParticleSystem` instances to save memory</haxe_doc>
		</new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.particles.GSimpleParticle" params="" file="Genome2D-Core/src/com/genome2d/particles/GSimpleParticle.hx">
		<g2d_availableInstance static="1"><c path="com.genome2d.particles.GSimpleParticle"/></g2d_availableInstance>
		<g2d_instanceCount line="75" static="1"><x path="Int"/></g2d_instanceCount>
		<precache public="1" set="method" line="83" static="1">
			<f a="p_precacheCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</precache>
		<g2d_get set="method" line="100" static="1"><f a=""><c path="com.genome2d.particles.GSimpleParticle"/></f></g2d_get>
		<g2d_next><c path="com.genome2d.particles.GSimpleParticle"/></g2d_next>
		<g2d_previous><c path="com.genome2d.particles.GSimpleParticle"/></g2d_previous>
		<g2d_x><x path="Float"/></g2d_x>
		<g2d_y><x path="Float"/></g2d_y>
		<g2d_rotation><x path="Float"/></g2d_rotation>
		<g2d_scaleX><x path="Float"/></g2d_scaleX>
		<g2d_scaleY><x path="Float"/></g2d_scaleY>
		<g2d_red><x path="Float"/></g2d_red>
		<g2d_green><x path="Float"/></g2d_green>
		<g2d_blue><x path="Float"/></g2d_blue>
		<g2d_alpha><x path="Float"/></g2d_alpha>
		<g2d_velocityX><x path="Float"/></g2d_velocityX>
		<g2d_velocityY><x path="Float"/></g2d_velocityY>
		<g2d_accelerationX><x path="Float"/></g2d_accelerationX>
		<g2d_accelerationY><x path="Float"/></g2d_accelerationY>
		<g2d_energy><x path="Float"/></g2d_energy>
		<g2d_initialScale><x path="Float"/></g2d_initialScale>
		<g2d_endScale><x path="Float"/></g2d_endScale>
		<g2d_initialVelocityX><x path="Float"/></g2d_initialVelocityX>
		<g2d_initialVelocityY><x path="Float"/></g2d_initialVelocityY>
		<g2d_initialVelocityAngular><x path="Float"/></g2d_initialVelocityAngular>
		<g2d_initialAccelerationX><x path="Float"/></g2d_initialAccelerationX>
		<g2d_initialAccelerationY><x path="Float"/></g2d_initialAccelerationY>
		<g2d_initialRed><x path="Float"/></g2d_initialRed>
		<g2d_initialGreen><x path="Float"/></g2d_initialGreen>
		<g2d_initialBlue><x path="Float"/></g2d_initialBlue>
		<g2d_initialAlpha><x path="Float"/></g2d_initialAlpha>
		<g2d_endRed><x path="Float"/></g2d_endRed>
		<g2d_endGreen><x path="Float"/></g2d_endGreen>
		<g2d_endBlue><x path="Float"/></g2d_endBlue>
		<g2d_endAlpha><x path="Float"/></g2d_endAlpha>
		<g2d_redDif><x path="Float"/></g2d_redDif>
		<g2d_greenDif><x path="Float"/></g2d_greenDif>
		<g2d_blueDif><x path="Float"/></g2d_blueDif>
		<g2d_alphaDif><x path="Float"/></g2d_alphaDif>
		<g2d_scaleDif><x path="Float"/></g2d_scaleDif>
		<g2d_accumulatedEnergy><x path="Float"/></g2d_accumulatedEnergy>
		<g2d_nextInstance><c path="com.genome2d.particles.GSimpleParticle"/></g2d_nextInstance>
		<g2d_id><x path="Int"/></g2d_id>
		<g2d_texture><c path="com.genome2d.textures.GTexture"/></g2d_texture>
		<g2d_init set="method" line="112"><f a="p_emitter:?p_invalidate" v=":true">
	<c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></g2d_init>
		<g2d_update set="method" line="197"><f a="p_emitter:p_deltaTime">
	<c path="com.genome2d.components.renderable.particles.GSimpleParticleSystem"/>
	<x path="Float"/>
	<x path="Void"/>
</f></g2d_update>
		<g2d_dispose set="method" line="236"><f a=""><x path="Void"/></f></g2d_dispose>
		<new public="1" set="method" line="78">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.particles.IGAffector" params="" file="Genome2D-Core/src/com/genome2d/particles/IGAffector.hx" interface="1">
		<update public="1" set="method">
			<f a="p_system:p_particle:p_deltaTime">
				<c path="com.genome2d.components.renderable.particles.GParticleSystem"/>
				<c path="com.genome2d.particles.GParticle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update `p_particle` inside `p_system` by `p_deltaTime`</haxe_doc>
		</update>
		<haxe_doc>Interface providing method for `GParticleSystem` particles update</haxe_doc>
	</class>
	<class path="com.genome2d.particles.IGInitializer" params="" file="Genome2D-Core/src/com/genome2d/particles/IGInitializer.hx" interface="1">
		<initialize public="1" set="method">
			<f a="p_system:p_particle">
				<c path="com.genome2d.components.renderable.particles.GParticleSystem"/>
				<c path="com.genome2d.particles.GParticle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initialize `p_particle` inside `p_system`</haxe_doc>
		</initialize>
		<haxe_doc>Interface providing method for `GParticleSystem` particles initialization</haxe_doc>
	</class>
	<class path="com.genome2d.postprocess.GPostProcess" params="" file="Genome2D-Core/src/com/genome2d/postprocess/GPostProcess.hx">
		<g2d_count line="43" static="1"><x path="Int"/></g2d_count>
		<g2d_passes><x path="Int"/></g2d_passes>
		<getPassCount public="1" set="method" line="27"><f a=""><x path="Int"/></f></getPassCount>
		<g2d_passFilters><c path="Array"><c path="com.genome2d.context.filters.GFilter"/></c></g2d_passFilters>
		<g2d_passTextures><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></g2d_passTextures>
		<g2d_definedBounds><t path="com.genome2d.geom.GRectangle"/></g2d_definedBounds>
		<g2d_activeBounds><t path="com.genome2d.geom.GRectangle"/></g2d_activeBounds>
		<g2d_leftMargin><x path="Int"/></g2d_leftMargin>
		<g2d_rightMargin><x path="Int"/></g2d_rightMargin>
		<g2d_topMargin><x path="Int"/></g2d_topMargin>
		<g2d_bottomMargin><x path="Int"/></g2d_bottomMargin>
		<g2d_matrix><t path="com.genome2d.geom.GMatrix3D"/></g2d_matrix>
		<g2d_id><c path="String"/></g2d_id>
		<setBounds public="1" set="method" line="60"><f a="p_bounds">
	<t path="com.genome2d.geom.GRectangle"/>
	<x path="Void"/>
</f></setBounds>
		<setMargins public="1" set="method" line="64"><f a="?p_leftMargin:?p_rightMargin:?p_topMargin:?p_bottomMargin" v="0:0:0:0">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setMargins>
		<render public="1" set="method" line="71"><f a="p_parentTransformUpdate:p_parentColorUpdate:p_camera:p_node:?p_bounds:?p_source:?p_target" v="::::null:null:null">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.textures.GTexture"/>
	<x path="Void"/>
</f></render>
		<getPassTexture public="1" set="method" line="109"><f a="p_pass">
	<x path="Int"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></getPassTexture>
		<getPassFilter public="1" set="method" line="113"><f a="p_pass">
	<x path="Int"/>
	<c path="com.genome2d.context.filters.GFilter"/>
</f></getPassFilter>
		<updatePassTextures set="method" line="117"><f a="p_bounds">
	<t path="com.genome2d.geom.GRectangle"/>
	<x path="Void"/>
</f></updatePassTextures>
		<createPassTextures set="method" line="133"><f a=""><x path="Void"/></f></createPassTextures>
		<dispose public="1" set="method" line="143"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="45"><f a="?p_passes:?p_filters" v="1:null">
	<x path="Int"/>
	<c path="Array"><c path="com.genome2d.context.filters.GFilter"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.postprocess.GBloomPP" params="" file="Genome2D-Core/src/com/genome2d/postprocess/GBloomPP.hx">
		<extends path="com.genome2d.postprocess.GPostProcess"/>
		<g2d_blur><c path="com.genome2d.postprocess.GBlurPP"/></g2d_blur>
		<g2d_bright><c path="com.genome2d.postprocess.GFilterPP"/></g2d_bright>
		<g2d_bloomFilter><c path="com.genome2d.context.filters.GBloomPassFilter"/></g2d_bloomFilter>
		<render public="1" set="method" line="40" override="1"><f a="p_parentTransformUpdate:p_parentColorUpdate:p_camera:p_node:?p_bounds:?p_source:?p_target" v="::::null:null:null">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.textures.GTexture"/>
	<x path="Void"/>
</f></render>
		<dispose public="1" set="method" line="60" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="26"><f a="?p_blurX:?p_blurY:?p_blurPasses:?p_brightTreshold" v="2:2:1:.2f">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.postprocess.GBlurPP" params="" file="Genome2D-Core/src/com/genome2d/postprocess/GBlurPP.hx">
		<extends path="com.genome2d.postprocess.GPostProcess"/>
		<g2d_invalidate><x path="Bool"/></g2d_invalidate>
		<g2d_colorize><x path="Bool"/></g2d_colorize>
		<colorize public="1" get="accessor" set="accessor"><x path="Bool"/></colorize>
		<get_colorize get="inline" set="null" line="26"><f a=""><x path="Bool"/></f></get_colorize>
		<set_colorize get="inline" set="null" line="30"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorize>
		<g2d_red><x path="Float"/></g2d_red>
		<red public="1" get="accessor" set="accessor"><x path="Float"/></red>
		<get_red get="inline" set="null" line="39"><f a=""><x path="Float"/></f></get_red>
		<set_red get="inline" set="null" line="43"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_red>
		<g2d_green><x path="Float"/></g2d_green>
		<green public="1" get="accessor" set="accessor"><x path="Float"/></green>
		<get_green get="inline" set="null" line="52"><f a=""><x path="Float"/></f></get_green>
		<set_green get="inline" set="null" line="56"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_green>
		<g2d_blue><x path="Float"/></g2d_blue>
		<blue public="1" get="accessor" set="accessor"><x path="Float"/></blue>
		<get_blue get="inline" set="null" line="65"><f a=""><x path="Float"/></f></get_blue>
		<set_blue get="inline" set="null" line="69"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blue>
		<g2d_alpha><x path="Float"/></g2d_alpha>
		<alpha public="1" get="accessor" set="accessor"><x path="Float"/></alpha>
		<get_alpha get="inline" set="null" line="78"><f a=""><x path="Float"/></f></get_alpha>
		<set_alpha get="inline" set="null" line="82"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<passes public="1" get="accessor" set="null"><x path="Int"/></passes>
		<get_passes get="inline" set="null" line="91"><f a=""><x path="Int"/></f></get_passes>
		<g2d_blurX><x path="Float"/></g2d_blurX>
		<blurX public="1" get="accessor" set="accessor"><x path="Int"/></blurX>
		<get_blurX get="inline" set="null" line="99"><f a=""><x path="Int"/></f></get_blurX>
		<set_blurX get="inline" set="null" line="103"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_blurX>
		<g2d_blurY><x path="Float"/></g2d_blurY>
		<blurY public="1" get="accessor" set="accessor"><x path="Int"/></blurY>
		<get_blurY get="inline" set="null" line="112"><f a=""><x path="Int"/></f></get_blurY>
		<set_blurY get="inline" set="null" line="116"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_blurY>
		<render public="1" set="method" line="142" override="1"><f a="p_parentTransformUpdate:p_parentColorUpdate:p_camera:p_node:?p_bounds:?p_source:?p_target" v="::::null:null:null">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.textures.GTexture"/>
	<x path="Void"/>
</f></render>
		<invalidateBlurFilters set="method" line="148"><f a=""><x path="Void"/></f></invalidateBlurFilters>
		<new public="1" set="method" line="122"><f a="p_blurX:p_blurY:?p_passes" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.postprocess.GFilterPP" params="" file="Genome2D-Core/src/com/genome2d/postprocess/GFilterPP.hx">
		<extends path="com.genome2d.postprocess.GPostProcess"/>
		<new public="1" set="method" line="15"><f a="p_filters">
	<c path="Array"><c path="com.genome2d.context.filters.GFilter"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.postprocess.GHDRPP" params="" file="Genome2D-Core/src/com/genome2d/postprocess/GHDRPP.hx">
		<extends path="com.genome2d.postprocess.GPostProcess"/>
		<g2d_empty><c path="com.genome2d.postprocess.GFilterPP"/></g2d_empty>
		<g2d_blur><c path="com.genome2d.postprocess.GBlurPP"/></g2d_blur>
		<g2d_HDRPassFilter><c path="com.genome2d.context.filters.GHDRPassFilter"/></g2d_HDRPassFilter>
		<blurX public="1" get="accessor" set="accessor"><x path="Int"/></blurX>
		<get_blurX public="1" set="method" line="28"><f a=""><x path="Int"/></f></get_blurX>
		<set_blurX public="1" set="method" line="32"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_blurX>
		<blurY public="1" get="accessor" set="accessor"><x path="Int"/></blurY>
		<get_blurY public="1" set="method" line="42"><f a=""><x path="Int"/></f></get_blurY>
		<set_blurY public="1" set="method" line="46"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_blurY>
		<saturation public="1" get="accessor" set="accessor"><x path="Float"/></saturation>
		<get_saturation public="1" set="method" line="56"><f a=""><x path="Float"/></f></get_saturation>
		<set_saturation public="1" set="method" line="60"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_saturation>
		<render public="1" set="method" line="79" override="1"><f a="p_parentTransformUpdate:p_parentColorUpdate:p_camera:p_node:?p_bounds:?p_source:?p_target" v="::::null:null:null">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="com.genome2d.context.GCamera"/>
	<c path="com.genome2d.node.GNode"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GTexture"/>
	<c path="com.genome2d.textures.GTexture"/>
	<x path="Void"/>
</f></render>
		<dispose public="1" set="method" line="99" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="65"><f a="?p_blurX:?p_blurY:?p_blurPasses:?p_saturation" v="3:3:2:1.3f">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.proto.GPrototypeFactory" params="" file="Genome2D-Core/src/com/genome2d/proto/GPrototypeFactory.hx">
		<g2d_helper static="1"><c path="com.genome2d.proto.GPrototypeHelper"/></g2d_helper>
		<g2d_lookupsInitialized line="11" static="1"><x path="Bool"/></g2d_lookupsInitialized>
		<g2d_lookups static="1"><x path="Map">
	<c path="String"/>
	<x path="Class"><c path="com.genome2d.proto.IGPrototypable"/></x>
</x></g2d_lookups>
		<initializePrototypes public="1" set="method" line="14" static="1"><f a=""><x path="Void"/></f></initializePrototypes>
		<getPrototypeClass public="1" set="method" line="26" static="1"><f a="p_prototypeName">
	<c path="String"/>
	<x path="Class"><c path="com.genome2d.proto.IGPrototypable"/></x>
</f></getPrototypeClass>
		<createPrototype public="1" set="method" line="30" static="1"><f a="p_prototype">
	<d/>
	<c path="com.genome2d.proto.IGPrototypable"/>
</f></createPrototype>
		<createEmptyPrototype public="1" set="method" line="51" static="1"><f a="p_prototypeName">
	<c path="String"/>
	<c path="com.genome2d.proto.IGPrototypable"/>
</f></createEmptyPrototype>
		<g2d_getPrototype public="1" set="method" line="63" static="1"><f a="p_instance:p_prototypeXml:p_prototypeName:p_propertyNames:p_propertyTypes">
	<c path="com.genome2d.proto.IGPrototypable"/>
	<c path="Xml"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Xml"/>
</f></g2d_getPrototype>
		<g2d_initPrototype public="1" set="method" line="85" static="1"><f a="p_instance:p_prototypeXml:p_propertyNames:p_propertyTypes">
	<c path="com.genome2d.proto.IGPrototypable"/>
	<c path="Xml"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></g2d_initPrototype>
	</class>
	<class path="com.genome2d.proto.GPrototypeHelper" params="" file="Genome2D-Core/src/com/genome2d/proto/GPrototypeHelper.hx" extern="1"/>
	<class path="com.genome2d.callbacks.GKeyboardSignal" params="" file="Genome2D-ContextFlash/src/com/genome2d/signals/GKeyboardSignal.hx">
		<type public="1"><c path="String"/></type>
		<keyCode public="1"><x path="Int"/></keyCode>
		<new public="1" set="method" line="15"><f a="p_type:p_keyCode">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.callbacks.GKeyboardSignalType" params="" file="Genome2D-ContextFlash/src/com/genome2d/signals/GKeyboardSignalType.hx">
		<KEY_DOWN public="1" get="inline" set="null" line="12" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" get="inline" set="null" line="13" static="1"><c path="String"/></KEY_UP>
		<fromNative public="1" get="inline" set="null" line="15" static="1"><f a="p_nativeType">
	<c path="String"/>
	<c path="String"/>
</f></fromNative>
	</class>
	<class path="com.genome2d.callbacks.GMouseSignal" params="" file="Genome2D-ContextFlash/src/com/genome2d/signals/GMouseSignal.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<buttonDown public="1"><x path="Bool"/></buttonDown>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<altKey public="1"><x path="Bool"/></altKey>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<type public="1"><c path="String"/></type>
		<nativeCaptured public="1"><x path="Bool"/></nativeCaptured>
		<new public="1" set="method" line="21"><f a="p_type:p_x:p_y:p_nativeCaptured">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.callbacks.GMouseSignalType" params="" file="Genome2D-ContextFlash/src/com/genome2d/signals/GMouseSignalType.hx">
		<MOUSE_DOWN public="1" get="inline" set="null" line="12" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" get="inline" set="null" line="13" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_UP public="1" get="inline" set="null" line="14" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_OVER public="1" get="inline" set="null" line="15" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_OUT public="1" get="inline" set="null" line="16" static="1"><c path="String"/></MOUSE_OUT>
		<RIGHT_MOUSE_DOWN public="1" get="inline" set="null" line="17" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" get="inline" set="null" line="18" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<fromNative public="1" get="inline" set="null" line="20" static="1"><f a="p_nativeType">
	<c path="String"/>
	<c path="String"/>
</f></fromNative>
	</class>
	<class path="com.genome2d.callbacks.GNodeMouseSignal" params="" file="Genome2D-Core/src/com/genome2d/signals/GNodeMouseSignal.hx">
		<target public="1"><c path="com.genome2d.node.GNode"/></target>
		<dispatcher public="1"><c path="com.genome2d.node.GNode"/></dispatcher>
		<type public="1"><c path="String"/></type>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<g2d_contextSignal><c path="com.genome2d.callbacks.GMouseSignal"/></g2d_contextSignal>
		<contextSignal public="1" get="accessor" set="null">
			<c path="com.genome2d.callbacks.GMouseSignal"/>
			<meta><m n="prototype"/></meta>
		</contextSignal>
		<get_contextSignal public="1" set="method" line="28"><f a=""><c path="com.genome2d.callbacks.GMouseSignal"/></f></get_contextSignal>
		<new public="1" set="method" line="32"><f a="p_type:p_target:p_dispatcher:p_localX:p_localY:p_contextSignal">
	<c path="String"/>
	<c path="com.genome2d.node.GNode"/>
	<c path="com.genome2d.node.GNode"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="com.genome2d.callbacks.GUIMouseSignal" params="" file="Genome2D-Core/src/com/genome2d/signals/GUIMouseSignal.hx">
		<target public="1"><c path="com.genome2d.ui.element.GUIElement"/></target>
		<dispatcher public="1"><c path="com.genome2d.ui.element.GUIElement"/></dispatcher>
		<type public="1"><c path="String"/></type>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<g2d_contextSignal><c path="com.genome2d.callbacks.GMouseSignal"/></g2d_contextSignal>
		<contextSignal public="1" get="accessor" set="null">
			<c path="com.genome2d.callbacks.GMouseSignal"/>
			<meta><m n="prototype"/></meta>
		</contextSignal>
		<get_contextSignal public="1" set="method" line="28"><f a=""><c path="com.genome2d.callbacks.GMouseSignal"/></f></get_contextSignal>
		<new public="1" set="method" line="32"><f a="p_type:p_target:p_dispatcher:p_localX:p_localY:p_contextSignal">
	<c path="String"/>
	<c path="com.genome2d.ui.element.GUIElement"/>
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="com.genome2d.text.GTextRenderer" params="" file="Genome2D-ContextCommon/src/com/genome2d/text/GTextRenderer.hx">
		<g2d_context><t path="com.genome2d.context.IContext"/></g2d_context>
		<blendMode public="1"><x path="Int"/></blendMode>
		<g2d_dirty><x path="Bool"/></g2d_dirty>
		<isDirty public="1" get="inline" set="null" line="13"><f a=""><x path="Bool"/></f></isDirty>
		<g2d_tracking><x path="Float"/></g2d_tracking>
		<tracking public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</tracking>
		<get_tracking get="inline" set="null" line="25"><f a=""><x path="Float"/></f></get_tracking>
		<set_tracking get="inline" set="null" line="29"><f a="p_tracking">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tracking>
		<g2d_lineSpace><x path="Float"/></g2d_lineSpace>
		<lineSpace public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</lineSpace>
		<get_lineSpace get="inline" set="null" line="43"><f a=""><x path="Float"/></f></get_lineSpace>
		<set_lineSpace get="inline" set="null" line="47"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_lineSpace>
		<g2d_vAlign><x path="Int"/></g2d_vAlign>
		<vAlign public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</vAlign>
		<get_vAlign get="inline" set="null" line="57"><f a=""><x path="Int"/></f></get_vAlign>
		<set_vAlign get="inline" set="null" line="61"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_vAlign>
		<g2d_hAlign><x path="Int"/></g2d_hAlign>
		<hAlign public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</hAlign>
		<get_hAlign get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_hAlign>
		<set_hAlign get="inline" set="null" line="75"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_hAlign>
		<g2d_text><c path="String"/></g2d_text>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</text>
		<get_text get="inline" set="null" line="88"><f a=""><c path="String"/></f></get_text>
		<set_text get="inline" set="null" line="92"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<g2d_autoSize><x path="Bool"/></g2d_autoSize>
		<autoSize public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</autoSize>
		<get_autoSize get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize get="inline" set="null" line="109"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<g2d_width><x path="Float"/></g2d_width>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</width>
		<get_width get="inline" set="null" line="122"><f a=""><x path="Float"/></f></get_width>
		<set_width get="inline" set="null" line="127"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<g2d_height><x path="Float"/></g2d_height>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</height>
		<get_height get="inline" set="null" line="142"><f a=""><x path="Float"/></f></get_height>
		<set_height get="inline" set="null" line="148"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<render public="1" set="method" line="160"><f a="p_x:p_y:p_scaleX:p_scaleY:p_rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></render>
		<invalidate public="1" set="method" line="163"><f a=""><x path="Void"/></f></invalidate>
		<new public="1" set="method" line="156"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.text.GTextureTextRenderer" params="" file="Genome2D-Core/src/com/genome2d/text/GTextureTextRenderer.hx">
		<extends path="com.genome2d.text.GTextRenderer"/>
		<g2d_fontScale><x path="Float"/></g2d_fontScale>
		<fontScale public="1" get="accessor" set="accessor"><x path="Float"/></fontScale>
		<get_fontScale get="inline" set="null" line="15"><f a=""><x path="Float"/></f></get_fontScale>
		<set_fontScale get="inline" set="null" line="19"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fontScale>
		<g2d_textureAtlas><c path="com.genome2d.textures.GTextureFontAtlas"/></g2d_textureAtlas>
		<textureAtlas public="1" get="accessor" set="accessor"><c path="com.genome2d.textures.GTextureFontAtlas"/></textureAtlas>
		<get_textureAtlas get="inline" set="null" line="29"><f a=""><c path="com.genome2d.textures.GTextureFontAtlas"/></f></get_textureAtlas>
		<set_textureAtlas get="inline" set="null" line="33"><f a="p_value">
	<c path="com.genome2d.textures.GTextureFontAtlas"/>
	<c path="com.genome2d.textures.GTextureFontAtlas"/>
</f></set_textureAtlas>
		<textureAtlasId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</textureAtlasId>
		<get_textureAtlasId get="inline" set="null" line="45"><f a=""><c path="String"/></f></get_textureAtlasId>
		<set_textureAtlasId get="inline" set="null" line="49"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureAtlasId>
		<g2d_chars><c path="Array"><c path="com.genome2d.text.GTextureChar"/></c></g2d_chars>
		<render public="1" set="method" line="56" override="1"><f a="p_x:p_y:p_scaleX:p_scaleY:p_rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></render>
		<invalidate public="1" set="method" line="83" override="1"><f a=""><x path="Void"/></f></invalidate>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.text.GTextureChar" params="" file="Genome2D-Core/src/com/genome2d/text/GTextureTextRenderer.hx" module="com.genome2d.text.GTextureTextRenderer">
		<g2d_code><x path="Int"/></g2d_code>
		<g2d_texture><c path="com.genome2d.textures.GCharTexture"/></g2d_texture>
		<g2d_x><x path="Float"/></g2d_x>
		<g2d_y><x path="Float"/></g2d_y>
		<g2d_visible><x path="Bool"/></g2d_visible>
		<new public="1" set="method" line="231"><f a=""><x path="Void"/></f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.textures.GContextTexture" params="" file="Genome2D-ContextFlash/src/com/genome2d/textures/GContextTexture.hx">
		<g2d_instanceCount line="239" static="1"><x path="Int"/></g2d_instanceCount>
		<g2d_dirty><x path="Bool"/></g2d_dirty>
		<isDirty public="1" get="inline" set="null" line="36"><f a=""><x path="Bool"/></f></isDirty>
		<g2d_id><c path="String"/></g2d_id>
		<id public="1" get="accessor" set="null"><c path="String"/></id>
		<get_id get="inline" set="null" line="44"><f a=""><c path="String"/></f></get_id>
		<set_id get="inline" set="null" line="48"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<width public="1" get="accessor" set="null"><x path="Float"/></width>
		<get_width get="inline" set="null" line="58"><f a=""><x path="Float"/></f></get_width>
		<height public="1" get="accessor" set="null"><x path="Float"/></height>
		<get_height get="inline" set="null" line="65"><f a=""><x path="Float"/></f></get_height>
		<g2d_gpuWidth><x path="Int"/></g2d_gpuWidth>
		<gpuWidth public="1" get="accessor" set="null"><x path="Int"/></gpuWidth>
		<get_gpuWidth get="inline" set="null" line="73"><f a=""><x path="Int"/></f></get_gpuWidth>
		<g2d_gpuHeight><x path="Int"/></g2d_gpuHeight>
		<gpuHeight public="1" get="accessor" set="null"><x path="Int"/></gpuHeight>
		<get_gpuHeight get="inline" set="null" line="81"><f a=""><x path="Int"/></f></get_gpuHeight>
		<g2d_scaleFactor><x path="Float"/></g2d_scaleFactor>
		<scaleFactor public="1" get="accessor" set="accessor"><x path="Float"/></scaleFactor>
		<get_scaleFactor get="inline" set="null" line="89"><f a=""><x path="Float"/></f></get_scaleFactor>
		<set_scaleFactor get="inline" set="null" line="93"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleFactor>
		<g2d_filteringType><x path="Int"/></g2d_filteringType>
		<filteringType public="1" get="accessor" set="accessor"><x path="Int"/></filteringType>
		<get_filteringType get="inline" set="null" line="102"><f a=""><x path="Int"/></f></get_filteringType>
		<set_filteringType get="inline" set="null" line="106"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_filteringType>
		<g2d_sourceType><x path="Int"/></g2d_sourceType>
		<sourceType public="1" get="accessor" set="null"><x path="Int"/></sourceType>
		<get_sourceType public="1" set="method" line="114"><f a=""><x path="Int"/></f></get_sourceType>
		<g2d_source><t path="flash.utils.Object"/></g2d_source>
		<source public="1" get="accessor" set="accessor">
			<t path="flash.utils.Object"/>
			<haxe_doc>Get the native source of this texture</haxe_doc>
		</source>
		<get_source get="inline" set="null" line="125"><f a=""><t path="flash.utils.Object"/></f></get_source>
		<set_source get="inline" set="null" line="129"><f a="p_value">
	<t path="flash.utils.Object"/>
	<t path="flash.utils.Object"/>
</f></set_source>
		<g2d_format><c path="String"/></g2d_format>
		<format public="1" get="accessor" set="accessor"><c path="String"/></format>
		<get_format get="inline" set="null" line="188"><f a=""><c path="String"/></f></get_format>
		<set_format get="inline" set="null" line="192"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_format>
		<g2d_u><x path="Float"/></g2d_u>
		<g2d_v><x path="Float"/></g2d_v>
		<g2d_uScale><x path="Float"/></g2d_uScale>
		<g2d_vScale><x path="Float"/></g2d_vScale>
		<g2d_repeatable><x path="Bool"/></g2d_repeatable>
		<repeatable public="1" get="accessor" set="accessor"><x path="Bool"/></repeatable>
		<get_repeatable get="inline" set="null" line="208"><f a=""><x path="Bool"/></f></get_repeatable>
		<set_repeatable get="inline" set="null" line="212"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_repeatable>
		<g2d_nativeTexture><c path="flash.display3D.textures.TextureBase"/></g2d_nativeTexture>
		<nativeTexture public="1" get="accessor" set="null"><c path="flash.display3D.textures.TextureBase"/></nativeTexture>
		<get_nativeTexture get="inline" set="null" line="222"><f a=""><c path="flash.display3D.textures.TextureBase"/></f></get_nativeTexture>
		<g2d_atfType><c path="String"/></g2d_atfType>
		<premultiplied public="1"><x path="Bool"/></premultiplied>
		<g2d_initializedRenderTarget><x path="Bool"/></g2d_initializedRenderTarget>
		<g2d_sourceBitmapData><c path="flash.display.BitmapData"/></g2d_sourceBitmapData>
		<g2d_sourceByteArray><c path="flash.utils.ByteArray"/></g2d_sourceByteArray>
		<g2d_sourceAtlas><c path="com.genome2d.textures.GTextureAtlas"/></g2d_sourceAtlas>
		<g2d_contextId><x path="Int"/></g2d_contextId>
		<g2d_width><x path="Int"/></g2d_width>
		<g2d_height><x path="Int"/></g2d_height>
		<hasSameGPUTexture public="1" set="method" line="261"><f a="p_texture">
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Bool"/>
</f></hasSameGPUTexture>
		<usesRectangle public="1" get="inline" set="null" line="265"><f a=""><x path="Bool"/></f></usesRectangle>
		<g2d_init set="method" line="269"><f a=""><x path="Void"/></f></g2d_init>
		<needClearAsRenderTarget public="1" set="method" line="285"><f a="p_clear">
	<x path="Bool"/>
	<x path="Bool"/>
</f></needClearAsRenderTarget>
		<invalidateNativeTexture public="1" set="method" line="293"><f a="p_reinitialize">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidateNativeTexture>
		<g2d_uploadFromBitmapData set="method" line="379"><f a="p_bitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></g2d_uploadFromBitmapData>
		<g2d_uploadFromCompressedByteArray set="method" line="386"><f a="p_data:p_byteArrayOffset:?p_asyncBoolean" v="::false">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></g2d_uploadFromCompressedByteArray>
		<g2d_uploadFromByteArray set="method" line="392"><f a="p_data:p_byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></g2d_uploadFromByteArray>
		<dispose public="1" set="method" line="399"><f a=""><x path="Void"/></f></dispose>
		<getAlphaAtUV public="1" set="method" line="410"><f a="p_u:p_v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getAlphaAtUV>
		<new public="1" set="method" line="241"><f a="p_id:p_source">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.textures.GTexture" params="" file="Genome2D-Core/src/com/genome2d/textures/GTexture.hx">
		<extends path="com.genome2d.textures.GContextTexture"/>
		<g2d_subId public="1"><c path="String"/></g2d_subId>
		<g2d_pivotX><x path="Float"/></g2d_pivotX>
		<pivotX public="1" get="accessor" set="accessor"><x path="Float"/></pivotX>
		<get_pivotX get="inline" set="null" line="26"><f a=""><x path="Float"/></f></get_pivotX>
		<set_pivotX get="inline" set="null" line="30"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pivotX>
		<g2d_pivotY><x path="Float"/></g2d_pivotY>
		<pivotY public="1" get="accessor" set="accessor"><x path="Float"/></pivotY>
		<get_pivotY get="inline" set="null" line="38"><f a=""><x path="Float"/></f></get_pivotY>
		<set_pivotY get="inline" set="null" line="42"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pivotY>
		<g2d_frame><t path="com.genome2d.geom.GRectangle"/></g2d_frame>
		<g2d_region><t path="com.genome2d.geom.GRectangle"/></g2d_region>
		<region public="1" get="accessor" set="accessor"><t path="com.genome2d.geom.GRectangle"/></region>
		<get_region get="inline" set="null" line="52"><f a=""><t path="com.genome2d.geom.GRectangle"/></f></get_region>
		<set_region get="inline" set="null" line="56"><f a="p_value">
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
</f></set_region>
		<g2d_invalidateUV set="method" line="69"><f a=""><x path="Void"/></f></g2d_invalidateUV>
		<invalidateNativeTexture public="1" set="method" line="82" override="1"><f a="p_reinitialize">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidateNativeTexture>
		<new public="1" set="method" line="88"><f a="p_id:p_source">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.textures.GCharTexture" params="" file="Genome2D-Core/src/com/genome2d/textures/GCharTexture.hx">
		<extends path="com.genome2d.textures.GTexture"/>
		<g2d_xoffset><x path="Float"/></g2d_xoffset>
		<xoffset public="1" get="accessor" set="accessor"><x path="Float"/></xoffset>
		<get_xoffset get="inline" set="null" line="19"><f a=""><x path="Float"/></f></get_xoffset>
		<set_xoffset get="inline" set="null" line="23"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xoffset>
		<g2d_yoffset><x path="Float"/></g2d_yoffset>
		<yoffset public="1" get="accessor" set="accessor"><x path="Float"/></yoffset>
		<get_yoffset get="inline" set="null" line="32"><f a=""><x path="Float"/></f></get_yoffset>
		<set_yoffset get="inline" set="null" line="36"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_yoffset>
		<g2d_xadvance><x path="Float"/></g2d_xadvance>
		<xadvance public="1" get="accessor" set="accessor"><x path="Float"/></xadvance>
		<get_xadvance get="inline" set="null" line="45"><f a=""><x path="Float"/></f></get_xadvance>
		<set_xadvance get="inline" set="null" line="49"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xadvance>
		<new public="1" set="method" line="14"><f a="p_id:p_source">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.textures.GTextureAtlas" params="" file="Genome2D-Core/src/com/genome2d/textures/GTextureAtlas.hx">
		<extends path="com.genome2d.textures.GContextTexture"/>
		<g2d_subTextures><x path="Map">
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</x></g2d_subTextures>
		<getSubTextureById public="1" set="method" line="23"><f a="p_subId">
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></getSubTextureById>
		<getSubTextures public="1" set="method" line="26"><f a="?p_regExp" v="null">
	<c path="EReg"/>
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
</f></getSubTextures>
		<invalidateNativeTexture public="1" set="method" line="49" override="1"><f a="p_reinitialize">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidateNativeTexture>
		<addSubTexture public="1" set="method" line="57"><f a="p_subId:p_region:p_frame">
	<c path="String"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></addSubTexture>
		<removeSubTexture public="1" set="method" line="79"><f a="p_subId">
	<c path="String"/>
	<x path="Void"/>
</f></removeSubTexture>
		<g2d_disposeSubTextures set="method" line="84"><f a=""><x path="Void"/></f></g2d_disposeSubTextures>
		<dispose public="1" set="method" line="94" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* 	Dispose this atlas and all its sub textures</haxe_doc>
		</dispose>
		<new public="1" set="method" line="41"><f a="p_id:p_source">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.textures.GTextureFilteringType" params="" file="Genome2D-ContextCommon/src/com/genome2d/textures/GTextureFilteringType.hx">
		<NEAREST public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></NEAREST>
		<LINEAR public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></LINEAR>
		<haxe_doc>Texture filtering types</haxe_doc>
	</class>
	<class path="com.genome2d.textures.GTextureFontAtlas" params="" file="Genome2D-Core/src/com/genome2d/textures/GTextureFontAtlas.hx">
		<extends path="com.genome2d.textures.GTextureAtlas"/>
		<lineHeight public="1"><x path="Int"/></lineHeight>
		<g2d_kerning public="1"><x path="Map">
	<x path="Int"/>
	<x path="Map">
		<x path="Int"/>
		<x path="Int"/>
	</x>
</x></g2d_kerning>
		<getSubTextureById public="1" set="method" line="17" override="1"><f a="p_subId">
	<c path="String"/>
	<c path="com.genome2d.textures.GCharTexture"/>
</f></getSubTextureById>
		<addSubTexture public="1" set="method" line="21" override="1"><f a="p_subId:p_region:p_frame">
	<c path="String"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="com.genome2d.textures.GCharTexture"/>
</f></addSubTexture>
		<getKerning public="1" set="method" line="35"><f a="p_first:p_second">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getKerning>
		<new public="1" set="method" line="12"><f a="p_id:p_source">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.textures.GTextureManager" params="" file="Genome2D-ContextFlash/src/com/genome2d/textures/GTextureManager.hx">
		<init public="1" set="method" line="23" static="1"><f a=""><x path="Void"/></f></init>
		<defaultFilteringType public="1" line="27" static="1"><x path="Int"/></defaultFilteringType>
		<g2d_textures static="1"><c path="flash.utils.Dictionary"/></g2d_textures>
		<getTextures public="1" set="method" line="30" static="1"><f a=""><c path="flash.utils.Dictionary"/></f></getTextures>
		<g2d_addTexture set="method" line="34" static="1"><f a="p_texture">
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></g2d_addTexture>
		<g2d_removeTexture set="method" line="40" static="1"><f a="p_texture">
	<c path="com.genome2d.textures.GContextTexture"/>
	<x path="Void"/>
</f></g2d_removeTexture>
		<getContextTextureById public="1" set="method" line="44" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.textures.GContextTexture"/>
</f></getContextTextureById>
		<getTextureById public="1" set="method" line="48" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></getTextureById>
		<getAtlasById public="1" set="method" line="52" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></getAtlasById>
		<getFontAtlasById public="1" set="method" line="56" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureFontAtlas"/>
</f></getFontAtlasById>
		<disposeAll public="1" set="method" line="60" static="1"><f a=""><x path="Void"/></f></disposeAll>
		<invalidateAll public="1" set="method" line="67" static="1"><f a="p_force">
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidateAll>
		<createTextureFromEmbedded public="1" set="method" line="78" static="1">
			<f a="p_id:p_asset:?p_scaleFactor:?p_repeatable:?p_format" v="::1:false:'bgra'">
				<c path="String"/>
				<x path="Class"><c path="flash.display.Bitmap"/></x>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="com.genome2d.textures.GTexture"/>
			</f>
			<haxe_doc>**************************************************************************************************
                                                TEXTURE STUFF
     **************************************************************************************************</haxe_doc>
		</createTextureFromEmbedded>
		<createTextureFromBitmapData public="1" set="method" line="87" static="1"><f a="p_id:p_bitmapData:?p_scaleFactor:?p_repeatable:?p_format" v="::1:false:'bgra'">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></createTextureFromBitmapData>
		<createTextureFromAsset public="1" set="method" line="94" static="1"><f a="p_id:p_imageAsset:?p_scaleFactor:?p_repeatable:?p_format" v="::1:false:'bgra'">
	<c path="String"/>
	<c path="com.genome2d.assets.GImageAsset"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></createTextureFromAsset>
		<createTextureFromAssetId public="1" set="method" line="105" static="1"><f a="p_id:p_imageAssetId:?p_scaleFactor:?p_repeatable:?p_format" v="::1:false:'bgra'">
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></createTextureFromAssetId>
		<createTextureFromATF public="1" set="method" line="109" static="1"><f a="p_id:p_atfData:?p_scaleFactor:?p_uploadCallback" v="::1:null">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Float"/>
	<t path="flash.utils.Function"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></createTextureFromATF>
		<createRenderTexture public="1" set="method" line="119" static="1"><f a="p_id:p_width:p_height:?p_scaleFactor" v=":::1">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTexture"/>
</f></createRenderTexture>
		<createAtlasFromEmbedded public="1" set="method" line="130" static="1">
			<f a="p_id:p_bitmapAsset:p_xmlAsset:?p_scaleFactor:?p_format" v=":::1:'bgra'">
				<c path="String"/>
				<x path="Class"><c path="flash.display.Bitmap"/></x>
				<x path="Class"><d/></x>
				<x path="Float"/>
				<c path="String"/>
				<c path="com.genome2d.textures.GTextureAtlas"/>
			</f>
			<haxe_doc>**************************************************************************************************
                                                ATLAS STUFF
     **************************************************************************************************</haxe_doc>
		</createAtlasFromEmbedded>
		<createAtlasFromBitmapDataAndXml public="1" set="method" line="145" static="1">
			<f a="p_id:p_bitmapData:p_xml:?p_scaleFactor:?p_format" v=":::1:'bgra'">
				<c path="String"/>
				<c path="flash.display.BitmapData"/>
				<c path="Xml"/>
				<x path="Float"/>
				<c path="String"/>
				<c path="com.genome2d.textures.GTextureAtlas"/>
			</f>
			<haxe_doc>* 	Helper function that will create atlas from bitmap data source and regions defined within an XML [Sparrow format]
	 *
	 * 	@param p_id id of the atlas
	 * 	@param p_bitmapData bitmap data
	 * 	@param p_xml</haxe_doc>
		</createAtlasFromBitmapDataAndXml>
		<createAtlasFromAssets public="1" set="method" line="170" static="1"><f a="p_id:p_imageAsset:p_xmlAsset:?p_scaleFactor:?p_format" v=":::1:'bgra'">
	<c path="String"/>
	<c path="com.genome2d.assets.GImageAsset"/>
	<c path="com.genome2d.assets.GXmlAsset"/>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></createAtlasFromAssets>
		<createAtlasFromAssetIds public="1" set="method" line="180" static="1"><f a="p_id:p_imageAssetId:p_xmlAssetId:?p_scaleFactor:?p_format" v=":::1:'bgra'">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></createAtlasFromAssetIds>
		<createAtlasFromBitmapDatas public="1" set="method" line="184" static="1"><f a="p_id:p_bitmaps:p_ids:?p_scaleFactor:?p_format:?p_packer:?p_padding" v=":::1:'bgra':null:2">
	<c path="String"/>
	<c path="Array"><c path="flash.display.BitmapData"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.utils.GMaxRectPacker"/>
	<x path="Int"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></createAtlasFromBitmapDatas>
		<createAtlasFromATFAndXml public="1" set="method" line="219" static="1"><f a="p_id:p_atfData:p_xml:?p_scaleFactor" v=":::1">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<c path="Xml"/>
	<x path="Float"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></createAtlasFromATFAndXml>
		<createFontAtlasFromAssets public="1" set="method" line="247" static="1"><f a="p_id:p_imageAsset:p_xmlAsset:?p_scaleFactor:?p_format" v=":::1:'bgra'">
	<c path="String"/>
	<c path="com.genome2d.assets.GImageAsset"/>
	<c path="com.genome2d.assets.GXmlAsset"/>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureFontAtlas"/>
</f></createFontAtlasFromAssets>
		<createFontAtlasFromAssetIds public="1" set="method" line="251" static="1"><f a="p_id:p_imageAssetId:p_xmlAssetId:?p_scaleFactor:?p_format" v=":::1:'bgra'">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureAtlas"/>
</f></createFontAtlasFromAssetIds>
		<createFontAtlasFromBitmapDataAndXml public="1" set="method" line="287" static="1"><f a="p_id:p_bitmapData:p_fontXml:?p_scaleFactor:?p_format" v=":::1:'bgra'">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
	<c path="Xml"/>
	<x path="Float"/>
	<c path="String"/>
	<c path="com.genome2d.textures.GTextureFontAtlas"/>
</f></createFontAtlasFromBitmapDataAndXml>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.textures.GTextureSourceType" params="" file="Genome2D-ContextFlash/src/com/genome2d/textures/GTextureSourceType.hx">
		<BITMAPDATA public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></BITMAPDATA>
		<BYTEARRAY public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></BYTEARRAY>
		<RENDER_TARGET public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></RENDER_TARGET>
		<ATF_BGRA public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></ATF_BGRA>
		<ATF_COMPRESSED public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></ATF_COMPRESSED>
		<ATF_COMPRESSEDALPHA public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></ATF_COMPRESSEDALPHA>
		<TEXTURE public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></TEXTURE>
		<ATLAS public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></ATLAS>
	</class>
	<class path="com.genome2d.textures.GTextureUtils" params="" file="Genome2D-ContextFlash/src/com/genome2d/textures/GTextureUtils.hx">
		<isBitmapDataTransparent public="1" set="method" line="17" static="1"><f a="p_bitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="Bool"/>
</f></isBitmapDataTransparent>
		<isValidTextureSize public="1" set="method" line="21" static="1"><f a="p_size">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidTextureSize>
		<getNextValidTextureSize public="1" set="method" line="25" static="1"><f a="p_size">
	<x path="Int"/>
	<x path="Int"/>
</f></getNextValidTextureSize>
		<getPreviousValidTextureSize public="1" set="method" line="31" static="1"><f a="p_size">
	<x path="Int"/>
	<x path="Int"/>
</f></getPreviousValidTextureSize>
		<getNearestValidTextureSize public="1" set="method" line="35" static="1"><f a="p_size">
	<x path="Int"/>
	<x path="Int"/>
</f></getNearestValidTextureSize>
		<resampleBitmapData public="1" set="method" line="42" static="1"><f a="p_bitmapData">
	<c path="flash.display.BitmapData"/>
	<c path="flash.display.BitmapData"/>
</f></resampleBitmapData>
	</class>
	<class path="com.genome2d.tilemap.GTile" params="" file="Genome2D-Core/src/com/genome2d/tilemap/GTile.hx">
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<textureId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</textureId>
		<get_textureId set="method" line="14"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="18"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<value public="1"><x path="Int"/></value>
		<rotation public="1"><x path="Float"/></rotation>
		<alpha public="1"><x path="Float"/></alpha>
		<visible public="1"><x path="Bool"/></visible>
		<repeatable public="1"><x path="Bool"/></repeatable>
		<reversed public="1"><x path="Bool"/></reversed>
		<red public="1"><x path="Float"/></red>
		<green public="1"><x path="Float"/></green>
		<blue public="1"><x path="Float"/></blue>
		<g2d_userData>
			<x path="Map">
				<c path="String"/>
				<d/>
			</x>
			<haxe_doc>Abstract reference to user defined data, if you want keep some custom data binded to GTile instance use it.</haxe_doc>
		</g2d_userData>
		<userData public="1" get="accessor" set="null"><x path="Map">
	<c path="String"/>
	<d/>
</x></userData>
		<get_userData get="inline" set="null" line="42"><f a=""><x path="Map">
	<c path="String"/>
	<d/>
</x></f></get_userData>
		<mapX public="1"><x path="Int"/></mapX>
		<mapY public="1"><x path="Int"/></mapY>
		<sizeX public="1"><x path="Int"/></sizeX>
		<sizeY public="1"><x path="Int"/></sizeY>
		<g2d_lastFrameRendered><x path="Int"/></g2d_lastFrameRendered>
		<lastFrameRendered public="1" get="accessor" set="null"><x path="Int"/></lastFrameRendered>
		<get_lastFrameRendered get="inline" set="null" line="56"><f a=""><x path="Int"/></f></get_lastFrameRendered>
		<g2d_lastTimeRendered><x path="Float"/></g2d_lastTimeRendered>
		<g2d_playing><x path="Bool"/></g2d_playing>
		<g2d_speed><x path="Float"/></g2d_speed>
		<g2d_accumulatedTime><x path="Float"/></g2d_accumulatedTime>
		<g2d_currentFrame><x path="Int"/></g2d_currentFrame>
		<currentFrame public="1" get="accessor" set="null"><x path="Int"/></currentFrame>
		<get_currentFrame get="inline" set="null" line="70"><f a=""><x path="Int"/></f></get_currentFrame>
		<g2d_frameTexturesCount><x path="Int"/></g2d_frameTexturesCount>
		<frameCount public="1" get="accessor" set="null"><x path="Int"/></frameCount>
		<get_frameCount get="inline" set="null" line="78"><f a=""><x path="Int"/></f></get_frameCount>
		<g2d_frameTextures><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></g2d_frameTextures>
		<frameTextures public="1" get="null" set="accessor"><c path="Array"><c path="com.genome2d.textures.GTexture"/></c></frameTextures>
		<set_frameTextures get="inline" set="null" line="86"><f a="p_value">
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
	<c path="Array"><c path="com.genome2d.textures.GTexture"/></c>
</f></set_frameTextures>
		<frameTextureIds public="1" get="null" set="accessor"><c path="Array"><c path="String"/></c></frameTextureIds>
		<set_frameTextureIds get="inline" set="null" line="102"><f a="p_value">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
</f></set_frameTextureIds>
		<frameRate public="1" get="accessor" set="accessor"><x path="Int"/></frameRate>
		<get_frameRate get="inline" set="null" line="123"><f a=""><x path="Int"/></f></get_frameRate>
		<set_frameRate get="inline" set="null" line="127"><f a="p_value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_frameRate>
		<stop public="1" set="method" line="141"><f a=""><x path="Void"/></f></stop>
		<play public="1" set="method" line="145"><f a=""><x path="Void"/></f></play>
		<gotoFrame public="1" set="method" line="149"><f a="p_frame">
	<x path="Int"/>
	<x path="Void"/>
</f></gotoFrame>
		<gotoAndPlayFrame public="1" set="method" line="156"><f a="p_frame">
	<x path="Int"/>
	<x path="Void"/>
</f></gotoAndPlayFrame>
		<gotoAndStopFrame public="1" set="method" line="161"><f a="p_frame">
	<x path="Int"/>
	<x path="Void"/>
</f></gotoAndStopFrame>
		<render public="1" get="inline" set="null" line="166"><f a="p_context:p_x:p_y:p_frameId:p_time:p_blendMode">
	<t path="com.genome2d.context.IContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="132"><f a="?p_sizeX:?p_sizeY:?p_mapX:?p_mapY" v="1:1:-1:-1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>'???'</e></m></meta>
	</class>
	<class path="com.genome2d.ui.element.GUIElement" params="" file="Genome2D-Core/src/com/genome2d/ui/element/GUIElement.hx">
		<implements path="com.genome2d.proto.IGPrototypable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<mouseEnabled public="1">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</mouseEnabled>
		<mouseChildren public="1">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</mouseChildren>
		<visible public="1"><x path="Bool"/></visible>
		<flushBatch public="1">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</flushBatch>
		<name public="1">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</name>
		<g2d_currentClient><d/></g2d_currentClient>
		<g2d_client><d/></g2d_client>
		<getClient public="1" set="method" line="31"><f a=""><d/></f></getClient>
		<setClient public="1" set="method" line="34"><f a="p_value">
	<d/>
	<x path="Void"/>
</f></setClient>
		<invalidateClient set="method" line="40"><f a=""><x path="Void"/></f></invalidateClient>
		<setAlign public="1" set="method" line="59"><f a="p_align">
	<x path="Int"/>
	<x path="Void"/>
</f></setAlign>
		<g2d_mouseDown><c path="String"/></g2d_mouseDown>
		<mouseDown public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseDown>
		<get_mouseDown get="inline" set="null" line="115"><f a=""><c path="String"/></f></get_mouseDown>
		<set_mouseDown get="inline" set="null" line="119"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseDown>
		<g2d_mouseUp><c path="String"/></g2d_mouseUp>
		<mouseUp public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseUp>
		<get_mouseUp get="inline" set="null" line="136"><f a=""><c path="String"/></f></get_mouseUp>
		<set_mouseUp get="inline" set="null" line="140"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseUp>
		<g2d_mouseClick><c path="String"/></g2d_mouseClick>
		<mouseClick public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseClick>
		<get_mouseClick get="inline" set="null" line="157"><f a=""><c path="String"/></f></get_mouseClick>
		<set_mouseClick get="inline" set="null" line="161"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseClick>
		<g2d_mouseOver><c path="String"/></g2d_mouseOver>
		<mouseOver public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseOver>
		<get_mouseOver get="inline" set="null" line="178"><f a=""><c path="String"/></f></get_mouseOver>
		<set_mouseOver get="inline" set="null" line="182"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseOver>
		<g2d_mouseOut><c path="String"/></g2d_mouseOut>
		<mouseOut public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseOut>
		<get_mouseOut get="inline" set="null" line="199"><f a=""><c path="String"/></f></get_mouseOut>
		<set_mouseOut get="inline" set="null" line="203"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseOut>
		<g2d_mouseMove><c path="String"/></g2d_mouseMove>
		<mouseMove public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</mouseMove>
		<get_mouseMove get="inline" set="null" line="220"><f a=""><c path="String"/></f></get_mouseMove>
		<set_mouseMove get="inline" set="null" line="224"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_mouseMove>
		<listItemPrototype public="1"><c path="Xml"/></listItemPrototype>
		<g2d_value><c path="String"/></g2d_value>
		<getValue public="1" set="method" line="240"><f a=""><c path="String"/></f></getValue>
		<setValue public="1" set="method" line="243"><f a="p_value">
	<d/>
	<x path="Void"/>
</f></setValue>
		<g2d_onValueChanged><c path="msignal.Signal1"><c path="com.genome2d.ui.element.GUIElement"/></c></g2d_onValueChanged>
		<onValueChanged public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.ui.element.GUIElement"/></c></onValueChanged>
		<get_onValueChanged get="inline" set="null" line="289"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.ui.element.GUIElement"/></c></f></get_onValueChanged>
		<g2d_layout><c path="com.genome2d.ui.layout.GUILayout"/></g2d_layout>
		<layout public="1" get="accessor" set="accessor">
			<c path="com.genome2d.ui.layout.GUILayout"/>
			<meta><m n="prototype"/></meta>
		</layout>
		<get_layout get="inline" set="null" line="297"><f a=""><c path="com.genome2d.ui.layout.GUILayout"/></f></get_layout>
		<set_layout get="inline" set="null" line="301"><f a="p_value">
	<c path="com.genome2d.ui.layout.GUILayout"/>
	<c path="com.genome2d.ui.layout.GUILayout"/>
</f></set_layout>
		<g2d_activeSkin><c path="com.genome2d.ui.skin.GUISkin"/></g2d_activeSkin>
		<skinId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</skinId>
		<get_skinId get="inline" set="null" line="312"><f a=""><c path="String"/></f></get_skinId>
		<set_skinId get="inline" set="null" line="317"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_skinId>
		<g2d_skin><c path="com.genome2d.ui.skin.GUISkin"/></g2d_skin>
		<skin public="1" get="accessor" set="accessor"><c path="com.genome2d.ui.skin.GUISkin"/></skin>
		<get_skin get="inline" set="null" line="328"><f a=""><c path="com.genome2d.ui.skin.GUISkin"/></f></get_skin>
		<set_skin get="inline" set="null" line="332"><f a="p_value">
	<c path="com.genome2d.ui.skin.GUISkin"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
</f></set_skin>
		<g2d_dirty><x path="Bool"/></g2d_dirty>
		<setDirty set="method" line="341"><f a=""><x path="Void"/></f></setDirty>
		<g2d_anchorX><x path="Float"/></g2d_anchorX>
		<anchorX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorX>
		<get_anchorX get="inline" set="null" line="350"><f a=""><x path="Float"/></f></get_anchorX>
		<set_anchorX get="inline" set="null" line="354"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorX>
		<g2d_anchorY><x path="Float"/></g2d_anchorY>
		<anchorY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorY>
		<get_anchorY get="inline" set="null" line="364"><f a=""><x path="Float"/></f></get_anchorY>
		<set_anchorY get="inline" set="null" line="368"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorY>
		<g2d_anchorLeft><x path="Float"/></g2d_anchorLeft>
		<anchorLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorLeft>
		<get_anchorLeft get="inline" set="null" line="378"><f a=""><x path="Float"/></f></get_anchorLeft>
		<set_anchorLeft get="inline" set="null" line="382"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorLeft>
		<g2d_anchorTop><x path="Float"/></g2d_anchorTop>
		<anchorTop public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorTop>
		<get_anchorTop get="inline" set="null" line="392"><f a=""><x path="Float"/></f></get_anchorTop>
		<set_anchorTop get="inline" set="null" line="396"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorTop>
		<g2d_anchorRight><x path="Float"/></g2d_anchorRight>
		<anchorRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorRight>
		<get_anchorRight get="inline" set="null" line="406"><f a=""><x path="Float"/></f></get_anchorRight>
		<set_anchorRight get="inline" set="null" line="410"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorRight>
		<g2d_anchorBottom><x path="Float"/></g2d_anchorBottom>
		<anchorBottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</anchorBottom>
		<get_anchorBottom get="inline" set="null" line="420"><f a=""><x path="Float"/></f></get_anchorBottom>
		<set_anchorBottom get="inline" set="null" line="424"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorBottom>
		<g2d_left><x path="Float"/></g2d_left>
		<left public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</left>
		<get_left get="inline" set="null" line="434"><f a=""><x path="Float"/></f></get_left>
		<set_left get="inline" set="null" line="438"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_left>
		<g2d_top><x path="Float"/></g2d_top>
		<top public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</top>
		<get_top get="inline" set="null" line="448"><f a=""><x path="Float"/></f></get_top>
		<set_top get="inline" set="null" line="452"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_top>
		<g2d_right><x path="Float"/></g2d_right>
		<right public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</right>
		<get_right get="inline" set="null" line="462"><f a=""><x path="Float"/></f></get_right>
		<set_right get="inline" set="null" line="466"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<g2d_bottom public="1"><x path="Float"/></g2d_bottom>
		<bottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="476"><f a=""><x path="Float"/></f></get_bottom>
		<set_bottom get="inline" set="null" line="480"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<g2d_pivotX public="1"><x path="Float"/></g2d_pivotX>
		<pivotX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</pivotX>
		<get_pivotX get="inline" set="null" line="490"><f a=""><x path="Float"/></f></get_pivotX>
		<set_pivotX get="inline" set="null" line="494"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pivotX>
		<g2d_pivotY public="1"><x path="Float"/></g2d_pivotY>
		<pivotY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</pivotY>
		<get_pivotY get="inline" set="null" line="504"><f a=""><x path="Float"/></f></get_pivotY>
		<set_pivotY get="inline" set="null" line="508"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pivotY>
		<g2d_worldLeft public="1"><x path="Float"/></g2d_worldLeft>
		<g2d_worldTop public="1"><x path="Float"/></g2d_worldTop>
		<g2d_worldRight public="1"><x path="Float"/></g2d_worldRight>
		<g2d_worldBottom public="1"><x path="Float"/></g2d_worldBottom>
		<g2d_minWidth><x path="Float"/></g2d_minWidth>
		<g2d_variableWidth><x path="Float"/></g2d_variableWidth>
		<g2d_finalWidth public="1"><x path="Float"/></g2d_finalWidth>
		<g2d_preferredWidth><x path="Float"/></g2d_preferredWidth>
		<preferredWidth public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</preferredWidth>
		<get_preferredWidth get="inline" set="null" line="527"><f a=""><x path="Float"/></f></get_preferredWidth>
		<set_preferredWidth get="inline" set="null" line="531"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_preferredWidth>
		<g2d_minHeight><x path="Float"/></g2d_minHeight>
		<g2d_variableHeight><x path="Float"/></g2d_variableHeight>
		<g2d_finalHeight public="1"><x path="Float"/></g2d_finalHeight>
		<g2d_preferredHeight><x path="Float"/></g2d_preferredHeight>
		<preferredHeight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</preferredHeight>
		<get_preferredHeight get="inline" set="null" line="545"><f a=""><x path="Float"/></f></get_preferredHeight>
		<set_preferredHeight get="inline" set="null" line="549"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_preferredHeight>
		<g2d_parent><c path="com.genome2d.ui.element.GUIElement"/></g2d_parent>
		<parent public="1" get="accessor" set="null"><c path="com.genome2d.ui.element.GUIElement"/></parent>
		<get_parent get="inline" set="null" line="559"><f a=""><c path="com.genome2d.ui.element.GUIElement"/></f></get_parent>
		<g2d_numChildren><x path="Int"/></g2d_numChildren>
		<numChildren public="1" get="accessor" set="null"><x path="Int"/></numChildren>
		<get_numChildren get="inline" set="null" line="567"><f a=""><x path="Int"/></f></get_numChildren>
		<g2d_children><c path="Array"><c path="com.genome2d.ui.element.GUIElement"/></c></g2d_children>
		<children public="1" get="accessor" set="null"><c path="Array"><c path="com.genome2d.ui.element.GUIElement"/></c></children>
		<get_children get="inline" set="null" line="575"><f a=""><c path="Array"><c path="com.genome2d.ui.element.GUIElement"/></c></f></get_children>
		<isParent public="1" set="method" line="586"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Bool"/>
</f></isParent>
		<setRect public="1" set="method" line="592"><f a="p_left:p_top:p_right:p_bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRect>
		<addChild public="1" set="method" line="630"><f a="p_child">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></addChild>
		<addChildAt public="1" set="method" line="641"><f a="p_child:p_index">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addChildAt>
		<removeChild public="1" set="method" line="651"><f a="p_child">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></removeChild>
		<getChildAt public="1" set="method" line="660"><f a="p_index">
	<x path="Int"/>
	<c path="com.genome2d.ui.element.GUIElement"/>
</f></getChildAt>
		<getChildByName public="1" set="method" line="664"><f a="p_name">
	<c path="String"/>
	<c path="com.genome2d.ui.element.GUIElement"/>
</f></getChildByName>
		<getChildIndex public="1" set="method" line="669"><f a="p_child">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Int"/>
</f></getChildIndex>
		<calculateWidth set="method" line="673"><f a=""><x path="Void"/></f></calculateWidth>
		<calculateHeight set="method" line="687"><f a=""><x path="Void"/></f></calculateHeight>
		<invalidateWidth set="method" line="701"><f a=""><x path="Void"/></f></invalidateWidth>
		<invalidateHeight set="method" line="735"><f a=""><x path="Void"/></f></invalidateHeight>
		<render public="1" set="method" line="767"><f a=""><x path="Void"/></f></render>
		<getPrototype public="1" set="method" line="778"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="821"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<disposeChildren public="1" set="method" line="867"><f a=""><x path="Void"/></f></disposeChildren>
		<dispose public="1" set="method" line="873"><f a=""><x path="Void"/></f></dispose>
		<g2d_onMouseDown>
			<c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c>
			<haxe_doc>*****************************************************************************************************************
    *   MOUSE CODE
    *****************************************************************************************************************</haxe_doc>
		</g2d_onMouseDown>
		<onMouseDown public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseDown>
		<get_onMouseDown get="inline" set="null" line="885"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseDown>
		<g2d_onMouseUp><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></g2d_onMouseUp>
		<onMouseUp public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseUp>
		<get_onMouseUp get="inline" set="null" line="894"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseUp>
		<g2d_onMouseMove><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></g2d_onMouseMove>
		<onMouseMove public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseMove>
		<get_onMouseMove get="inline" set="null" line="903"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseMove>
		<g2d_onMouseOver><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></g2d_onMouseOver>
		<onMouseOver public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseOver>
		<get_onMouseOver get="inline" set="null" line="912"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseOver>
		<g2d_onMouseOut><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></g2d_onMouseOut>
		<onMouseOut public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseOut>
		<get_onMouseOut get="inline" set="null" line="921"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseOut>
		<g2d_onMouseClick><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></g2d_onMouseClick>
		<onMouseClick public="1" get="accessor" set="null"><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></onMouseClick>
		<get_onMouseClick get="inline" set="null" line="930"><f a=""><c path="msignal.Signal1"><c path="com.genome2d.callbacks.GUIMouseSignal"/></c></f></get_onMouseClick>
		<g2d_mouseDownElement><c path="com.genome2d.ui.element.GUIElement"/></g2d_mouseDownElement>
		<g2d_mouseOverElement><c path="com.genome2d.ui.element.GUIElement"/></g2d_mouseOverElement>
		<processMouseSignal public="1" set="method" line="938"><f a="p_captured:p_cameraX:p_cameraY:p_contextSignal">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Bool"/>
</f></processMouseSignal>
		<g2d_dispatchMouseSignal set="method" line="962"><f a="p_type:p_element:p_localX:p_localY:p_contextSignal">
	<c path="String"/>
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.callbacks.GMouseSignal"/>
	<x path="Void"/>
</f></g2d_dispatchMouseSignal>
		<getPrototypeDefault public="1" set="method" line="242"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototypeDefault>
		<initPrototypeDefault public="1" set="method" line="251"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototypeDefault>
		<new public="1" set="method" line="580"><f a="?p_skin" v="null">
	<c path="com.genome2d.ui.skin.GUISkin"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n="prototypeName"><e>"element"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.layout.GUILayout" params="" file="Genome2D-Core/src/com/genome2d/ui/layout/GUILayout.hx">
		<implements path="com.genome2d.proto.IGPrototypable"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<type public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</type>
		<calculateWidth set="method" line="10"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateWidth>
		<invalidateWidth set="method" line="13"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateWidth>
		<calculateHeight set="method" line="16"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateHeight>
		<invalidateHeight set="method" line="19"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateHeight>
		<getPrototype public="1" set="method" line="242"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="7">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n="prototypeName"><e>"layout"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.layout.GUIHorizontalLayout" params="" file="Genome2D-Core/src/com/genome2d/ui/layout/GUIHorizontalLayout.hx">
		<extends path="com.genome2d.ui.layout.GUILayout"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<gap public="1">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</gap>
		<calculateWidth set="method" line="9" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateWidth>
		<invalidateWidth set="method" line="21" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateWidth>
		<calculateHeight set="method" line="37" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateHeight>
		<invalidateHeight set="method" line="49" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateHeight>
		<getPrototype public="1" set="method" line="242" override="1"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251" override="1"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n="prototypeName"><e>"horizontal"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.layout.GUILayoutType" params="" file="Genome2D-Core/src/com/genome2d/ui/layout/GUILayoutType.hx">
		<VERTICAL public="1" get="inline" set="null" line="3" static="1"><x path="Int"/></VERTICAL>
		<HORIZONTAL public="1" get="inline" set="null" line="4" static="1"><x path="Int"/></HORIZONTAL>
		<GRID_VERTICAL public="1" get="inline" set="null" line="5" static="1"><x path="Int"/></GRID_VERTICAL>
		<GRID_HORIZONTAL public="1" get="inline" set="null" line="6" static="1"><x path="Int"/></GRID_HORIZONTAL>
	</class>
	<class path="com.genome2d.ui.layout.GUIVerticalLayout" params="" file="Genome2D-Core/src/com/genome2d/ui/layout/GUIVerticalLayout.hx">
		<extends path="com.genome2d.ui.layout.GUILayout"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<gap public="1">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</gap>
		<calculateWidth set="method" line="11" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateWidth>
		<invalidateWidth set="method" line="23" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateWidth>
		<calculateHeight set="method" line="38" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></calculateHeight>
		<invalidateHeight set="method" line="50" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></invalidateHeight>
		<getPrototype public="1" set="method" line="242" override="1"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251" override="1"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n="prototypeName"><e>"vertical"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.skin.GUISkin" params="" file="Genome2D-Core/src/com/genome2d/ui/skin/GUISkin.hx">
		<implements path="com.genome2d.proto.IGPrototypable"/>
		<g2d_batchQueue static="1"><c path="Array"><c path="com.genome2d.ui.skin.GUISkin"/></c></g2d_batchQueue>
		<g2d_currentBatchTexture static="1"><c path="com.genome2d.textures.GContextTexture"/></g2d_currentBatchTexture>
		<batchRender set="method" line="14" static="1"><f a="p_skin">
	<c path="com.genome2d.ui.skin.GUISkin"/>
	<x path="Bool"/>
</f></batchRender>
		<flushBatch set="method" line="25" static="1"><f a=""><x path="Void"/></f></flushBatch>
		<g2d_instanceCount line="66" static="1"><x path="Int"/></g2d_instanceCount>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<g2d_id><c path="String"/></g2d_id>
		<id public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</id>
		<get_id get="inline" set="null" line="39"><f a=""><c path="String"/></f></get_id>
		<set_id get="inline" set="null" line="43"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<g2d_clones><c path="Array"><c path="com.genome2d.ui.skin.GUISkin"/></c></g2d_clones>
		<g2d_origin><c path="com.genome2d.ui.skin.GUISkin"/></g2d_origin>
		<g2d_element><c path="com.genome2d.ui.element.GUIElement"/></g2d_element>
		<getMinWidth public="1" set="method" line="59"><f a=""><x path="Float"/></f></getMinWidth>
		<getMinHeight public="1" set="method" line="62"><f a=""><x path="Float"/></f></getMinHeight>
		<g2d_renderLeft><x path="Float"/></g2d_renderLeft>
		<g2d_renderTop><x path="Float"/></g2d_renderTop>
		<g2d_renderRight><x path="Float"/></g2d_renderRight>
		<g2d_renderBottom><x path="Float"/></g2d_renderBottom>
		<render public="1" set="method" line="77"><f a="p_left:p_top:p_right:p_bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></render>
		<flushRender get="inline" set="null" line="86"><f a=""><x path="Void"/></f></flushRender>
		<getTexture public="1" set="method" line="90"><f a=""><c path="com.genome2d.textures.GContextTexture"/></f></getTexture>
		<attach set="method" line="94"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
</f></attach>
		<remove set="method" line="105"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></remove>
		<elementValueChangedHandler set="method" line="109"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></elementValueChangedHandler>
		<clone set="method" line="112"><f a=""><c path="com.genome2d.ui.skin.GUISkin"/></f></clone>
		<dispose set="method" line="116"><f a=""><x path="Void"/></f></dispose>
		<getPrototype public="1" set="method" line="242"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="67"><f a="?p_id" v="''">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
			<m n=":allow"><e>'???'</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.skin.GUIFontSkin" params="" file="Genome2D-Core/src/com/genome2d/ui/skin/GUIFontSkin.hx">
		<extends path="com.genome2d.ui.skin.GUISkin"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</text>
		<get_text get="inline" set="null" line="16"><f a=""><c path="String"/></f></get_text>
		<set_text get="inline" set="null" line="20"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<autoSize public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n="prototype"/></meta>
		</autoSize>
		<get_autoSize get="inline" set="null" line="29"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize get="inline" set="null" line="33"><f a="p_value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<g2d_textRenderer><c path="com.genome2d.text.GTextureTextRenderer"/></g2d_textRenderer>
		<textRenderer public="1" get="accessor" set="null"><c path="com.genome2d.text.GTextureTextRenderer"/></textRenderer>
		<get_textRenderer get="inline" set="null" line="43"><f a=""><c path="com.genome2d.text.GTextureTextRenderer"/></f></get_textRenderer>
		<fontAtlasId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</fontAtlasId>
		<get_fontAtlasId get="inline" set="null" line="50"><f a=""><c path="String"/></f></get_fontAtlasId>
		<set_fontAtlasId get="inline" set="null" line="54"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontAtlasId>
		<fontScale public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="prototype"/></meta>
		</fontScale>
		<get_fontScale get="inline" set="null" line="62"><f a=""><x path="Float"/></f></get_fontScale>
		<set_fontScale get="inline" set="null" line="66"><f a="p_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fontScale>
		<getTexture public="1" set="method" line="71" override="1"><f a=""><c path="com.genome2d.textures.GContextTexture"/></f></getTexture>
		<getMinWidth public="1" set="method" line="75" override="1"><f a=""><x path="Float"/></f></getMinWidth>
		<getMinHeight public="1" set="method" line="79" override="1"><f a=""><x path="Float"/></f></getMinHeight>
		<render public="1" set="method" line="94" override="1"><f a="p_left:p_top:p_right:p_bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></render>
		<elementValueChangedHandler set="method" line="105" override="1"><f a="p_element">
	<c path="com.genome2d.ui.element.GUIElement"/>
	<x path="Void"/>
</f></elementValueChangedHandler>
		<clone public="1" set="method" line="109" override="1"><f a=""><c path="com.genome2d.ui.skin.GUISkin"/></f></clone>
		<getPrototype public="1" set="method" line="242" override="1"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251" override="1"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="83"><f a="?p_id:?p_fontAtlasId:?p_fontScale:?p_autoSize" v="'':'':1:true">
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="prototypeName"><e>"fontSkin"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.ui.skin.GUISkinManager" params="" file="Genome2D-Core/src/com/genome2d/ui/skin/GUISkinManager.hx">
		<init public="1" set="method" line="4" static="1"><f a=""><x path="Void"/></f></init>
		<g2d_references static="1"><x path="Map">
	<c path="String"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
</x></g2d_references>
		<getSkinById public="1" set="method" line="11" static="1"><f a="p_id">
	<c path="String"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
</f></getSkinById>
		<g2d_setSkinById public="1" set="method" line="15" static="1"><f a="p_id:p_value">
	<c path="String"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
	<x path="Void"/>
</f></g2d_setSkinById>
		<g2d_removeSkinById public="1" set="method" line="19" static="1"><f a="p_id">
	<c path="String"/>
	<x path="Void"/>
</f></g2d_removeSkinById>
		<getSkins public="1" set="method" line="23" static="1"><f a=""><x path="Map">
	<c path="String"/>
	<c path="com.genome2d.ui.skin.GUISkin"/>
</x></f></getSkins>
	</class>
	<class path="com.genome2d.ui.skin.GUISkinType" params="" file="Genome2D-Core/src/com/genome2d/ui/skin/GUISkinType.hx">
		<TEXTURE public="1" get="inline" set="null" line="3" static="1"><x path="Int"/></TEXTURE>
		<TEXT public="1" get="inline" set="null" line="4" static="1"><x path="Int"/></TEXT>
	</class>
	<class path="com.genome2d.ui.skin.GUITextureSkin" params="" file="Genome2D-Core/src/com/genome2d/ui/skin/GUITextureSkin.hx">
		<extends path="com.genome2d.ui.skin.GUISkin"/>
		<PROTOTYPE_PROPERTY_NAMES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_NAMES>
		<PROTOTYPE_PROPERTY_TYPES public="1" line="16" static="1"><c path="Array"><c path="String"/></c></PROTOTYPE_PROPERTY_TYPES>
		<PROTOTYPE_NAME public="1" line="173" static="1"><c path="String"/></PROTOTYPE_NAME>
		<texture public="1"><c path="com.genome2d.textures.GTexture"/></texture>
		<sliceLeft public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</sliceLeft>
		<sliceTop public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</sliceTop>
		<sliceRight public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</sliceRight>
		<sliceBottom public="1">
			<x path="Int"/>
			<meta><m n="prototype"/></meta>
		</sliceBottom>
		<textureId public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n="prototype"/></meta>
		</textureId>
		<get_textureId get="inline" set="null" line="20"><f a=""><c path="String"/></f></get_textureId>
		<set_textureId get="inline" set="null" line="24"><f a="p_value">
	<c path="String"/>
	<c path="String"/>
</f></set_textureId>
		<getMinWidth public="1" set="method" line="30" override="1"><f a=""><x path="Float"/></f></getMinWidth>
		<getMinHeight public="1" set="method" line="34" override="1"><f a=""><x path="Float"/></f></getMinHeight>
		<render public="1" set="method" line="44" override="1"><f a="p_left:p_top:p_right:p_bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></render>
		<getTexture public="1" set="method" line="172" override="1"><f a=""><c path="com.genome2d.textures.GContextTexture"/></f></getTexture>
		<clone public="1" set="method" line="176" override="1"><f a=""><c path="com.genome2d.ui.skin.GUISkin"/></f></clone>
		<getPrototype public="1" set="method" line="242" override="1"><f a="?p_prototypeXml" v="null">
	<c path="Xml"/>
	<c path="Xml"/>
</f></getPrototype>
		<initPrototype public="1" set="method" line="251" override="1"><f a="p_prototypeXml">
	<c path="Xml"/>
	<x path="Void"/>
</f></initPrototype>
		<new public="1" set="method" line="38"><f a="?p_id:?p_textureId" v="'':''">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="prototypeName"><e>"textureSkin"</e></m>
		</meta>
	</class>
	<class path="com.genome2d.utils.GHAlignType" params="" file="Genome2D-ContextCommon/src/com/genome2d/utils/GHAlignType.hx">
		<LEFT public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></LEFT>
		<CENTER public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></CENTER>
		<RIGHT public="1" get="inline" set="null" line="20" static="1"><x path="Int"/></RIGHT>
		<haxe_doc>Horizontal alignment types</haxe_doc>
	</class>
	<class path="com.genome2d.utils.GMaxRectPacker" params="" file="Genome2D-ContextFlash/src/com/genome2d/utils/GMaxRectPacker.hx">
		<BOTTOM_LEFT public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></BOTTOM_LEFT>
		<SHORT_SIDE_FIT public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></SHORT_SIDE_FIT>
		<LONG_SIDE_FIT public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></LONG_SIDE_FIT>
		<AREA_FIT public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></AREA_FIT>
		<SORT_NONE public="1" get="inline" set="null" line="21" static="1"><x path="Int"/></SORT_NONE>
		<SORT_ASCENDING public="1" get="inline" set="null" line="22" static="1"><x path="Int"/></SORT_ASCENDING>
		<SORT_DESCENDING public="1" get="inline" set="null" line="23" static="1"><x path="Int"/></SORT_DESCENDING>
		<nonValidTextureSizePrecision public="1" line="25" static="1"><x path="Int"/></nonValidTextureSizePrecision>
		<g2d_heuristics><x path="Int"/></g2d_heuristics>
		<g2d_firstAvailableArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_firstAvailableArea>
		<g2d_lastAvailableArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_lastAvailableArea>
		<g2d_firstNewArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_firstNewArea>
		<g2d_lastNewArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_lastNewArea>
		<g2d_newBoundingArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_newBoundingArea>
		<g2d_negativeArea><c path="com.genome2d.utils.GPackerRectangle"/></g2d_negativeArea>
		<g2d_maxWidth><x path="Int"/></g2d_maxWidth>
		<g2d_maxHeight><x path="Int"/></g2d_maxHeight>
		<g2d_autoExpand><x path="Bool"/></g2d_autoExpand>
		<g2d_sortOnExpand><x path="Int"/></g2d_sortOnExpand>
		<g2d_forceValidTextureSizeOnExpand><x path="Bool"/></g2d_forceValidTextureSizeOnExpand>
		<g2d_width><x path="Int"/></g2d_width>
		<getWidth public="1" set="method" line="45"><f a=""><x path="Int"/></f></getWidth>
		<g2d_height><x path="Int"/></g2d_height>
		<getHeight public="1" set="method" line="50"><f a=""><x path="Int"/></f></getHeight>
		<g2d_rectangles><c path="Array"><c path="com.genome2d.utils.GPackerRectangle"/></c></g2d_rectangles>
		<getRectangles public="1" set="method" line="55"><f a=""><c path="Array"><c path="com.genome2d.utils.GPackerRectangle"/></c></f></getRectangles>
		<packRectangle public="1" set="method" line="73"><f a="p_rect:?p_padding:?p_forceValidTextureSize" v=":0:true">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></packRectangle>
		<g2d_packRectangles public="1" set="method" line="89"><f a="p_rectangles:?p_padding:?p_sort" v=":0:2">
	<c path="Array"><c path="com.genome2d.utils.GPackerRectangle"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></g2d_packRectangles>
		<g2d_getRectanglesArea set="method" line="130"><f a="p_rectangles">
	<c path="Array"><c path="com.genome2d.utils.GPackerRectangle"/></c>
	<x path="Int"/>
</f></g2d_getRectanglesArea>
		<g2d_addRectangles set="method" line="140"><f a="p_rectangles:?p_padding:?p_force" v=":0:true">
	<c path="Array"><c path="com.genome2d.utils.GPackerRectangle"/></c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></g2d_addRectangles>
		<g2d_addRectangle get="inline" set="null" line="151"><f a="p_rect:p_padding">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></g2d_addRectangle>
		<g2d_createNewArea get="inline" set="null" line="167"><f a="p_x:p_y:p_width:p_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
</f></g2d_createNewArea>
		<g2d_splitAvailableAreas get="inline" set="null" line="210"><f a="p_splitter">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Void"/>
</f></g2d_splitAvailableAreas>
		<g2d_pushNewAreas get="inline" set="null" line="246"><f a=""><x path="Void"/></f></g2d_pushNewAreas>
		<g2d_getAvailableArea get="inline" set="null" line="298"><f a="p_width:p_height">
	<x path="Int"/>
	<x path="Int"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
</f></g2d_getAvailableArea>
		<clear public="1" set="method" line="362"><f a=""><x path="Void"/></f></clear>
		<g2d_sortOnAreaAscending get="inline" set="null" line="375"><f a="a:b">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
</f></g2d_sortOnAreaAscending>
		<g2d_sortOnAreaDescending get="inline" set="null" line="382"><f a="a:b">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
</f></g2d_sortOnAreaDescending>
		<g2d_sortOnHeightAscending get="inline" set="null" line="389"><f a="a:b">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
</f></g2d_sortOnHeightAscending>
		<g2d_sortOnHeightDescending get="inline" set="null" line="394"><f a="a:b">
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
	<x path="Int"/>
</f></g2d_sortOnHeightDescending>
		<draw public="1" set="method" line="399"><f a="p_bitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="59"><f a="?p_width:?p_height:?p_maxWidth:?p_maxHeight:?p_autoExpand:?p_heuristics" v="1:1:2048:2048:false:0">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.utils.GPackerRectangle" params="" file="Genome2D-ContextFlash/src/com/genome2d/utils/GPackerRectangle.hx">
		<g2d_availableInstance static="1"><c path="com.genome2d.utils.GPackerRectangle"/></g2d_availableInstance>
		<get public="1" set="method" line="25" static="1"><f a="p_x:p_y:p_width:p_height:?p_id:?p_bitmapData:?p_pivotX:?p_pivotY" v="::::null:null:0:0">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.utils.GPackerRectangle"/>
</f></get>
		<g2d_next public="1"><c path="com.genome2d.utils.GPackerRectangle"/></g2d_next>
		<g2d_previous public="1"><c path="com.genome2d.utils.GPackerRectangle"/></g2d_previous>
		<g2d_nextInstance><c path="com.genome2d.utils.GPackerRectangle"/></g2d_nextInstance>
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<right public="1"><x path="Int"/></right>
		<bottom public="1"><x path="Int"/></bottom>
		<id public="1"><c path="String"/></id>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pivotX public="1"><x path="Float"/></pivotX>
		<pivotY public="1"><x path="Float"/></pivotY>
		<padding public="1"><x path="Int"/></padding>
		<userData public="1"><c path="Array"><x path="Float"/></c></userData>
		<set public="1" set="method" line="66"><f a="p_x:p_y:p_width:p_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<dispose public="1" set="method" line="75"><f a=""><x path="Void"/></f></dispose>
		<setPadding public="1" set="method" line="83"><f a="p_value">
	<x path="Int"/>
	<x path="Void"/>
</f></setPadding>
		<getRect public="1" set="method" line="93"><f a=""><t path="com.genome2d.geom.GRectangle"/></f></getRect>
		<toString public="1" set="method" line="97"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="com.genome2d.utils.GQuadTree" params="" file="Genome2D-Core/src/com/genome2d/utils/GQuadTree.hx">
		<g2d_root><c path="com.genome2d.utils.GQuadTreeNode"/></g2d_root>
		<g2d_left><x path="Float"/></g2d_left>
		<g2d_top><x path="Float"/></g2d_top>
		<g2d_right><x path="Float"/></g2d_right>
		<g2d_bottom><x path="Float"/></g2d_bottom>
		<g2d_map><x path="Map">
	<d/>
	<c path="com.genome2d.utils.GQuadTreeNode"/>
</x></g2d_map>
		<add public="1" set="method" line="35"><f a="p_object:p_left:p_top:p_right:p_bottom">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method" line="45"><f a="p_object">
	<d/>
	<x path="Bool"/>
</f></remove>
		<getObjectsInBounds public="1" set="method" line="57"><f a="p_bounds:p_result">
	<t path="com.genome2d.geom.GRectangle"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></getObjectsInBounds>
		<new public="1" set="method" line="24"><f a="p_x:p_y:p_width:p_height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.utils.GQuadTreeNode" params="" file="Genome2D-Core/src/com/genome2d/utils/GQuadTreeNode.hx">
		<MIN_WIDTH line="12" static="1"><x path="Int"/></MIN_WIDTH>
		<MIN_HEIGHT line="13" static="1"><x path="Int"/></MIN_HEIGHT>
		<g2d_left><x path="Float"/></g2d_left>
		<g2d_right><x path="Float"/></g2d_right>
		<g2d_top><x path="Float"/></g2d_top>
		<g2d_bottom><x path="Float"/></g2d_bottom>
		<g2d_width><x path="Float"/></g2d_width>
		<g2d_height><x path="Float"/></g2d_height>
		<g2d_node1><c path="com.genome2d.utils.GQuadTreeNode"/></g2d_node1>
		<g2d_node2><c path="com.genome2d.utils.GQuadTreeNode"/></g2d_node2>
		<g2d_node3><c path="com.genome2d.utils.GQuadTreeNode"/></g2d_node3>
		<g2d_node4><c path="com.genome2d.utils.GQuadTreeNode"/></g2d_node4>
		<g2d_objects><c path="Array"><c path="com.genome2d.utils.Container"/></c></g2d_objects>
		<add public="1" set="method" line="40"><f a="p_object:p_left:p_top:p_right:p_bottom">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="com.genome2d.utils.GQuadTreeNode"/>
</f></add>
		<remove public="1" set="method" line="81"><f a="p_object">
	<d/>
	<x path="Void"/>
</f></remove>
		<getObjectsInBounds public="1" set="method" line="93"><f a="p_left:p_top:p_right:p_bottom:p_result">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></getObjectsInBounds>
		<intersects get="inline" set="null" line="118"><f a="p_firstLeft:p_firstTop:p_firstRight:p_firstBottom:p_secondLeft:p_secondTop:p_secondRight:p_secondBottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></intersects>
		<contains get="inline" set="null" line="132"><f a="p_firstLeft:p_firstTop:p_firstRight:p_firstBottom:p_secondLeft:p_secondTop:p_secondRight:p_secondBottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<new public="1" set="method" line="29"><f a="p_left:p_top:p_right:p_bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.utils.Container" params="" file="Genome2D-Core/src/com/genome2d/utils/GQuadTreeNode.hx" module="com.genome2d.utils.GQuadTreeNode">
		<object public="1"><d/></object>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<top public="1"><x path="Float"/></top>
		<bottom public="1"><x path="Float"/></bottom>
		<new public="1" set="method" line="149"><f a="p_object:p_left:p_top:p_right:p_bottom">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="com.genome2d.utils.GRenderTargetStack" params="" file="Genome2D-Core/src/com/genome2d/utils/GRenderTargetStack.hx">
		<g2d_stack static="1"><c path="Array"><c path="com.genome2d.textures.GContextTexture"/></c></g2d_stack>
		<g2d_transforms static="1"><c path="Array"><t path="com.genome2d.geom.GMatrix3D"/></c></g2d_transforms>
		<pushRenderTarget public="1" set="method" line="9" static="1"><f a="p_target:p_transform">
	<c path="com.genome2d.textures.GContextTexture"/>
	<t path="com.genome2d.geom.GMatrix3D"/>
	<x path="Void"/>
</f></pushRenderTarget>
		<popRenderTarget public="1" set="method" line="18" static="1"><f a="p_context">
	<t path="com.genome2d.context.IContext"/>
	<x path="Void"/>
</f></popRenderTarget>
	</class>
	<class path="com.genome2d.utils.GVAlignType" params="" file="Genome2D-ContextCommon/src/com/genome2d/utils/GVAlignType.hx">
		<TOP public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></TOP>
		<MIDDLE public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></MIDDLE>
		<BOTTOM public="1" get="inline" set="null" line="20" static="1"><x path="Int"/></BOTTOM>
		<haxe_doc>Vertical alignment types</haxe_doc>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><x path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<height public="1"><x path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><x path="Float"/></rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><x path="Bool"/></visible>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<stopAllMovieClips public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></startDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\HaxeToolkit\haxe\std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><x path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<isPlaying public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="51" static="1"><x path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="83" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="92" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="102" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="110" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="116" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="144" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="163" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="208" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<start set="method" line="53"><f a=""><x path="Void"/></f></start>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\HaxeToolkit\haxe\std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="28" static="1"><f a=""><x path="Int"/></f></getTimer>
		<eval public="1" set="method" line="32" static="1"><f a="path">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="52" static="1"><f a="url:?target" v=":null">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="60" static="1"><f a="cmd:?param" v=":null">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></fscommand>
		<trace public="1" set="method" line="64" static="1"><f a="arg">
	<d/>
	<x path="Void"/>
</f></trace>
		<attach public="1" set="method" line="68" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<as public="1" params="T" get="inline" set="null" line="73" static="1"><f a="v:c">
	<d/>
	<x path="Class"><c path="as.T"/></x>
	<t path="Null"><c path="as.T"/></t>
</f></as>
		<redirectTraces public="1" set="method" line="77" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="82" static="1"><f a="v:?inf" v=":null">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></traceToConsole>
	</class>
	<class path="flash.Memory" params="" file="C:\HaxeToolkit\haxe\std/flash/Memory.hx" extern="1">
		<select public="1" get="inline" set="null" line="26" static="1"><f a="b">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></select>
		<setByte public="1" get="inline" set="null" line="30" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setByte>
		<setI16 public="1" get="inline" set="null" line="34" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setI16>
		<setI32 public="1" get="inline" set="null" line="38" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setI32>
		<setFloat public="1" get="inline" set="null" line="42" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat>
		<setDouble public="1" get="inline" set="null" line="46" static="1"><f a="addr:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<getByte public="1" get="inline" set="null" line="50" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getByte>
		<getUI16 public="1" get="inline" set="null" line="54" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getUI16>
		<getI32 public="1" get="inline" set="null" line="58" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Int"/>
</f></getI32>
		<getFloat public="1" get="inline" set="null" line="62" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getDouble public="1" get="inline" set="null" line="66" static="1"><f a="addr">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<signExtend1 public="1" get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></signExtend1>
		<signExtend8 public="1" get="inline" set="null" line="74" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></signExtend8>
		<signExtend16 public="1" get="inline" set="null" line="78" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></signExtend16>
	</class>
	<class path="flash.Vector" params="T" file="C:\HaxeToolkit\haxe\std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.display.Bitmap" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<new public="1" set="method"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<e path="flash.display.PixelSnapping"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.BitmapData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><x path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<width public="1" set="null"><x path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<copyPixelsToByteArray public="1" set="method">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<drawWithQuality public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</drawWithQuality>
		<encode public="1" set="method">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<t path="flash.utils.Object"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="Bool"/>
</f></hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<x path="Int"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<x path="Void"/>
</f></perlinNoise>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="UInt"/>
</f></threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\HaxeToolkit\haxe\std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" set="null"><x path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" set="method">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<height public="1" set="null"><x path="Int"/></height>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><x path="Int"/></width>
	</class>
	<class path="flash.display.NativeMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="flash.display.PixelSnapping" params="" file="C:\HaxeToolkit\haxe\std/flash/display/PixelSnapping.hx">
		<ALWAYS/>
		<AUTO/>
		<NEVER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Scene" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</allowsFullScreen>
		<allowsFullScreenInteractive public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<displayContextInfo public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><x path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<stage3Ds public="1" set="null">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageVideos public="1" set="null">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<wmodeGPU public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<visible public="1"><x path="Bool"/></visible>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1" set="method">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\HaxeToolkit\haxe\std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<profile public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</profile>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></clear>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></configureBackBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<x path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<dispose public="1" set="method"><f a="?recreate">
	<x path="Bool"/>
	<x path="Void"/>
</f></dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTriangles>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex">
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderToTexture>
		<setSamplerStateAt public="1" set="method">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<x path="Void"/>
</f></setVertexBufferAt>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Context3DClearMask" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DClearMask.hx" extern="1">
		<ALL public="1" static="1"><x path="Int"/></ALL>
		<COLOR public="1" static="1"><x path="Int"/></COLOR>
		<DEPTH public="1" static="1"><x path="Int"/></DEPTH>
		<STENCIL public="1" static="1"><x path="Int"/></STENCIL>
	</class>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<BASELINE_EXTENDED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFilter.hx">
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/RectangleTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.errors.TypeError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="C:\HaxeToolkit\haxe\std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TextEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/TextEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LINK public="1" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1"><c path="String"/></text>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ErrorEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<errorID public="1" set="null">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</errorID>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.events.IOErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IOErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DISK_ERROR public="1" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR public="1" static="1"><c path="String"/></IO_ERROR>
		<NETWORK_ERROR public="1" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR public="1" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN public="1" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><x path="Bool"/></altKey>
		<charCode public="1"><x path="UInt"/></charCode>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<keyCode public="1"><x path="UInt"/></keyCode>
		<keyLocation public="1"><e path="flash.ui.KeyLocation"/></keyLocation>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<e path="flash.ui.KeyLocation"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.MouseEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK public="1" static="1"><c path="String"/></CLICK>
		<CONTEXT_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</CONTEXT_MENU>
		<DOUBLE_CLICK public="1" static="1"><c path="String"/></DOUBLE_CLICK>
		<MIDDLE_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<RELEASE_OUTSIDE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</RELEASE_OUTSIDE>
		<RIGHT_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1"><x path="Bool"/></altKey>
		<buttonDown public="1"><x path="Bool"/></buttonDown>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<delta public="1"><x path="Int"/></delta>
		<isRelatedObjectInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isRelatedObjectInaccessible>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<movementX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementX>
		<movementY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementY>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<stageX public="1" set="null"><x path="Float"/></stageX>
		<stageY public="1" set="null"><x path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.NetStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/NetStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STATUS public="1" static="1"><c path="String"/></NET_STATUS>
		<info public="1"><d/></info>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?info">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\HaxeToolkit\haxe\std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="C:\HaxeToolkit\haxe\std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1"><x path="UInt"/></color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<focalLength public="1"><x path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><x path="Float"/></length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1"><x path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><x path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" static="1"><c path="String"/></BLACK>
		<BLUE public="1" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" static="1"><c path="String"/></GRAY>
		<GREEN public="1" static="1"><c path="String"/></GREEN>
		<LARGE public="1" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" static="1"><c path="String"/></RAISED>
		<RED public="1" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<fillColor public="1"><c path="String"/></fillColor>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<font public="1"><c path="String"/></font>
		<fontColor public="1"><c path="String"/></fontColor>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<size public="1"><c path="String"/></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" static="1"><x path="Int"/></PLAYING>
		<READY public="1" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY public="1" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED public="1" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_START_ERROR public="1" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE public="1" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND public="1" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING public="1" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER public="1" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_LOAD_PLAY_LIST public="1" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CURRENT_PERIOD_EXPIRED public="1" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT public="1" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR public="1" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD public="1" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR public="1" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR public="1" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID public="1" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR public="1" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR public="1" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<INCOMPATIBLE_RENDER_MODE public="1" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION public="1" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR public="1" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_OPERATION public="1" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<LISTENER_NOT_FOUND public="1" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD public="1" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED public="1" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN public="1" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK public="1" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE public="1" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE public="1" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE public="1" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION public="1" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT public="1" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD public="1" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED public="1" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED public="1" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR public="1" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD public="1" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR public="1" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED public="1" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SEEK_FAILED public="1" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE public="1" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN public="1" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC public="1" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS public="1" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<UNDERFLOW public="1" static="1"><x path="Int"/></UNDERFLOW>
		<UNSUPPORTED_CONFIGURATION public="1" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<volume public="1"><x path="Float"/></volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method"><f a="offset:?inBufferSeek">
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></seek>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<position public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<copyToByteArray public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1" set="method">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method"><f a="?compress">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopback>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMode>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<gain public="1"><x path="Float"/></gain>
		<index public="1" set="null"><x path="Int"/></index>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<rate public="1"><x path="Int"/></rate>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method"><f a="?state">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopBack>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><x path="Bool"/></autoGain>
		<echoPath public="1"><x path="Int"/></echoPath>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<pan public="1"><x path="Float"/></pan>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<volume public="1"><x path="Float"/></volume>
		<new public="1" set="method"><f a="?vol:?panning">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><x path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachAVStream public="1" set="method">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1" set="method">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.Video" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Video.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<deblocking public="1"><x path="Int"/></deblocking>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="camera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method"><f a="?width:?height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\HaxeToolkit\haxe\std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<x path="Bool"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<backBufferLength public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastInfo public="1" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<x path="Int"/>
	<x path="Void"/>
</f></attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="C:\HaxeToolkit\haxe\std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLLoader" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1"><x path="UInt"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLLoaderDataFormat.hx">
		<BINARY/>
		<TEXT/>
		<VARIABLES/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.net.URLRequest" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<useRedirectedURL public="1" set="method"><f a="sourceRequest:?wholeURL:?pattern:?replace">
	<c path="flash.net.URLRequest"/>
	<x path="Bool"/>
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1" set="method">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.IME" params="" file="C:\HaxeToolkit\haxe\std/flash/system/IME.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<conversionMode public="1" static="1"><e path="flash.system.IMEConversionMode"/></conversionMode>
		<enabled public="1" static="1"><x path="Bool"/></enabled>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<compositionAbandoned public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionAbandoned>
		<compositionSelectionChanged public="1" set="method" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionSelectionChanged>
		<doConversion public="1" set="method" static="1"><f a=""><x path="Void"/></f></doConversion>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<x path="Void"/>
</f></setCompositionString>
	</class>
	<enum path="flash.system.IMEConversionMode" params="" file="C:\HaxeToolkit\haxe\std/flash/system/IMEConversionMode.hx">
		<ALPHANUMERIC_FULL/>
		<ALPHANUMERIC_HALF/>
		<CHINESE/>
		<JAPANESE_HIRAGANA/>
		<JAPANESE_KATAKANA_FULL/>
		<JAPANESE_KATAKANA_HALF/>
		<KOREAN/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\HaxeToolkit\haxe\std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<class path="flash.system.System" params="" file="C:\HaxeToolkit\haxe\std/flash/system/System.hx" extern="1">
		<freeMemory public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</freeMemory>
		<ime public="1" set="null" static="1"><c path="flash.system.IME"/></ime>
		<privateMemory public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</privateMemory>
		<processCPUUsage public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</processCPUUsage>
		<totalMemory public="1" set="null" static="1"><x path="UInt"/></totalMemory>
		<totalMemoryNumber public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</totalMemoryNumber>
		<useCodePage public="1" static="1"><x path="Bool"/></useCodePage>
		<vmVersion public="1" set="null" static="1"><c path="String"/></vmVersion>
		<disposeXML public="1" set="method" static="1">
			<f a="node">
				<c path="flash.xml.XML"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</disposeXML>
		<exit public="1" set="method" static="1"><f a="code">
	<x path="UInt"/>
	<x path="Void"/>
</f></exit>
		<gc public="1" set="method" static="1"><f a=""><x path="Void"/></f></gc>
		<pause public="1" set="method" static="1"><f a=""><x path="Void"/></f></pause>
		<pauseForGCIfCollectionImminent public="1" set="method" static="1">
			<f a="?imminence">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</pauseForGCIfCollectionImminent>
		<resume public="1" set="method" static="1"><f a=""><x path="Void"/></f></resume>
		<setClipboard public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<x path="Void"/>
</f></setClipboard>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="C:\HaxeToolkit\haxe\std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><x path="Bool"/></background>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<border public="1"><x path="Bool"/></border>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><x path="Int"/></length>
		<maxChars public="1"><x path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><x path="Bool"/></multiline>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><x path="Int"/></scrollH>
		<scrollV public="1"><x path="Int"/></scrollV>
		<selectable public="1"><x path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<sharpness public="1"><x path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><x path="UInt"/></textColor>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textInteractionMode public="1" set="null">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<thickness public="1"><x path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setTextFormat>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<x path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<x path="UInt"/>
	<x path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<loop public="1"><x path="Bool"/></loop>
		<play public="1"><x path="Bool"/></play>
		<print public="1"><x path="Bool"/></print>
		<quality public="1"><x path="Bool"/></quality>
		<rewind public="1"><x path="Bool"/></rewind>
		<save public="1"><x path="Bool"/></save>
		<zoom public="1"><x path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><x path="Bool"/></clear>
		<copy public="1"><x path="Bool"/></copy>
		<cut public="1"><x path="Bool"/></cut>
		<paste public="1"><x path="Bool"/></paste>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.ui.KeyLocation" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/KeyLocation.hx">
		<D_PAD/>
		<LEFT/>
		<NUM_PAD/>
		<RIGHT/>
		<STANDARD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.utils.IDataInput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><x path="UInt"/></length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1"><x path="UInt"/></position>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1" set="method">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1" set="method">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.utils.Endian" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.QName" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/QName.hx" extern="1">
		<localName public="1" set="null"><c path="String"/></localName>
		<uri public="1" set="null"><d/></uri>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.xml.XML" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="104" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="117" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the color of the trace output to `rgb`.</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ds.BalancedTree" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<toString public="1" set="method" line="233"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="220"><f a="l:k:v:r:?h" v="::::-1">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" set="method" line="25" static="1">
		<f a=""><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="28" static="1">
		<f a="this:k:v">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<exists public="1" get="inline" set="null" line="35" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</exists>
	<remove public="1" get="inline" set="null" line="38" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<keys public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</keys>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" set="method" line="25" static="1">
			<f a=""><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="28" static="1">
			<f a="this:k:v">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="35" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</exists>
		<remove public="1" get="inline" set="null" line="38" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</keys>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="63">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativePropertyIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="76"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="85"><f a=""><d/></f></next>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="114"><f a=""><d/></f></next>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._WeakMap.NativePropertyIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="76"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="85"><f a=""><d/></f></next>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._WeakMap.NativeValueIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="114"><f a=""><d/></f></next>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.macro.Compiler" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx"><haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc></class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type [c] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through 'using haxe.macro.ComplexTypeTools' syntax and then provides
	additional methods on haxe.macro.Expr.ComplexType instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v"><c path="String"/></CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EBreak/>
		<EContinue/>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic/>
		<APrivate/>
		<AStatic/>
		<AOverride/>
		<ADynamic/>
		<AInline/>
		<AMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum/>
		<TDStructure/>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
		</TDClass>
		<TDAlias a="t"><e path="haxe.macro.ComplexType"/></TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		</TDAbstract>
	</enum>
	<class path="haxe.macro.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1"><c path="String"/></message>
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<toString set="method" line="333"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="329"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression [e] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="70" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		If [e] has no sub-expressions, this operation has no effect.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}</haxe_doc>
		</iter>
		<map public="1" set="method" line="156" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		If [e] has no sub-expressions, this operation returns [e] unchanged.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:
			- `Int`, `Float` and `String` literals
			- identifiers `true`, `false` and `null`
			- structure declarations if all their fields are values
			- array declarations if all their elements are values
			- unary operators `-`, `!` and `~` if the operand is a value
			- binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="283" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="286" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="295" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="302" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Printer" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="37"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="45"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<printString public="1" set="method" line="72"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="75"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="84"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="89"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="96"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="105"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="109"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="119"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="129"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="134"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="140"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="146"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="152"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="211"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="215"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="220"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="225"><f a="t:?printPackage" v=":true">
	<t path="haxe.macro.TypeDefinition"/>
	<x path="Bool"/>
	<c path="String"/>
</f></printTypeDefinition>
		<opt params="T" set="method" line="294"><f a="v:f:?prefix" v="::''">
	<c path="opt.T"/>
	<f a="">
		<c path="opt.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
</f></opt>
		<new public="1" set="method" line="32"><f a="?tabString" v="'\t'">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx">
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed/>
		<AOpened/>
		<AConst/>
		<AClassStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></AClassStatics>
		<AEnumStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></AEnumStatics>
		<AAbstractStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></AAbstractStatics>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal/>
		<KTypeParameter a="constraints"><c path="Array"><e path="haxe.macro.Type"/></c></KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
		<KGeneric/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KMacroType/>
		<KAbstractImpl a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></KAbstractImpl>
		<KGenericBuild/>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccResolve/>
		<AccCall/>
		<AccInline/>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
		</AccRequire>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethInline/>
		<MethDynamic/>
		<MethMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i"><x path="Int"/></TInt>
		<TFloat a="s"><c path="String"/></TFloat>
		<TString a="s"><c path="String"/></TString>
		<TBool a="b"><x path="Bool"/></TBool>
		<TNull/>
		<TThis/>
		<TSuper/>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<enum path="haxe.macro.ModuleType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></TClassDecl>
		<TEnumDecl a="e"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></TEnumDecl>
		<TTypeDecl a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t></TTypeDecl>
		<TAbstract a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></TAbstract>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FStatic>
		<FAnon a="cf"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></FAnon>
		<FDynamic a="s"><c path="String"/></FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
		</FEnum>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c"><e path="haxe.macro.TConstant"/></TConst>
		<TLocal a="v"><t path="haxe.macro.TVar"/></TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
		</TField>
		<TTypeExpr a="m"><e path="haxe.macro.ModuleType"/></TTypeExpr>
		<TParenthesis a="e"><t path="haxe.macro.TypedExpr"/></TParenthesis>
		<TObjectDecl a="fields"><c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c></TObjectDecl>
		<TArrayDecl a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
		</TUnop>
		<TFunction a="tfunc"><t path="haxe.macro.TFunc"/></TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TVar>
		<TBlock a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TSwitch>
		<TPatMatch/>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
		</TTry>
		<TReturn a="e"><t path="Null"><t path="haxe.macro.TypedExpr"/></t></TReturn>
		<TBreak/>
		<TContinue/>
		<TThrow a="e"><t path="haxe.macro.TypedExpr"/></TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
		</TEnumParameter>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.macro.TypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/TypeTools.hx">
		<findField public="1" set="method" line="195" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.rtti.Meta" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="32" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="44" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="56" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
	</class>
	<typedef path="msignal.AnySignal" params="" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Signal.hx" module="msignal.Signal">
		<c path="msignal.Signal">
			<d/>
			<d/>
		</c>
		<haxe_doc>A convenience type describing any kind of signal.</haxe_doc>
	</typedef>
	<class path="msignal.Signal" params="TSlot:TListener" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Signal.hx">
		<valueClasses public="1"><c path="Array"><d/></c></valueClasses>
		<numListeners public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The current number of listeners for the signal.</haxe_doc>
		</numListeners>
		<slots><c path="msignal.SlotList">
	<c path="msignal.Signal.TSlot"/>
	<c path="msignal.Signal.TListener"/>
</c></slots>
		<priorityBased><x path="Bool"/></priorityBased>
		<add public="1" set="method" line="62">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<haxe_doc>Subscribes a listener for the signal.
		
		@param listener A function matching the signature of TListener
		@return The added listener slot</haxe_doc>
		</add>
		<addOnce public="1" set="method" line="75">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<haxe_doc>Subscribes a one-time listener for this signal.
		The signal will remove the listener automatically the first time it is called,
		after the dispatch to all listeners is complete.
		
		@param listener A function matching the signature of TListener
		@return The added listener slot</haxe_doc>
		</addOnce>
		<addWithPriority public="1" set="method" line="90">
			<f a="listener:?priority" v=":0">
				<c path="msignal.Signal.TListener"/>
				<x path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<haxe_doc>Subscribes a listener for the signal.
		After you successfully register an event listener,
		you cannot change its priority through additional calls to add().
		To change a listener's priority, you must first call remove().
		Then you can register the listener again with the new priority level.
		
		@param listener A function matching the signature of TListener
		@return The added listener slot</haxe_doc>
		</addWithPriority>
		<addOnceWithPriority public="1" set="method" line="103">
			<f a="listener:?priority" v=":0">
				<c path="msignal.Signal.TListener"/>
				<x path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<haxe_doc>Subscribes a one-time listener for this signal.
		The signal will remove the listener automatically the first time it is 
		called, after the dispatch to all listeners is complete.
		
		@param listener A function matching the signature of TListener
		@return The added listener slot</haxe_doc>
		</addOnceWithPriority>
		<remove public="1" set="method" line="114">
			<f a="listener">
				<c path="msignal.Signal.TListener"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<haxe_doc>Unsubscribes a listener from the signal.
		
		@param listener The listener to remove
		@return The removed listener slot</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="126">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsubscribes all listeners from the signal.</haxe_doc>
		</removeAll>
		<registerListener set="method" line="131"><f a="listener:?once:?priority" v=":false:0">
	<c path="msignal.Signal.TListener"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="msignal.Signal.TSlot"/>
</f></registerListener>
		<registrationPossible set="method" line="147"><f a="listener:once">
	<c path="msignal.Signal.TListener"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></registrationPossible>
		<createSlot set="method" line="165">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="msignal.Signal.TListener"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="msignal.Signal.TSlot"/>
			</f>
			<meta><m n=":IgnoreCover"/></meta>
		</createSlot>
		<get_numListeners set="method" line="170"><f a=""><x path="Int"/></f></get_numListeners>
		<new set="method" line="48"><f a="?valueClasses" v="null">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A Signal manages a list of listeners, which are executed when the signal is 
	dispatched.</haxe_doc>
	</class>
	<class path="msignal.Signal0" params="" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot0"/>
			<f a=""><x path="Void"/></f>
		</extends>
		<dispatch public="1" set="method" line="189">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Executes the signals listeners with no arguements.</haxe_doc>
		</dispatch>
		<createSlot set="method" line="200" override="1"><f a="listener:?once:?priority" v=":false:0">
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="msignal.Slot0"/>
</f></createSlot>
		<new public="1" set="method" line="181"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Signal that executes listeners with no arguments.</haxe_doc>
	</class>
	<class path="msignal.Signal1" params="TValue" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
			<f a="">
				<c path="msignal.Signal1.TValue"/>
				<x path="Void"/>
			</f>
		</extends>
		<dispatch public="1" set="method" line="219">
			<f a="value">
				<c path="msignal.Signal1.TValue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes the signals listeners with one arguement.</haxe_doc>
		</dispatch>
		<createSlot set="method" line="230" override="1"><f a="listener:?once:?priority" v=":false:0">
	<f a="">
		<c path="msignal.Signal1.TValue"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="msignal.Slot1"><c path="msignal.Signal1.TValue"/></c>
</f></createSlot>
		<new public="1" set="method" line="211"><f a="?type" v="null">
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Signal that executes listeners with one arguments.</haxe_doc>
	</class>
	<class path="msignal.Signal2" params="TValue1:TValue2" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Signal.hx" module="msignal.Signal">
		<extends path="msignal.Signal">
			<c path="msignal.Slot2">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
				<x path="Void"/>
			</f>
		</extends>
		<dispatch public="1" set="method" line="249">
			<f a="value1:value2">
				<c path="msignal.Signal2.TValue1"/>
				<c path="msignal.Signal2.TValue2"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes the signals listeners with two arguements.</haxe_doc>
		</dispatch>
		<createSlot set="method" line="260" override="1"><f a="listener:?once:?priority" v=":false:0">
	<f a=":">
		<c path="msignal.Signal2.TValue1"/>
		<c path="msignal.Signal2.TValue2"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="msignal.Slot2">
		<c path="msignal.Signal2.TValue1"/>
		<c path="msignal.Signal2.TValue2"/>
	</c>
</f></createSlot>
		<new public="1" set="method" line="241"><f a="?type1:?type2" v="null:null">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Signal that executes listeners with two arguments.</haxe_doc>
	</class>
	<typedef path="msignal.AnySlot" params="" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Slot.hx" module="msignal.Slot">
		<c path="msignal.Slot">
			<d/>
			<d/>
		</c>
		<haxe_doc>A convenience type describing any kind of slot.</haxe_doc>
	</typedef>
	<class path="msignal.Slot" params="TSignal:TListener" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Slot.hx">
		<listener public="1" set="accessor">
			<c path="msignal.Slot.TListener"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The listener associated with this slot.
		Note: for hxcpp 2.10 this requires a getter method to compile</haxe_doc>
		</listener>
		<once public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether this slot is automatically removed after it has been used once.</haxe_doc>
		</once>
		<priority public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The priority of this slot should be given in the execution order.
		An Signal will call higher numbers before lower ones.
		Defaults to 0.</haxe_doc>
		</priority>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>Whether the listener is called on execution. Defaults to true.</haxe_doc>
		</enabled>
		<signal><c path="msignal.Slot.TSignal"/></signal>
		<remove public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the slot from its signal.</haxe_doc>
		</remove>
		<set_listener set="method" line="101"><f a="value">
	<c path="msignal.Slot.TListener"/>
	<c path="msignal.Slot.TListener"/>
</f></set_listener>
		<new set="method" line="73"><f a="signal:listener:?once:?priority" v="::false:0">
	<c path="msignal.Slot.TSignal"/>
	<c path="msignal.Slot.TListener"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Defines the basic properties of a listener associated with a Signal.</haxe_doc>
	</class>
	<class path="msignal.Slot0" params="" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal0"/>
			<f a=""><x path="Void"/></f>
		</extends>
		<execute public="1" set="method" line="121">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Executes a listener with no arguments.</haxe_doc>
		</execute>
		<new public="1" set="method" line="113"><f a="signal:listener:?once:?priority" v="::false:0">
	<c path="msignal.Signal0"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A slot that executes a listener with no arguments.</haxe_doc>
	</class>
	<class path="msignal.Slot1" params="TValue" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
			<f a="">
				<c path="msignal.Slot1.TValue"/>
				<x path="Void"/>
			</f>
		</extends>
		<param public="1">
			<c path="msignal.Slot1.TValue"/>
			<haxe_doc>Allows the slot to inject the argument to dispatch.</haxe_doc>
		</param>
		<execute public="1" set="method" line="148">
			<f a="value1">
				<c path="msignal.Slot1.TValue"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Executes a listener with one argument.
		If <code>param</code> is not null, it overrides the value provided.]]></haxe_doc>
		</execute>
		<new public="1" set="method" line="139"><f a="signal:listener:?once:?priority" v="::false:0">
	<c path="msignal.Signal1"><c path="msignal.Slot1.TValue"/></c>
	<f a="">
		<c path="msignal.Slot1.TValue"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A slot that executes a listener with one argument.</haxe_doc>
	</class>
	<class path="msignal.Slot2" params="TValue1:TValue2" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/Slot.hx" module="msignal.Slot">
		<extends path="msignal.Slot">
			<c path="msignal.Signal2">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
			</c>
			<f a=":">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
				<x path="Void"/>
			</f>
		</extends>
		<param1 public="1">
			<c path="msignal.Slot2.TValue1"/>
			<haxe_doc>Allows the slot to inject the first argument to dispatch.</haxe_doc>
		</param1>
		<param2 public="1">
			<c path="msignal.Slot2.TValue2"/>
			<haxe_doc>Allows the slot to inject the second argument to dispatch.</haxe_doc>
		</param2>
		<execute public="1" set="method" line="182">
			<f a="value1:value2">
				<c path="msignal.Slot2.TValue1"/>
				<c path="msignal.Slot2.TValue2"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Executes a listener with two arguments.
		If <code>param1</code> or <code>param2</code> is set, 
		they override the values provided.]]></haxe_doc>
		</execute>
		<new public="1" set="method" line="172"><f a="signal:listener:?once:?priority" v="::false:0">
	<c path="msignal.Signal2">
		<c path="msignal.Slot2.TValue1"/>
		<c path="msignal.Slot2.TValue2"/>
	</c>
	<f a=":">
		<c path="msignal.Slot2.TValue1"/>
		<c path="msignal.Slot2.TValue2"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A slot that executes a listener with two arguments.</haxe_doc>
	</class>
	<class path="msignal.SlotList" params="TSlot:TListener" file="C:\HaxeToolkit\haxe\lib\msignal/1,2,2/msignal/SlotList.hx">
		<NIL public="1" static="1">
			<c path="msignal.SlotList">
				<d/>
				<d/>
			</c>
			<haxe_doc>Represents an empty list. Used as the list terminator.</haxe_doc>
		</NIL>
		<head public="1"><c path="msignal.SlotList.TSlot"/></head>
		<tail public="1"><c path="msignal.SlotList">
	<c path="msignal.SlotList.TSlot"/>
	<c path="msignal.SlotList.TListener"/>
</c></tail>
		<nonEmpty public="1"><x path="Bool"/></nonEmpty>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The number of slots in the list.</haxe_doc>
		</length>
		<get_length set="method" line="80"><f a=""><x path="Int"/></f></get_length>
		<prepend public="1" set="method" line="106">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<haxe_doc>Prepends a slot to this list.
		@param	slot The item to be prepended.
		@return	A list consisting of slot followed by all elements of this list.</haxe_doc>
		</prepend>
		<append public="1" set="method" line="119">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<haxe_doc>Appends a slot to this list.
		Note: appending is O(n). Where possible, prepend which is O(1).
		In some cases, many list items must be cloned to 
		avoid changing existing lists.
		@param	slot The item to be appended.
		@return	A list consisting of all elements of this list followed by slot.</haxe_doc>
		</append>
		<insertWithPriority public="1" set="method" line="153">
			<f a="slot">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<haxe_doc>Insert a slot into the list in a position according to its priority.
		The higher the priority, the closer the item will be inserted to the 
		list head.
		@param slot The item to be inserted.</haxe_doc>
		</insertWithPriority>
		<filterNot public="1" set="method" line="191">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
			</f>
			<haxe_doc>Returns the slots in this list that do not contain the supplied 
		listener. Note: assumes the listener is not repeated within the list.
		@param	listener The function to remove.
		@return A list consisting of all elements of this list that do not 
				have listener.</haxe_doc>
		</filterNot>
		<contains public="1" set="method" line="223">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether the supplied listener Function is contained 
		within this list</haxe_doc>
		</contains>
		<find public="1" set="method" line="244">
			<f a="listener">
				<c path="msignal.SlotList.TListener"/>
				<c path="msignal.SlotList.TSlot"/>
			</f>
			<haxe_doc>Retrieves the Slot associated with a supplied listener within the SlotList.
		@param   listener The Function being searched for
		@return  The ISlot in this list associated with the listener parameter 
				 through the ISlot.listener property. Returns null if no such 
				 ISlot instance exists or the list is empty.</haxe_doc>
		</find>
		<new public="1" set="method" line="50">
			<f a="head:?tail" v=":null">
				<c path="msignal.SlotList.TSlot"/>
				<c path="msignal.SlotList">
					<c path="msignal.SlotList.TSlot"/>
					<c path="msignal.SlotList.TListener"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Creates and returns a new SlotList object.

		<p>A user never has to create a SlotList manually. 
		Use the <code>NIL</code> element to represent an empty list. 
		<code>NIL.prepend(value)</code> would create a list containing 
		<code>value</code></p>.

		@param head The first slot in the list.
		@param tail A list containing all slots except head.]]></haxe_doc>
		</new>
	</class>
</haxe>